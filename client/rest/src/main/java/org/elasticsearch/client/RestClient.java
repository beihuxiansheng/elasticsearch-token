begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|ClientProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpEntityEnclosingRequestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpHead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpRequestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpTrace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|utils
operator|.
name|URIBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|concurrent
operator|.
name|FutureCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|nio
operator|.
name|client
operator|.
name|CloseableHttpAsyncClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpAsyncMethods
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|protocol
operator|.
name|HttpAsyncRequestProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|protocol
operator|.
name|HttpAsyncResponseConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * Client that connects to an elasticsearch cluster through http.  * Must be created using {@link RestClientBuilder}, which allows to set all the different options or just rely on defaults.  * The hosts that are part of the cluster need to be provided at creation time, but can also be replaced later  * by calling {@link #setHosts(HttpHost...)}.  * The method {@link #performRequest(String, String, Map, HttpEntity, Header...)} allows to send a request to the cluster. When  * sending a request, a host gets selected out of the provided ones in a round-robin fashion. Failing hosts are marked dead and  * retried after a certain amount of time (minimum 1 minute, maximum 30 minutes), depending on how many times they previously  * failed (the more failures, the later they will be retried). In case of failures all of the alive nodes (or dead nodes that  * deserve a retry) are retried until one responds or none of them does, in which case an {@link IOException} will be thrown.  *  * Requests can be traced by enabling trace logging for "tracer". The trace logger outputs requests and responses in curl format.  */
end_comment

begin_class
DECL|class|RestClient
specifier|public
specifier|final
class|class
name|RestClient
implements|implements
name|Closeable
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Log
name|logger
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RestClient
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|client
specifier|private
specifier|final
name|CloseableHttpAsyncClient
name|client
decl_stmt|;
comment|//we don't rely on default headers supported by HttpAsyncClient as those cannot be replaced
DECL|field|defaultHeaders
specifier|private
specifier|final
name|Header
index|[]
name|defaultHeaders
decl_stmt|;
DECL|field|maxRetryTimeoutMillis
specifier|private
specifier|final
name|long
name|maxRetryTimeoutMillis
decl_stmt|;
DECL|field|lastHostIndex
specifier|private
specifier|final
name|AtomicInteger
name|lastHostIndex
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|hosts
specifier|private
specifier|volatile
name|Set
argument_list|<
name|HttpHost
argument_list|>
name|hosts
decl_stmt|;
DECL|field|blacklist
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|HttpHost
argument_list|,
name|DeadHostState
argument_list|>
name|blacklist
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|failureListener
specifier|private
specifier|final
name|FailureListener
name|failureListener
decl_stmt|;
DECL|method|RestClient
name|RestClient
parameter_list|(
name|CloseableHttpAsyncClient
name|client
parameter_list|,
name|long
name|maxRetryTimeoutMillis
parameter_list|,
name|Header
index|[]
name|defaultHeaders
parameter_list|,
name|HttpHost
index|[]
name|hosts
parameter_list|,
name|FailureListener
name|failureListener
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
name|this
operator|.
name|maxRetryTimeoutMillis
operator|=
name|maxRetryTimeoutMillis
expr_stmt|;
name|this
operator|.
name|defaultHeaders
operator|=
name|defaultHeaders
expr_stmt|;
name|this
operator|.
name|failureListener
operator|=
name|failureListener
expr_stmt|;
name|setHosts
argument_list|(
name|hosts
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a new {@link RestClientBuilder} to help with {@link RestClient} creation.      */
DECL|method|builder
specifier|public
specifier|static
name|RestClientBuilder
name|builder
parameter_list|(
name|HttpHost
modifier|...
name|hosts
parameter_list|)
block|{
return|return
operator|new
name|RestClientBuilder
argument_list|(
name|hosts
argument_list|)
return|;
block|}
comment|/**      * Replaces the hosts that the client communicates with.      * @see HttpHost      */
DECL|method|setHosts
specifier|public
specifier|synchronized
name|void
name|setHosts
parameter_list|(
name|HttpHost
modifier|...
name|hosts
parameter_list|)
block|{
if|if
condition|(
name|hosts
operator|==
literal|null
operator|||
name|hosts
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"hosts must not be null nor empty"
argument_list|)
throw|;
block|}
name|Set
argument_list|<
name|HttpHost
argument_list|>
name|httpHosts
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|HttpHost
name|host
range|:
name|hosts
control|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|host
argument_list|,
literal|"host cannot be null"
argument_list|)
expr_stmt|;
name|httpHosts
operator|.
name|add
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|hosts
operator|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|httpHosts
argument_list|)
expr_stmt|;
name|this
operator|.
name|blacklist
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * Sends a request to the elasticsearch cluster that the current client points to and waits for the corresponding response      * to be returned. Shortcut to {@link #performRequest(String, String, Map, HttpEntity, Header...)} but without parameters      * and request body.      *      * @param method the http method      * @param endpoint the path of the request (without host and port)      * @param headers the optional request headers      * @return the response returned by elasticsearch      * @throws IOException in case of a problem or the connection was aborted      * @throws ClientProtocolException in case of an http protocol error      * @throws ResponseException in case elasticsearch responded with a status code that indicated an error      */
DECL|method|performRequest
specifier|public
name|Response
name|performRequest
parameter_list|(
name|String
name|method
parameter_list|,
name|String
name|endpoint
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|performRequest
argument_list|(
name|method
argument_list|,
name|endpoint
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
operator|(
name|HttpEntity
operator|)
literal|null
argument_list|,
name|headers
argument_list|)
return|;
block|}
comment|/**      * Sends a request to the elasticsearch cluster that the current client points to and waits for the corresponding response      * to be returned. Shortcut to {@link #performRequest(String, String, Map, HttpEntity, Header...)} but without request body.      *      * @param method the http method      * @param endpoint the path of the request (without host and port)      * @param params the query_string parameters      * @param headers the optional request headers      * @return the response returned by elasticsearch      * @throws IOException in case of a problem or the connection was aborted      * @throws ClientProtocolException in case of an http protocol error      * @throws ResponseException in case elasticsearch responded with a status code that indicated an error      */
DECL|method|performRequest
specifier|public
name|Response
name|performRequest
parameter_list|(
name|String
name|method
parameter_list|,
name|String
name|endpoint
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|performRequest
argument_list|(
name|method
argument_list|,
name|endpoint
argument_list|,
name|params
argument_list|,
operator|(
name|HttpEntity
operator|)
literal|null
argument_list|,
name|headers
argument_list|)
return|;
block|}
comment|/**      * Sends a request to the elasticsearch cluster that the current client points to and waits for the corresponding response      * to be returned. Shortcut to {@link #performRequest(String, String, Map, HttpEntity, HttpAsyncResponseConsumer, Header...)}      * which doesn't require specifying an {@link HttpAsyncResponseConsumer} instance, {@link HeapBufferedAsyncResponseConsumer}      * will be used to consume the response body.      *      * @param method the http method      * @param endpoint the path of the request (without host and port)      * @param params the query_string parameters      * @param entity the body of the request, null if not applicable      * @param headers the optional request headers      * @return the response returned by elasticsearch      * @throws IOException in case of a problem or the connection was aborted      * @throws ClientProtocolException in case of an http protocol error      * @throws ResponseException in case elasticsearch responded with a status code that indicated an error      */
DECL|method|performRequest
specifier|public
name|Response
name|performRequest
parameter_list|(
name|String
name|method
parameter_list|,
name|String
name|endpoint
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|HttpEntity
name|entity
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpAsyncResponseConsumer
argument_list|<
name|HttpResponse
argument_list|>
name|responseConsumer
init|=
operator|new
name|HeapBufferedAsyncResponseConsumer
argument_list|()
decl_stmt|;
return|return
name|performRequest
argument_list|(
name|method
argument_list|,
name|endpoint
argument_list|,
name|params
argument_list|,
name|entity
argument_list|,
name|responseConsumer
argument_list|,
name|headers
argument_list|)
return|;
block|}
comment|/**      * Sends a request to the elasticsearch cluster that the current client points to. Blocks until the request is completed and returns      * its response of fails by throwing an exception. Selects a host out of the provided ones in a round-robin fashion. Failing hosts      * are marked dead and retried after a certain amount of time (minimum 1 minute, maximum 30 minutes), depending on how many times      * they previously failed (the more failures, the later they will be retried). In case of failures all of the alive nodes (or dead      * nodes that deserve a retry) are retried until one responds or none of them does, in which case an {@link IOException} will be thrown.      *      * @param method the http method      * @param endpoint the path of the request (without host and port)      * @param params the query_string parameters      * @param entity the body of the request, null if not applicable      * @param responseConsumer the {@link HttpAsyncResponseConsumer} callback. Controls how the response      * body gets streamed from a non-blocking HTTP connection on the client side.      * @param headers the optional request headers      * @return the response returned by elasticsearch      * @throws IOException in case of a problem or the connection was aborted      * @throws ClientProtocolException in case of an http protocol error      * @throws ResponseException in case elasticsearch responded with a status code that indicated an error      */
DECL|method|performRequest
specifier|public
name|Response
name|performRequest
parameter_list|(
name|String
name|method
parameter_list|,
name|String
name|endpoint
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|HttpEntity
name|entity
parameter_list|,
name|HttpAsyncResponseConsumer
argument_list|<
name|HttpResponse
argument_list|>
name|responseConsumer
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
name|SyncResponseListener
name|listener
init|=
operator|new
name|SyncResponseListener
argument_list|()
decl_stmt|;
name|performRequest
argument_list|(
name|method
argument_list|,
name|endpoint
argument_list|,
name|params
argument_list|,
name|entity
argument_list|,
name|responseConsumer
argument_list|,
name|listener
argument_list|,
name|headers
argument_list|)
expr_stmt|;
return|return
name|listener
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * Sends a request to the elasticsearch cluster that the current client points to. Doesn't wait for the response, instead      * the provided {@link ResponseListener} will be notified upon completion or failure. Shortcut to      * {@link #performRequest(String, String, Map, HttpEntity, ResponseListener, Header...)} but without parameters and  request body.      *      * @param method the http method      * @param endpoint the path of the request (without host and port)      * @param responseListener the {@link ResponseListener} to notify when the request is completed or fails      * @param headers the optional request headers      */
DECL|method|performRequest
specifier|public
name|void
name|performRequest
parameter_list|(
name|String
name|method
parameter_list|,
name|String
name|endpoint
parameter_list|,
name|ResponseListener
name|responseListener
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
block|{
name|performRequest
argument_list|(
name|method
argument_list|,
name|endpoint
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|,
name|responseListener
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sends a request to the elasticsearch cluster that the current client points to. Doesn't wait for the response, instead      * the provided {@link ResponseListener} will be notified upon completion or failure. Shortcut to      * {@link #performRequest(String, String, Map, HttpEntity, ResponseListener, Header...)} but without request body.      *      * @param method the http method      * @param endpoint the path of the request (without host and port)      * @param params the query_string parameters      * @param responseListener the {@link ResponseListener} to notify when the request is completed or fails      * @param headers the optional request headers      */
DECL|method|performRequest
specifier|public
name|void
name|performRequest
parameter_list|(
name|String
name|method
parameter_list|,
name|String
name|endpoint
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|ResponseListener
name|responseListener
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
block|{
name|performRequest
argument_list|(
name|method
argument_list|,
name|endpoint
argument_list|,
name|params
argument_list|,
literal|null
argument_list|,
name|responseListener
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sends a request to the elasticsearch cluster that the current client points to. Doesn't wait for the response, instead      * the provided {@link ResponseListener} will be notified upon completion or failure.      * Shortcut to {@link #performRequest(String, String, Map, HttpEntity, HttpAsyncResponseConsumer, ResponseListener, Header...)}      * which doesn't require specifying an {@link HttpAsyncResponseConsumer} instance, {@link HeapBufferedAsyncResponseConsumer}      * will be used to consume the response body.      *      * @param method the http method      * @param endpoint the path of the request (without host and port)      * @param params the query_string parameters      * @param entity the body of the request, null if not applicable      * @param responseListener the {@link ResponseListener} to notify when the request is completed or fails      * @param headers the optional request headers      */
DECL|method|performRequest
specifier|public
name|void
name|performRequest
parameter_list|(
name|String
name|method
parameter_list|,
name|String
name|endpoint
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|HttpEntity
name|entity
parameter_list|,
name|ResponseListener
name|responseListener
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
block|{
name|HttpAsyncResponseConsumer
argument_list|<
name|HttpResponse
argument_list|>
name|responseConsumer
init|=
operator|new
name|HeapBufferedAsyncResponseConsumer
argument_list|()
decl_stmt|;
name|performRequest
argument_list|(
name|method
argument_list|,
name|endpoint
argument_list|,
name|params
argument_list|,
name|entity
argument_list|,
name|responseConsumer
argument_list|,
name|responseListener
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
comment|/**      * Sends a request to the elasticsearch cluster that the current client points to. The request is executed asynchronously      * and the provided {@link ResponseListener} gets notified upon request completion or failure.      * Selects a host out of the provided ones in a round-robin fashion. Failing hosts are marked dead and retried after a certain      * amount of time (minimum 1 minute, maximum 30 minutes), depending on how many times they previously failed (the more failures,      * the later they will be retried). In case of failures all of the alive nodes (or dead nodes that deserve a retry) are retried      * until one responds or none of them does, in which case an {@link IOException} will be thrown.      *      * @param method the http method      * @param endpoint the path of the request (without host and port)      * @param params the query_string parameters      * @param entity the body of the request, null if not applicable      * @param responseConsumer the {@link HttpAsyncResponseConsumer} callback. Controls how the response      * body gets streamed from a non-blocking HTTP connection on the client side.      * @param responseListener the {@link ResponseListener} to notify when the request is completed or fails      * @param headers the optional request headers      */
DECL|method|performRequest
specifier|public
name|void
name|performRequest
parameter_list|(
name|String
name|method
parameter_list|,
name|String
name|endpoint
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|HttpEntity
name|entity
parameter_list|,
name|HttpAsyncResponseConsumer
argument_list|<
name|HttpResponse
argument_list|>
name|responseConsumer
parameter_list|,
name|ResponseListener
name|responseListener
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
block|{
name|URI
name|uri
init|=
name|buildUri
argument_list|(
name|endpoint
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|HttpRequestBase
name|request
init|=
name|createHttpRequest
argument_list|(
name|method
argument_list|,
name|uri
argument_list|,
name|entity
argument_list|)
decl_stmt|;
name|setHeaders
argument_list|(
name|request
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|FailureTrackingResponseListener
name|failureTrackingResponseListener
init|=
operator|new
name|FailureTrackingResponseListener
argument_list|(
name|responseListener
argument_list|)
decl_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|performRequest
argument_list|(
name|startTime
argument_list|,
name|nextHost
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
name|request
argument_list|,
name|responseConsumer
argument_list|,
name|failureTrackingResponseListener
argument_list|)
expr_stmt|;
block|}
DECL|method|performRequest
specifier|private
name|void
name|performRequest
parameter_list|(
specifier|final
name|long
name|startTime
parameter_list|,
specifier|final
name|Iterator
argument_list|<
name|HttpHost
argument_list|>
name|hosts
parameter_list|,
specifier|final
name|HttpRequestBase
name|request
parameter_list|,
specifier|final
name|HttpAsyncResponseConsumer
argument_list|<
name|HttpResponse
argument_list|>
name|responseConsumer
parameter_list|,
specifier|final
name|FailureTrackingResponseListener
name|listener
parameter_list|)
block|{
specifier|final
name|HttpHost
name|host
init|=
name|hosts
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//we stream the request body if the entity allows for it
name|HttpAsyncRequestProducer
name|requestProducer
init|=
name|HttpAsyncMethods
operator|.
name|create
argument_list|(
name|host
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|client
operator|.
name|execute
argument_list|(
name|requestProducer
argument_list|,
name|responseConsumer
argument_list|,
operator|new
name|FutureCallback
argument_list|<
name|HttpResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|completed
parameter_list|(
name|HttpResponse
name|httpResponse
parameter_list|)
block|{
try|try
block|{
name|RequestLogger
operator|.
name|logResponse
argument_list|(
name|logger
argument_list|,
name|request
argument_list|,
name|host
argument_list|,
name|httpResponse
argument_list|)
expr_stmt|;
name|int
name|statusCode
init|=
name|httpResponse
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
name|Response
name|response
init|=
operator|new
name|Response
argument_list|(
name|request
operator|.
name|getRequestLine
argument_list|()
argument_list|,
name|host
argument_list|,
name|httpResponse
argument_list|)
decl_stmt|;
if|if
condition|(
name|isSuccessfulResponse
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
argument_list|,
name|statusCode
argument_list|)
condition|)
block|{
name|onResponse
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onSuccess
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ResponseException
name|responseException
init|=
operator|new
name|ResponseException
argument_list|(
name|response
argument_list|)
decl_stmt|;
if|if
condition|(
name|mustRetry
argument_list|(
name|statusCode
argument_list|)
condition|)
block|{
comment|//mark host dead and retry against next one
name|onFailure
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|retryIfPossible
argument_list|(
name|responseException
argument_list|,
name|hosts
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//mark host alive and don't retry, as the error should be a request problem
name|onResponse
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onDefinitiveFailure
argument_list|(
name|responseException
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|listener
operator|.
name|onDefinitiveFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|failed
parameter_list|(
name|Exception
name|failure
parameter_list|)
block|{
try|try
block|{
name|RequestLogger
operator|.
name|logFailedRequest
argument_list|(
name|logger
argument_list|,
name|request
argument_list|,
name|host
argument_list|,
name|failure
argument_list|)
expr_stmt|;
name|onFailure
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|retryIfPossible
argument_list|(
name|failure
argument_list|,
name|hosts
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|listener
operator|.
name|onDefinitiveFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|retryIfPossible
parameter_list|(
name|Exception
name|exception
parameter_list|,
name|Iterator
argument_list|<
name|HttpHost
argument_list|>
name|hosts
parameter_list|,
name|HttpRequestBase
name|request
parameter_list|)
block|{
if|if
condition|(
name|hosts
operator|.
name|hasNext
argument_list|()
condition|)
block|{
comment|//in case we are retrying, check whether maxRetryTimeout has been reached
name|long
name|timeElapsedMillis
init|=
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|startTime
argument_list|)
decl_stmt|;
name|long
name|timeout
init|=
name|maxRetryTimeoutMillis
operator|-
name|timeElapsedMillis
decl_stmt|;
if|if
condition|(
name|timeout
operator|<=
literal|0
condition|)
block|{
name|IOException
name|retryTimeoutException
init|=
operator|new
name|IOException
argument_list|(
literal|"request retries exceeded max retry timeout ["
operator|+
name|maxRetryTimeoutMillis
operator|+
literal|"]"
argument_list|)
decl_stmt|;
name|listener
operator|.
name|onDefinitiveFailure
argument_list|(
name|retryTimeoutException
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|listener
operator|.
name|trackFailure
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|request
operator|.
name|reset
argument_list|()
expr_stmt|;
name|performRequest
argument_list|(
name|startTime
argument_list|,
name|hosts
argument_list|,
name|request
argument_list|,
name|responseConsumer
argument_list|,
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|listener
operator|.
name|onDefinitiveFailure
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|cancelled
parameter_list|()
block|{
name|listener
operator|.
name|onDefinitiveFailure
argument_list|(
operator|new
name|ExecutionException
argument_list|(
literal|"request was cancelled"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|setHeaders
specifier|private
name|void
name|setHeaders
parameter_list|(
name|HttpRequest
name|httpRequest
parameter_list|,
name|Header
index|[]
name|requestHeaders
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|requestHeaders
argument_list|,
literal|"request headers must not be null"
argument_list|)
expr_stmt|;
for|for
control|(
name|Header
name|defaultHeader
range|:
name|defaultHeaders
control|)
block|{
name|httpRequest
operator|.
name|setHeader
argument_list|(
name|defaultHeader
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Header
name|requestHeader
range|:
name|requestHeaders
control|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|requestHeader
argument_list|,
literal|"request header must not be null"
argument_list|)
expr_stmt|;
name|httpRequest
operator|.
name|setHeader
argument_list|(
name|requestHeader
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Returns an iterator of hosts to be used for a request call.      * Ideally, the first host is retrieved from the iterator and used successfully for the request.      * Otherwise, after each failure the next host should be retrieved from the iterator so that the request can be retried until      * the iterator is exhausted. The maximum total of attempts is equal to the number of hosts that are available in the iterator.      * The iterator returned will never be empty, rather an {@link IllegalStateException} in case there are no hosts.      * In case there are no healthy hosts available, or dead ones to be be retried, one dead host gets returned.      */
DECL|method|nextHost
specifier|private
name|Iterable
argument_list|<
name|HttpHost
argument_list|>
name|nextHost
parameter_list|()
block|{
name|Set
argument_list|<
name|HttpHost
argument_list|>
name|filteredHosts
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|hosts
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|HttpHost
argument_list|,
name|DeadHostState
argument_list|>
name|entry
range|:
name|blacklist
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getDeadUntilNanos
argument_list|()
operator|<
literal|0
condition|)
block|{
name|filteredHosts
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|filteredHosts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//last resort: if there are no good hosts to use, return a single dead one, the one that's closest to being retried
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|HttpHost
argument_list|,
name|DeadHostState
argument_list|>
argument_list|>
name|sortedHosts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|blacklist
operator|.
name|entrySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedHosts
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|HttpHost
argument_list|,
name|DeadHostState
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|HttpHost
argument_list|,
name|DeadHostState
argument_list|>
name|o1
parameter_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|HttpHost
argument_list|,
name|DeadHostState
argument_list|>
name|o2
parameter_list|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|getValue
argument_list|()
operator|.
name|getDeadUntilNanos
argument_list|()
argument_list|,
name|o2
operator|.
name|getValue
argument_list|()
operator|.
name|getDeadUntilNanos
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|HttpHost
name|deadHost
init|=
name|sortedHosts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|logger
operator|.
name|trace
argument_list|(
literal|"resurrecting host ["
operator|+
name|deadHost
operator|+
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|singleton
argument_list|(
name|deadHost
argument_list|)
return|;
block|}
name|List
argument_list|<
name|HttpHost
argument_list|>
name|rotatedHosts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|filteredHosts
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|rotate
argument_list|(
name|rotatedHosts
argument_list|,
name|rotatedHosts
operator|.
name|size
argument_list|()
operator|-
name|lastHostIndex
operator|.
name|getAndIncrement
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rotatedHosts
return|;
block|}
comment|/**      * Called after each successful request call.      * Receives as an argument the host that was used for the successful request.      */
DECL|method|onResponse
specifier|private
name|void
name|onResponse
parameter_list|(
name|HttpHost
name|host
parameter_list|)
block|{
name|DeadHostState
name|removedHost
init|=
name|this
operator|.
name|blacklist
operator|.
name|remove
argument_list|(
name|host
argument_list|)
decl_stmt|;
if|if
condition|(
name|logger
operator|.
name|isDebugEnabled
argument_list|()
operator|&&
name|removedHost
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"removed host ["
operator|+
name|host
operator|+
literal|"] from blacklist"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Called after each failed attempt.      * Receives as an argument the host that was used for the failed attempt.      */
DECL|method|onFailure
specifier|private
name|void
name|onFailure
parameter_list|(
name|HttpHost
name|host
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|DeadHostState
name|previousDeadHostState
init|=
name|blacklist
operator|.
name|putIfAbsent
argument_list|(
name|host
argument_list|,
name|DeadHostState
operator|.
name|INITIAL_DEAD_STATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousDeadHostState
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"added host ["
operator|+
name|host
operator|+
literal|"] to blacklist"
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|blacklist
operator|.
name|replace
argument_list|(
name|host
argument_list|,
name|previousDeadHostState
argument_list|,
operator|new
name|DeadHostState
argument_list|(
name|previousDeadHostState
argument_list|)
argument_list|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"updated host ["
operator|+
name|host
operator|+
literal|"] already in blacklist"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|failureListener
operator|.
name|onFailure
argument_list|(
name|host
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|isSuccessfulResponse
specifier|private
specifier|static
name|boolean
name|isSuccessfulResponse
parameter_list|(
name|String
name|method
parameter_list|,
name|int
name|statusCode
parameter_list|)
block|{
return|return
name|statusCode
operator|<
literal|300
operator|||
operator|(
name|HttpHead
operator|.
name|METHOD_NAME
operator|.
name|equals
argument_list|(
name|method
argument_list|)
operator|&&
name|statusCode
operator|==
literal|404
operator|)
return|;
block|}
DECL|method|mustRetry
specifier|private
specifier|static
name|boolean
name|mustRetry
parameter_list|(
name|int
name|statusCode
parameter_list|)
block|{
switch|switch
condition|(
name|statusCode
condition|)
block|{
case|case
literal|502
case|:
case|case
literal|503
case|:
case|case
literal|504
case|:
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|addSuppressedException
specifier|private
specifier|static
name|Exception
name|addSuppressedException
parameter_list|(
name|Exception
name|suppressedException
parameter_list|,
name|Exception
name|currentException
parameter_list|)
block|{
if|if
condition|(
name|suppressedException
operator|!=
literal|null
condition|)
block|{
name|currentException
operator|.
name|addSuppressed
argument_list|(
name|suppressedException
argument_list|)
expr_stmt|;
block|}
return|return
name|currentException
return|;
block|}
DECL|method|createHttpRequest
specifier|private
specifier|static
name|HttpRequestBase
name|createHttpRequest
parameter_list|(
name|String
name|method
parameter_list|,
name|URI
name|uri
parameter_list|,
name|HttpEntity
name|entity
parameter_list|)
block|{
switch|switch
condition|(
name|method
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
condition|)
block|{
case|case
name|HttpDeleteWithEntity
operator|.
name|METHOD_NAME
case|:
return|return
name|addRequestBody
argument_list|(
operator|new
name|HttpDeleteWithEntity
argument_list|(
name|uri
argument_list|)
argument_list|,
name|entity
argument_list|)
return|;
case|case
name|HttpGetWithEntity
operator|.
name|METHOD_NAME
case|:
return|return
name|addRequestBody
argument_list|(
operator|new
name|HttpGetWithEntity
argument_list|(
name|uri
argument_list|)
argument_list|,
name|entity
argument_list|)
return|;
case|case
name|HttpHead
operator|.
name|METHOD_NAME
case|:
return|return
name|addRequestBody
argument_list|(
operator|new
name|HttpHead
argument_list|(
name|uri
argument_list|)
argument_list|,
name|entity
argument_list|)
return|;
case|case
name|HttpOptions
operator|.
name|METHOD_NAME
case|:
return|return
name|addRequestBody
argument_list|(
operator|new
name|HttpOptions
argument_list|(
name|uri
argument_list|)
argument_list|,
name|entity
argument_list|)
return|;
case|case
name|HttpPatch
operator|.
name|METHOD_NAME
case|:
return|return
name|addRequestBody
argument_list|(
operator|new
name|HttpPatch
argument_list|(
name|uri
argument_list|)
argument_list|,
name|entity
argument_list|)
return|;
case|case
name|HttpPost
operator|.
name|METHOD_NAME
case|:
name|HttpPost
name|httpPost
init|=
operator|new
name|HttpPost
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|addRequestBody
argument_list|(
name|httpPost
argument_list|,
name|entity
argument_list|)
expr_stmt|;
return|return
name|httpPost
return|;
case|case
name|HttpPut
operator|.
name|METHOD_NAME
case|:
return|return
name|addRequestBody
argument_list|(
operator|new
name|HttpPut
argument_list|(
name|uri
argument_list|)
argument_list|,
name|entity
argument_list|)
return|;
case|case
name|HttpTrace
operator|.
name|METHOD_NAME
case|:
return|return
name|addRequestBody
argument_list|(
operator|new
name|HttpTrace
argument_list|(
name|uri
argument_list|)
argument_list|,
name|entity
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"http method not supported: "
operator|+
name|method
argument_list|)
throw|;
block|}
block|}
DECL|method|addRequestBody
specifier|private
specifier|static
name|HttpRequestBase
name|addRequestBody
parameter_list|(
name|HttpRequestBase
name|httpRequest
parameter_list|,
name|HttpEntity
name|entity
parameter_list|)
block|{
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|httpRequest
operator|instanceof
name|HttpEntityEnclosingRequestBase
condition|)
block|{
operator|(
operator|(
name|HttpEntityEnclosingRequestBase
operator|)
name|httpRequest
operator|)
operator|.
name|setEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|httpRequest
operator|.
name|getMethod
argument_list|()
operator|+
literal|" with body is not supported"
argument_list|)
throw|;
block|}
block|}
return|return
name|httpRequest
return|;
block|}
DECL|method|buildUri
specifier|private
specifier|static
name|URI
name|buildUri
parameter_list|(
name|String
name|path
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|params
argument_list|,
literal|"params must not be null"
argument_list|)
expr_stmt|;
try|try
block|{
name|URIBuilder
name|uriBuilder
init|=
operator|new
name|URIBuilder
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|param
range|:
name|params
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|uriBuilder
operator|.
name|addParameter
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|uriBuilder
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|class|FailureTrackingResponseListener
specifier|private
specifier|static
class|class
name|FailureTrackingResponseListener
block|{
DECL|field|responseListener
specifier|private
specifier|final
name|ResponseListener
name|responseListener
decl_stmt|;
DECL|field|exception
specifier|private
specifier|volatile
name|Exception
name|exception
decl_stmt|;
DECL|method|FailureTrackingResponseListener
name|FailureTrackingResponseListener
parameter_list|(
name|ResponseListener
name|responseListener
parameter_list|)
block|{
name|this
operator|.
name|responseListener
operator|=
name|responseListener
expr_stmt|;
block|}
DECL|method|onSuccess
name|void
name|onSuccess
parameter_list|(
name|Response
name|response
parameter_list|)
block|{
name|responseListener
operator|.
name|onSuccess
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
DECL|method|onDefinitiveFailure
name|void
name|onDefinitiveFailure
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|trackFailure
argument_list|(
name|exception
argument_list|)
expr_stmt|;
name|responseListener
operator|.
name|onFailure
argument_list|(
name|this
operator|.
name|exception
argument_list|)
expr_stmt|;
block|}
DECL|method|trackFailure
name|void
name|trackFailure
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|addSuppressedException
argument_list|(
name|this
operator|.
name|exception
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SyncResponseListener
specifier|private
specifier|static
class|class
name|SyncResponseListener
implements|implements
name|ResponseListener
block|{
DECL|field|latch
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
DECL|field|response
specifier|volatile
name|Response
name|response
decl_stmt|;
DECL|field|exception
specifier|volatile
name|Exception
name|exception
decl_stmt|;
annotation|@
name|Override
DECL|method|onSuccess
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Response
name|response
parameter_list|)
block|{
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|exception
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
DECL|method|get
name|Response
name|get
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"thread waiting for the response was interrupted"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
assert|assert
name|exception
operator|==
literal|null
assert|;
return|return
name|response
return|;
block|}
assert|assert
name|exception
operator|!=
literal|null
assert|;
comment|//try and leave the exception untouched as much as possible but we don't want to just add throws Exception clause everywhere
if|if
condition|(
name|exception
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|exception
throw|;
block|}
if|if
condition|(
name|exception
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|exception
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"error while performing request"
argument_list|,
name|exception
argument_list|)
throw|;
block|}
block|}
comment|/**      * Listener that allows to be notified whenever a failure happens. Useful when sniffing is enabled, so that we can sniff on failure.      * The default implementation is a no-op.      */
DECL|class|FailureListener
specifier|public
specifier|static
class|class
name|FailureListener
block|{
comment|/**          * Notifies that the host provided as argument has just failed          */
DECL|method|onFailure
specifier|public
name|void
name|onFailure
parameter_list|(
name|HttpHost
name|host
parameter_list|)
block|{          }
block|}
block|}
end_class

end_unit

