begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|config
operator|.
name|RequestConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|CloseableHttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|HttpClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|nio
operator|.
name|client
operator|.
name|CloseableHttpAsyncClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|nio
operator|.
name|client
operator|.
name|HttpAsyncClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|conn
operator|.
name|SchemeIOSessionStrategy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_comment
comment|/**  * Helps creating a new {@link RestClient}. Allows to set the most common http client configuration options when internally  * creating the underlying {@link org.apache.http.nio.client.HttpAsyncClient}. Also allows to provide an externally created  * {@link org.apache.http.nio.client.HttpAsyncClient} in case additional customization is needed.  */
end_comment

begin_class
DECL|class|RestClientBuilder
specifier|public
specifier|final
class|class
name|RestClientBuilder
block|{
DECL|field|DEFAULT_CONNECT_TIMEOUT_MILLIS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_CONNECT_TIMEOUT_MILLIS
init|=
literal|1000
decl_stmt|;
DECL|field|DEFAULT_SOCKET_TIMEOUT_MILLIS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_SOCKET_TIMEOUT_MILLIS
init|=
literal|30000
decl_stmt|;
DECL|field|DEFAULT_MAX_RETRY_TIMEOUT_MILLIS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_RETRY_TIMEOUT_MILLIS
init|=
name|DEFAULT_SOCKET_TIMEOUT_MILLIS
decl_stmt|;
DECL|field|DEFAULT_CONNECTION_REQUEST_TIMEOUT_MILLIS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_CONNECTION_REQUEST_TIMEOUT_MILLIS
init|=
literal|500
decl_stmt|;
DECL|field|DEFAULT_MAX_CONN_PER_ROUTE
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_CONN_PER_ROUTE
init|=
literal|10
decl_stmt|;
DECL|field|DEFAULT_MAX_CONN_TOTAL
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_CONN_TOTAL
init|=
literal|30
decl_stmt|;
DECL|field|EMPTY_HEADERS
specifier|private
specifier|static
specifier|final
name|Header
index|[]
name|EMPTY_HEADERS
init|=
operator|new
name|Header
index|[
literal|0
index|]
decl_stmt|;
DECL|field|hosts
specifier|private
specifier|final
name|HttpHost
index|[]
name|hosts
decl_stmt|;
DECL|field|maxRetryTimeout
specifier|private
name|int
name|maxRetryTimeout
init|=
name|DEFAULT_MAX_RETRY_TIMEOUT_MILLIS
decl_stmt|;
DECL|field|defaultHeaders
specifier|private
name|Header
index|[]
name|defaultHeaders
init|=
name|EMPTY_HEADERS
decl_stmt|;
DECL|field|failureListener
specifier|private
name|RestClient
operator|.
name|FailureListener
name|failureListener
decl_stmt|;
DECL|field|httpClientConfigCallback
specifier|private
name|HttpClientConfigCallback
name|httpClientConfigCallback
decl_stmt|;
DECL|field|requestConfigCallback
specifier|private
name|RequestConfigCallback
name|requestConfigCallback
decl_stmt|;
DECL|field|pathPrefix
specifier|private
name|String
name|pathPrefix
decl_stmt|;
comment|/**      * Creates a new builder instance and sets the hosts that the client will send requests to.      *      * @throws NullPointerException if {@code hosts} or any host is {@code null}.      * @throws IllegalArgumentException if {@code hosts} is empty.      */
DECL|method|RestClientBuilder
name|RestClientBuilder
parameter_list|(
name|HttpHost
modifier|...
name|hosts
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|hosts
argument_list|,
literal|"hosts must not be null"
argument_list|)
expr_stmt|;
if|if
condition|(
name|hosts
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"no hosts provided"
argument_list|)
throw|;
block|}
for|for
control|(
name|HttpHost
name|host
range|:
name|hosts
control|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|host
argument_list|,
literal|"host cannot be null"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|hosts
operator|=
name|hosts
expr_stmt|;
block|}
comment|/**      * Sets the default request headers, which will be sent along with each request.      *<p>      * Request-time headers will always overwrite any default headers.      *      * @throws NullPointerException if {@code defaultHeaders} or any header is {@code null}.      */
DECL|method|setDefaultHeaders
specifier|public
name|RestClientBuilder
name|setDefaultHeaders
parameter_list|(
name|Header
index|[]
name|defaultHeaders
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|defaultHeaders
argument_list|,
literal|"defaultHeaders must not be null"
argument_list|)
expr_stmt|;
for|for
control|(
name|Header
name|defaultHeader
range|:
name|defaultHeaders
control|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|defaultHeader
argument_list|,
literal|"default header must not be null"
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|defaultHeaders
operator|=
name|defaultHeaders
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the {@link RestClient.FailureListener} to be notified for each request failure      *      * @throws NullPointerException if {@code failureListener} is {@code null}.      */
DECL|method|setFailureListener
specifier|public
name|RestClientBuilder
name|setFailureListener
parameter_list|(
name|RestClient
operator|.
name|FailureListener
name|failureListener
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|failureListener
argument_list|,
literal|"failureListener must not be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|failureListener
operator|=
name|failureListener
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the maximum timeout (in milliseconds) to honour in case of multiple retries of the same request.      * {@link #DEFAULT_MAX_RETRY_TIMEOUT_MILLIS} if not specified.      *      * @throws IllegalArgumentException if {@code maxRetryTimeoutMillis} is not greater than 0      */
DECL|method|setMaxRetryTimeoutMillis
specifier|public
name|RestClientBuilder
name|setMaxRetryTimeoutMillis
parameter_list|(
name|int
name|maxRetryTimeoutMillis
parameter_list|)
block|{
if|if
condition|(
name|maxRetryTimeoutMillis
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"maxRetryTimeoutMillis must be greater than 0"
argument_list|)
throw|;
block|}
name|this
operator|.
name|maxRetryTimeout
operator|=
name|maxRetryTimeoutMillis
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the {@link HttpClientConfigCallback} to be used to customize http client configuration      *      * @throws NullPointerException if {@code httpClientConfigCallback} is {@code null}.      */
DECL|method|setHttpClientConfigCallback
specifier|public
name|RestClientBuilder
name|setHttpClientConfigCallback
parameter_list|(
name|HttpClientConfigCallback
name|httpClientConfigCallback
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|httpClientConfigCallback
argument_list|,
literal|"httpClientConfigCallback must not be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|httpClientConfigCallback
operator|=
name|httpClientConfigCallback
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the {@link RequestConfigCallback} to be used to customize http client configuration      *      * @throws NullPointerException if {@code requestConfigCallback} is {@code null}.      */
DECL|method|setRequestConfigCallback
specifier|public
name|RestClientBuilder
name|setRequestConfigCallback
parameter_list|(
name|RequestConfigCallback
name|requestConfigCallback
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|requestConfigCallback
argument_list|,
literal|"requestConfigCallback must not be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|requestConfigCallback
operator|=
name|requestConfigCallback
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Sets the path's prefix for every request used by the http client.      *<p>      * For example, if this is set to "/my/path", then any client request will become<code>"/my/path/" + endpoint</code>.      *<p>      * In essence, every request's {@code endpoint} is prefixed by this {@code pathPrefix}. The path prefix is useful for when      * Elasticsearch is behind a proxy that provides a base path; it is not intended for other purposes and it should not be supplied in      * other scenarios.      *      * @throws NullPointerException if {@code pathPrefix} is {@code null}.      * @throws IllegalArgumentException if {@code pathPrefix} is empty, only '/', or ends with more than one '/'.      */
DECL|method|setPathPrefix
specifier|public
name|RestClientBuilder
name|setPathPrefix
parameter_list|(
name|String
name|pathPrefix
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|pathPrefix
argument_list|,
literal|"pathPrefix must not be null"
argument_list|)
expr_stmt|;
name|String
name|cleanPathPrefix
init|=
name|pathPrefix
decl_stmt|;
if|if
condition|(
name|cleanPathPrefix
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
operator|==
literal|false
condition|)
block|{
name|cleanPathPrefix
operator|=
literal|"/"
operator|+
name|cleanPathPrefix
expr_stmt|;
block|}
comment|// best effort to ensure that it looks like "/base/path" rather than "/base/path/"
if|if
condition|(
name|cleanPathPrefix
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|cleanPathPrefix
operator|=
name|cleanPathPrefix
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|cleanPathPrefix
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|cleanPathPrefix
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"pathPrefix is malformed. too many trailing slashes: ["
operator|+
name|pathPrefix
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|cleanPathPrefix
operator|.
name|isEmpty
argument_list|()
operator|||
literal|"/"
operator|.
name|equals
argument_list|(
name|cleanPathPrefix
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"pathPrefix must not be empty or '/': ["
operator|+
name|pathPrefix
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|this
operator|.
name|pathPrefix
operator|=
name|cleanPathPrefix
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Creates a new {@link RestClient} based on the provided configuration.      */
DECL|method|build
specifier|public
name|RestClient
name|build
parameter_list|()
block|{
if|if
condition|(
name|failureListener
operator|==
literal|null
condition|)
block|{
name|failureListener
operator|=
operator|new
name|RestClient
operator|.
name|FailureListener
argument_list|()
expr_stmt|;
block|}
name|CloseableHttpAsyncClient
name|httpClient
init|=
name|createHttpClient
argument_list|()
decl_stmt|;
name|RestClient
name|restClient
init|=
operator|new
name|RestClient
argument_list|(
name|httpClient
argument_list|,
name|maxRetryTimeout
argument_list|,
name|defaultHeaders
argument_list|,
name|hosts
argument_list|,
name|pathPrefix
argument_list|,
name|failureListener
argument_list|)
decl_stmt|;
name|httpClient
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|restClient
return|;
block|}
DECL|method|createHttpClient
specifier|private
name|CloseableHttpAsyncClient
name|createHttpClient
parameter_list|()
block|{
comment|//default timeouts are all infinite
name|RequestConfig
operator|.
name|Builder
name|requestConfigBuilder
init|=
name|RequestConfig
operator|.
name|custom
argument_list|()
operator|.
name|setConnectTimeout
argument_list|(
name|DEFAULT_CONNECT_TIMEOUT_MILLIS
argument_list|)
operator|.
name|setSocketTimeout
argument_list|(
name|DEFAULT_SOCKET_TIMEOUT_MILLIS
argument_list|)
operator|.
name|setConnectionRequestTimeout
argument_list|(
name|DEFAULT_CONNECTION_REQUEST_TIMEOUT_MILLIS
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestConfigCallback
operator|!=
literal|null
condition|)
block|{
name|requestConfigBuilder
operator|=
name|requestConfigCallback
operator|.
name|customizeRequestConfig
argument_list|(
name|requestConfigBuilder
argument_list|)
expr_stmt|;
block|}
name|HttpAsyncClientBuilder
name|httpClientBuilder
init|=
name|HttpAsyncClientBuilder
operator|.
name|create
argument_list|()
operator|.
name|setDefaultRequestConfig
argument_list|(
name|requestConfigBuilder
operator|.
name|build
argument_list|()
argument_list|)
comment|//default settings for connection pooling may be too constraining
operator|.
name|setMaxConnPerRoute
argument_list|(
name|DEFAULT_MAX_CONN_PER_ROUTE
argument_list|)
operator|.
name|setMaxConnTotal
argument_list|(
name|DEFAULT_MAX_CONN_TOTAL
argument_list|)
decl_stmt|;
if|if
condition|(
name|httpClientConfigCallback
operator|!=
literal|null
condition|)
block|{
name|httpClientBuilder
operator|=
name|httpClientConfigCallback
operator|.
name|customizeHttpClient
argument_list|(
name|httpClientBuilder
argument_list|)
expr_stmt|;
block|}
return|return
name|httpClientBuilder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Callback used the default {@link RequestConfig} being set to the {@link CloseableHttpClient}      * @see HttpClientBuilder#setDefaultRequestConfig      */
DECL|interface|RequestConfigCallback
specifier|public
interface|interface
name|RequestConfigCallback
block|{
comment|/**          * Allows to customize the {@link RequestConfig} that will be used with each request.          * It is common to customize the different timeout values through this method without losing any other useful default          * value that the {@link RestClientBuilder} internally sets.          */
DECL|method|customizeRequestConfig
name|RequestConfig
operator|.
name|Builder
name|customizeRequestConfig
parameter_list|(
name|RequestConfig
operator|.
name|Builder
name|requestConfigBuilder
parameter_list|)
function_decl|;
block|}
comment|/**      * Callback used to customize the {@link CloseableHttpClient} instance used by a {@link RestClient} instance.      * Allows to customize default {@link RequestConfig} being set to the client and any parameter that      * can be set through {@link HttpClientBuilder}      */
DECL|interface|HttpClientConfigCallback
specifier|public
interface|interface
name|HttpClientConfigCallback
block|{
comment|/**          * Allows to customize the {@link CloseableHttpAsyncClient} being created and used by the {@link RestClient}.          * Commonly used to customize the default {@link org.apache.http.client.CredentialsProvider} for authentication          * or the {@link SchemeIOSessionStrategy} for communication through ssl without losing any other useful default          * value that the {@link RestClientBuilder} internally sets, like connection pooling.          */
DECL|method|customizeHttpClient
name|HttpAsyncClientBuilder
name|customizeHttpClient
parameter_list|(
name|HttpAsyncClientBuilder
name|httpClientBuilder
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

