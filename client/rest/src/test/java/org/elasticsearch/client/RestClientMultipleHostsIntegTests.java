begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|HttpExchange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|HttpHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|mojo
operator|.
name|animal_sniffer
operator|.
name|IgnoreJRERequirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|RestClientTestUtil
operator|.
name|getAllStatusCodes
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|RestClientTestUtil
operator|.
name|randomErrorNoRetryStatusCode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|RestClientTestUtil
operator|.
name|randomOkStatusCode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Integration test to check interaction between {@link RestClient} and {@link org.apache.http.client.HttpClient}.  * Works against real http servers, multiple hosts. Also tests failover by randomly shutting down hosts.  */
end_comment

begin_comment
comment|//animal-sniffer doesn't like our usage of com.sun.net.httpserver.* classes
end_comment

begin_class
annotation|@
name|IgnoreJRERequirement
DECL|class|RestClientMultipleHostsIntegTests
specifier|public
class|class
name|RestClientMultipleHostsIntegTests
extends|extends
name|RestClientTestCase
block|{
DECL|field|httpServers
specifier|private
specifier|static
name|HttpServer
index|[]
name|httpServers
decl_stmt|;
DECL|field|restClient
specifier|private
specifier|static
name|RestClient
name|restClient
decl_stmt|;
DECL|field|pathPrefix
specifier|private
specifier|static
name|String
name|pathPrefix
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|startHttpServer
specifier|public
specifier|static
name|void
name|startHttpServer
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|pathPrefixWithoutLeadingSlash
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|pathPrefixWithoutLeadingSlash
operator|=
literal|"testPathPrefix/"
operator|+
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|pathPrefix
operator|=
literal|"/"
operator|+
name|pathPrefixWithoutLeadingSlash
expr_stmt|;
block|}
else|else
block|{
name|pathPrefix
operator|=
name|pathPrefixWithoutLeadingSlash
operator|=
literal|""
expr_stmt|;
block|}
name|int
name|numHttpServers
init|=
name|randomIntBetween
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|httpServers
operator|=
operator|new
name|HttpServer
index|[
name|numHttpServers
index|]
expr_stmt|;
name|HttpHost
index|[]
name|httpHosts
init|=
operator|new
name|HttpHost
index|[
name|numHttpServers
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numHttpServers
condition|;
name|i
operator|++
control|)
block|{
name|HttpServer
name|httpServer
init|=
name|createHttpServer
argument_list|()
decl_stmt|;
name|httpServers
index|[
name|i
index|]
operator|=
name|httpServer
expr_stmt|;
name|httpHosts
index|[
name|i
index|]
operator|=
operator|new
name|HttpHost
argument_list|(
name|httpServer
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostString
argument_list|()
argument_list|,
name|httpServer
operator|.
name|getAddress
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RestClientBuilder
name|restClientBuilder
init|=
name|RestClient
operator|.
name|builder
argument_list|(
name|httpHosts
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathPrefix
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|restClientBuilder
operator|.
name|setPathPrefix
argument_list|(
operator|(
name|randomBoolean
argument_list|()
condition|?
literal|"/"
else|:
literal|""
operator|)
operator|+
name|pathPrefixWithoutLeadingSlash
argument_list|)
expr_stmt|;
block|}
name|restClient
operator|=
name|restClientBuilder
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
DECL|method|createHttpServer
specifier|private
specifier|static
name|HttpServer
name|createHttpServer
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpServer
name|httpServer
init|=
name|HttpServer
operator|.
name|create
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|InetAddress
operator|.
name|getLoopbackAddress
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|httpServer
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//returns a different status code depending on the path
for|for
control|(
name|int
name|statusCode
range|:
name|getAllStatusCodes
argument_list|()
control|)
block|{
name|httpServer
operator|.
name|createContext
argument_list|(
name|pathPrefix
operator|+
literal|"/"
operator|+
name|statusCode
argument_list|,
operator|new
name|ResponseHandler
argument_list|(
name|statusCode
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|httpServer
return|;
block|}
comment|//animal-sniffer doesn't like our usage of com.sun.net.httpserver.* classes
annotation|@
name|IgnoreJRERequirement
DECL|class|ResponseHandler
specifier|private
specifier|static
class|class
name|ResponseHandler
implements|implements
name|HttpHandler
block|{
DECL|field|statusCode
specifier|private
specifier|final
name|int
name|statusCode
decl_stmt|;
DECL|method|ResponseHandler
name|ResponseHandler
parameter_list|(
name|int
name|statusCode
parameter_list|)
block|{
name|this
operator|.
name|statusCode
operator|=
name|statusCode
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle
specifier|public
name|void
name|handle
parameter_list|(
name|HttpExchange
name|httpExchange
parameter_list|)
throws|throws
name|IOException
block|{
name|httpExchange
operator|.
name|getRequestBody
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|httpExchange
operator|.
name|sendResponseHeaders
argument_list|(
name|statusCode
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|httpExchange
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
DECL|method|stopHttpServers
specifier|public
specifier|static
name|void
name|stopHttpServers
parameter_list|()
throws|throws
name|IOException
block|{
name|restClient
operator|.
name|close
argument_list|()
expr_stmt|;
name|restClient
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|HttpServer
name|httpServer
range|:
name|httpServers
control|)
block|{
name|httpServer
operator|.
name|stop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|httpServers
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|stopRandomHost
specifier|public
name|void
name|stopRandomHost
parameter_list|()
block|{
comment|//verify that shutting down some hosts doesn't matter as long as one working host is left behind
if|if
condition|(
name|httpServers
operator|.
name|length
operator|>
literal|1
operator|&&
name|randomBoolean
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|HttpServer
argument_list|>
name|updatedHttpServers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|httpServers
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|nodeIndex
init|=
name|randomInt
argument_list|(
name|httpServers
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|httpServers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|HttpServer
name|httpServer
init|=
name|httpServers
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|nodeIndex
condition|)
block|{
name|httpServer
operator|.
name|stop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updatedHttpServers
operator|.
name|add
argument_list|(
name|httpServer
argument_list|)
expr_stmt|;
block|}
block|}
name|httpServers
operator|=
name|updatedHttpServers
operator|.
name|toArray
argument_list|(
operator|new
name|HttpServer
index|[
name|updatedHttpServers
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSyncRequests
specifier|public
name|void
name|testSyncRequests
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|numRequests
init|=
name|randomIntBetween
argument_list|(
literal|5
argument_list|,
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRequests
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|method
init|=
name|RestClientTestUtil
operator|.
name|randomHttpMethod
argument_list|(
name|getRandom
argument_list|()
argument_list|)
decl_stmt|;
comment|//we don't test status codes that are subject to retries as they interfere with hosts being stopped
specifier|final
name|int
name|statusCode
init|=
name|randomBoolean
argument_list|()
condition|?
name|randomOkStatusCode
argument_list|(
name|getRandom
argument_list|()
argument_list|)
else|:
name|randomErrorNoRetryStatusCode
argument_list|(
name|getRandom
argument_list|()
argument_list|)
decl_stmt|;
name|Response
name|response
decl_stmt|;
try|try
block|{
name|response
operator|=
name|restClient
operator|.
name|performRequest
argument_list|(
name|method
argument_list|,
literal|"/"
operator|+
name|statusCode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResponseException
name|responseException
parameter_list|)
block|{
name|response
operator|=
name|responseException
operator|.
name|getResponse
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|method
argument_list|,
name|response
operator|.
name|getRequestLine
argument_list|()
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|statusCode
argument_list|,
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|pathPrefix
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|pathPrefix
else|:
literal|""
operator|)
operator|+
literal|"/"
operator|+
name|statusCode
argument_list|,
name|response
operator|.
name|getRequestLine
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAsyncRequests
specifier|public
name|void
name|testAsyncRequests
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numRequests
init|=
name|randomIntBetween
argument_list|(
literal|5
argument_list|,
literal|20
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numRequests
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TestResponse
argument_list|>
name|responses
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numRequests
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|method
init|=
name|RestClientTestUtil
operator|.
name|randomHttpMethod
argument_list|(
name|getRandom
argument_list|()
argument_list|)
decl_stmt|;
comment|//we don't test status codes that are subject to retries as they interfere with hosts being stopped
specifier|final
name|int
name|statusCode
init|=
name|randomBoolean
argument_list|()
condition|?
name|randomOkStatusCode
argument_list|(
name|getRandom
argument_list|()
argument_list|)
else|:
name|randomErrorNoRetryStatusCode
argument_list|(
name|getRandom
argument_list|()
argument_list|)
decl_stmt|;
name|restClient
operator|.
name|performRequestAsync
argument_list|(
name|method
argument_list|,
literal|"/"
operator|+
name|statusCode
argument_list|,
operator|new
name|ResponseListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Response
name|response
parameter_list|)
block|{
name|responses
operator|.
name|add
argument_list|(
operator|new
name|TestResponse
argument_list|(
name|method
argument_list|,
name|statusCode
argument_list|,
name|response
argument_list|)
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
name|responses
operator|.
name|add
argument_list|(
operator|new
name|TestResponse
argument_list|(
name|method
argument_list|,
name|statusCode
argument_list|,
name|exception
argument_list|)
argument_list|)
expr_stmt|;
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|latch
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numRequests
argument_list|,
name|responses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TestResponse
name|testResponse
range|:
name|responses
control|)
block|{
name|Response
name|response
init|=
name|testResponse
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|testResponse
operator|.
name|method
argument_list|,
name|response
operator|.
name|getRequestLine
argument_list|()
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testResponse
operator|.
name|statusCode
argument_list|,
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|pathPrefix
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|pathPrefix
else|:
literal|""
operator|)
operator|+
literal|"/"
operator|+
name|testResponse
operator|.
name|statusCode
argument_list|,
name|response
operator|.
name|getRequestLine
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TestResponse
specifier|private
specifier|static
class|class
name|TestResponse
block|{
DECL|field|method
specifier|private
specifier|final
name|String
name|method
decl_stmt|;
DECL|field|statusCode
specifier|private
specifier|final
name|int
name|statusCode
decl_stmt|;
DECL|field|response
specifier|private
specifier|final
name|Object
name|response
decl_stmt|;
DECL|method|TestResponse
name|TestResponse
parameter_list|(
name|String
name|method
parameter_list|,
name|int
name|statusCode
parameter_list|,
name|Object
name|response
parameter_list|)
block|{
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
name|this
operator|.
name|statusCode
operator|=
name|statusCode
expr_stmt|;
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
block|}
DECL|method|getResponse
name|Response
name|getResponse
parameter_list|()
block|{
if|if
condition|(
name|response
operator|instanceof
name|Response
condition|)
block|{
return|return
operator|(
name|Response
operator|)
name|response
return|;
block|}
if|if
condition|(
name|response
operator|instanceof
name|ResponseException
condition|)
block|{
return|return
operator|(
operator|(
name|ResponseException
operator|)
name|response
operator|)
operator|.
name|getResponse
argument_list|()
return|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unexpected response "
operator|+
name|response
operator|.
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

