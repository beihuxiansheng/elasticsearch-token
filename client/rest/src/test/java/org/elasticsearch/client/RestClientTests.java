begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|nio
operator|.
name|client
operator|.
name|CloseableHttpAsyncClient
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_class
DECL|class|RestClientTests
specifier|public
class|class
name|RestClientTests
extends|extends
name|RestClientTestCase
block|{
DECL|method|testPerformAsyncWithUnsupportedMethod
specifier|public
name|void
name|testPerformAsyncWithUnsupportedMethod
parameter_list|()
throws|throws
name|Exception
block|{
name|RestClient
operator|.
name|SyncResponseListener
name|listener
init|=
operator|new
name|RestClient
operator|.
name|SyncResponseListener
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
try|try
init|(
name|RestClient
name|restClient
init|=
name|createRestClient
argument_list|()
init|)
block|{
name|restClient
operator|.
name|performRequestAsync
argument_list|(
literal|"unsupported"
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"should have failed because of unsupported method"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|exception
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"http method not supported: unsupported"
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPerformAsyncWithNullParams
specifier|public
name|void
name|testPerformAsyncWithNullParams
parameter_list|()
throws|throws
name|Exception
block|{
name|RestClient
operator|.
name|SyncResponseListener
name|listener
init|=
operator|new
name|RestClient
operator|.
name|SyncResponseListener
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
try|try
init|(
name|RestClient
name|restClient
init|=
name|createRestClient
argument_list|()
init|)
block|{
name|restClient
operator|.
name|performRequestAsync
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|null
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"should have failed because of null parameters"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|exception
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"params must not be null"
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPerformAsyncWithNullHeaders
specifier|public
name|void
name|testPerformAsyncWithNullHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|RestClient
operator|.
name|SyncResponseListener
name|listener
init|=
operator|new
name|RestClient
operator|.
name|SyncResponseListener
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
try|try
init|(
name|RestClient
name|restClient
init|=
name|createRestClient
argument_list|()
init|)
block|{
name|restClient
operator|.
name|performRequestAsync
argument_list|(
literal|"GET"
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|listener
argument_list|,
operator|(
name|Header
operator|)
literal|null
argument_list|)
expr_stmt|;
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"should have failed because of null headers"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|exception
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"request header must not be null"
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPerformAsyncWithWrongEndpoint
specifier|public
name|void
name|testPerformAsyncWithWrongEndpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|RestClient
operator|.
name|SyncResponseListener
name|listener
init|=
operator|new
name|RestClient
operator|.
name|SyncResponseListener
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
try|try
init|(
name|RestClient
name|restClient
init|=
name|createRestClient
argument_list|()
init|)
block|{
name|restClient
operator|.
name|performRequestAsync
argument_list|(
literal|"GET"
argument_list|,
literal|"::http:///"
argument_list|,
name|listener
argument_list|)
expr_stmt|;
name|listener
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"should have failed because of wrong endpoint"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|exception
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Expected scheme name at index 0: ::http:///"
argument_list|,
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createRestClient
specifier|private
specifier|static
name|RestClient
name|createRestClient
parameter_list|()
block|{
name|HttpHost
index|[]
name|hosts
init|=
operator|new
name|HttpHost
index|[]
block|{
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9200
argument_list|)
block|}
decl_stmt|;
return|return
operator|new
name|RestClient
argument_list|(
name|mock
argument_list|(
name|CloseableHttpAsyncClient
operator|.
name|class
argument_list|)
argument_list|,
name|randomLongBetween
argument_list|(
literal|1_000
argument_list|,
literal|30_000
argument_list|)
argument_list|,
operator|new
name|Header
index|[]
block|{}
argument_list|,
name|hosts
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
end_class

end_unit

