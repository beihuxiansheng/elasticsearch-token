begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|ProtocolVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|RequestLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|StatusLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicHttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicRequestLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicStatusLine
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
DECL|class|SyncResponseListenerTests
specifier|public
class|class
name|SyncResponseListenerTests
extends|extends
name|RestClientTestCase
block|{
DECL|method|testOnSuccessNullResponse
specifier|public
name|void
name|testOnSuccessNullResponse
parameter_list|()
block|{
name|RestClient
operator|.
name|SyncResponseListener
name|syncResponseListener
init|=
operator|new
name|RestClient
operator|.
name|SyncResponseListener
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
try|try
block|{
name|syncResponseListener
operator|.
name|onSuccess
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"onSuccess should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"response must not be null"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testOnFailureNullException
specifier|public
name|void
name|testOnFailureNullException
parameter_list|()
block|{
name|RestClient
operator|.
name|SyncResponseListener
name|syncResponseListener
init|=
operator|new
name|RestClient
operator|.
name|SyncResponseListener
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
try|try
block|{
name|syncResponseListener
operator|.
name|onFailure
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"onFailure should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"exception must not be null"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testOnSuccess
specifier|public
name|void
name|testOnSuccess
parameter_list|()
throws|throws
name|Exception
block|{
name|RestClient
operator|.
name|SyncResponseListener
name|syncResponseListener
init|=
operator|new
name|RestClient
operator|.
name|SyncResponseListener
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|Response
name|mockResponse
init|=
name|mockResponse
argument_list|()
decl_stmt|;
name|syncResponseListener
operator|.
name|onSuccess
argument_list|(
name|mockResponse
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|syncResponseListener
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|response
argument_list|,
name|mockResponse
argument_list|)
expr_stmt|;
try|try
block|{
name|syncResponseListener
operator|.
name|onSuccess
argument_list|(
name|mockResponse
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"get should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"response is already set"
argument_list|)
expr_stmt|;
block|}
name|response
operator|=
name|syncResponseListener
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertSame
argument_list|(
name|response
argument_list|,
name|mockResponse
argument_list|)
expr_stmt|;
name|RuntimeException
name|runtimeException
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|syncResponseListener
operator|.
name|onFailure
argument_list|(
name|runtimeException
argument_list|)
expr_stmt|;
try|try
block|{
name|syncResponseListener
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"get should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"response and exception are unexpectedly set at the same time"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|e
operator|.
name|getSuppressed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|e
operator|.
name|getSuppressed
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|runtimeException
argument_list|,
name|e
operator|.
name|getSuppressed
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testOnFailure
specifier|public
name|void
name|testOnFailure
parameter_list|()
throws|throws
name|Exception
block|{
name|RestClient
operator|.
name|SyncResponseListener
name|syncResponseListener
init|=
operator|new
name|RestClient
operator|.
name|SyncResponseListener
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|RuntimeException
name|firstException
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"first-test"
argument_list|)
decl_stmt|;
name|syncResponseListener
operator|.
name|onFailure
argument_list|(
name|firstException
argument_list|)
expr_stmt|;
try|try
block|{
name|syncResponseListener
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"get should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertSame
argument_list|(
name|firstException
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|RuntimeException
name|secondException
init|=
operator|new
name|RuntimeException
argument_list|(
literal|"second-test"
argument_list|)
decl_stmt|;
try|try
block|{
name|syncResponseListener
operator|.
name|onFailure
argument_list|(
name|secondException
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"exception is already set"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|syncResponseListener
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"get should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertSame
argument_list|(
name|firstException
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Response
name|response
init|=
name|mockResponse
argument_list|()
decl_stmt|;
name|syncResponseListener
operator|.
name|onSuccess
argument_list|(
name|response
argument_list|)
expr_stmt|;
try|try
block|{
name|syncResponseListener
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"get should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"response and exception are unexpectedly set at the same time"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|e
operator|.
name|getSuppressed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|e
operator|.
name|getSuppressed
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|firstException
argument_list|,
name|e
operator|.
name|getSuppressed
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRuntimeExceptionIsNotWrapped
specifier|public
name|void
name|testRuntimeExceptionIsNotWrapped
parameter_list|()
throws|throws
name|Exception
block|{
name|RestClient
operator|.
name|SyncResponseListener
name|syncResponseListener
init|=
operator|new
name|RestClient
operator|.
name|SyncResponseListener
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|RuntimeException
name|runtimeException
init|=
operator|new
name|RuntimeException
argument_list|()
decl_stmt|;
name|syncResponseListener
operator|.
name|onFailure
argument_list|(
name|runtimeException
argument_list|)
expr_stmt|;
try|try
block|{
name|syncResponseListener
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"get should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertSame
argument_list|(
name|runtimeException
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testIOExceptionIsNotWrapped
specifier|public
name|void
name|testIOExceptionIsNotWrapped
parameter_list|()
throws|throws
name|Exception
block|{
name|RestClient
operator|.
name|SyncResponseListener
name|syncResponseListener
init|=
operator|new
name|RestClient
operator|.
name|SyncResponseListener
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
name|IOException
name|ioException
init|=
operator|new
name|IOException
argument_list|()
decl_stmt|;
name|syncResponseListener
operator|.
name|onFailure
argument_list|(
name|ioException
argument_list|)
expr_stmt|;
try|try
block|{
name|syncResponseListener
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"get should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertSame
argument_list|(
name|ioException
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testExceptionIsWrapped
specifier|public
name|void
name|testExceptionIsWrapped
parameter_list|()
throws|throws
name|Exception
block|{
name|RestClient
operator|.
name|SyncResponseListener
name|syncResponseListener
init|=
operator|new
name|RestClient
operator|.
name|SyncResponseListener
argument_list|(
literal|10000
argument_list|)
decl_stmt|;
comment|//we just need any checked exception
name|URISyntaxException
name|exception
init|=
operator|new
name|URISyntaxException
argument_list|(
literal|"test"
argument_list|,
literal|"test"
argument_list|)
decl_stmt|;
name|syncResponseListener
operator|.
name|onFailure
argument_list|(
name|exception
argument_list|)
expr_stmt|;
try|try
block|{
name|syncResponseListener
operator|.
name|get
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"get should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"error while performing request"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|exception
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|mockResponse
specifier|private
specifier|static
name|Response
name|mockResponse
parameter_list|()
block|{
name|ProtocolVersion
name|protocolVersion
init|=
operator|new
name|ProtocolVersion
argument_list|(
literal|"HTTP"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RequestLine
name|requestLine
init|=
operator|new
name|BasicRequestLine
argument_list|(
literal|"GET"
argument_list|,
literal|"/"
argument_list|,
name|protocolVersion
argument_list|)
decl_stmt|;
name|StatusLine
name|statusLine
init|=
operator|new
name|BasicStatusLine
argument_list|(
name|protocolVersion
argument_list|,
literal|200
argument_list|,
literal|"OK"
argument_list|)
decl_stmt|;
name|HttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|statusLine
argument_list|)
decl_stmt|;
return|return
operator|new
name|Response
argument_list|(
name|requestLine
argument_list|,
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9200
argument_list|)
argument_list|,
name|httpResponse
argument_list|)
return|;
block|}
block|}
end_class

end_unit

