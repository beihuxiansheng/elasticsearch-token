begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|ContentTooLongException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|ProtocolVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|StatusLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|BasicHttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|StringEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicHttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicStatusLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|ContentDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|IOControl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|HeapBufferedAsyncResponseConsumer
operator|.
name|DEFAULT_BUFFER_LIMIT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_class
DECL|class|HeapBufferedAsyncResponseConsumerTests
specifier|public
class|class
name|HeapBufferedAsyncResponseConsumerTests
extends|extends
name|RestClientTestCase
block|{
comment|//maximum buffer that this test ends up allocating is 50MB
DECL|field|MAX_TEST_BUFFER_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|MAX_TEST_BUFFER_SIZE
init|=
literal|50
operator|*
literal|1024
operator|*
literal|1024
decl_stmt|;
DECL|method|testResponseProcessing
specifier|public
name|void
name|testResponseProcessing
parameter_list|()
throws|throws
name|Exception
block|{
name|ContentDecoder
name|contentDecoder
init|=
name|mock
argument_list|(
name|ContentDecoder
operator|.
name|class
argument_list|)
decl_stmt|;
name|IOControl
name|ioControl
init|=
name|mock
argument_list|(
name|IOControl
operator|.
name|class
argument_list|)
decl_stmt|;
name|HttpContext
name|httpContext
init|=
name|mock
argument_list|(
name|HttpContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|HeapBufferedAsyncResponseConsumer
name|consumer
init|=
name|spy
argument_list|(
operator|new
name|HeapBufferedAsyncResponseConsumer
argument_list|()
argument_list|)
decl_stmt|;
name|ProtocolVersion
name|protocolVersion
init|=
operator|new
name|ProtocolVersion
argument_list|(
literal|"HTTP"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|StatusLine
name|statusLine
init|=
operator|new
name|BasicStatusLine
argument_list|(
name|protocolVersion
argument_list|,
literal|200
argument_list|,
literal|"OK"
argument_list|)
decl_stmt|;
name|HttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|statusLine
argument_list|)
decl_stmt|;
name|httpResponse
operator|.
name|setEntity
argument_list|(
operator|new
name|StringEntity
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
comment|//everything goes well
name|consumer
operator|.
name|responseReceived
argument_list|(
name|httpResponse
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|consumeContent
argument_list|(
name|contentDecoder
argument_list|,
name|ioControl
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|responseCompleted
argument_list|(
name|httpContext
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|consumer
argument_list|)
operator|.
name|releaseResources
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|consumer
argument_list|)
operator|.
name|buildResult
argument_list|(
name|httpContext
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|consumer
operator|.
name|isDone
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|httpResponse
argument_list|,
name|consumer
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|responseCompleted
argument_list|(
name|httpContext
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|consumer
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|releaseResources
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|consumer
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|buildResult
argument_list|(
name|httpContext
argument_list|)
expr_stmt|;
block|}
DECL|method|testDefaultBufferLimit
specifier|public
name|void
name|testDefaultBufferLimit
parameter_list|()
throws|throws
name|Exception
block|{
name|HeapBufferedAsyncResponseConsumer
name|consumer
init|=
operator|new
name|HeapBufferedAsyncResponseConsumer
argument_list|()
decl_stmt|;
name|bufferLimitTest
argument_list|(
name|consumer
argument_list|,
name|DEFAULT_BUFFER_LIMIT
argument_list|)
expr_stmt|;
block|}
DECL|method|testConfiguredBufferLimit
specifier|public
name|void
name|testConfiguredBufferLimit
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
operator|new
name|HeapBufferedAsyncResponseConsumer
argument_list|(
name|randomIntBetween
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"bufferLimit must be greater than 0"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|HeapBufferedAsyncResponseConsumer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"bufferLimit must be greater than 0"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|bufferLimit
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|MAX_TEST_BUFFER_SIZE
operator|-
literal|100
argument_list|)
decl_stmt|;
name|HeapBufferedAsyncResponseConsumer
name|consumer
init|=
operator|new
name|HeapBufferedAsyncResponseConsumer
argument_list|(
name|bufferLimit
argument_list|)
decl_stmt|;
name|bufferLimitTest
argument_list|(
name|consumer
argument_list|,
name|bufferLimit
argument_list|)
expr_stmt|;
block|}
DECL|method|bufferLimitTest
specifier|private
specifier|static
name|void
name|bufferLimitTest
parameter_list|(
name|HeapBufferedAsyncResponseConsumer
name|consumer
parameter_list|,
name|int
name|bufferLimit
parameter_list|)
throws|throws
name|Exception
block|{
name|ProtocolVersion
name|protocolVersion
init|=
operator|new
name|ProtocolVersion
argument_list|(
literal|"HTTP"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|StatusLine
name|statusLine
init|=
operator|new
name|BasicStatusLine
argument_list|(
name|protocolVersion
argument_list|,
literal|200
argument_list|,
literal|"OK"
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|onResponseReceived
argument_list|(
operator|new
name|BasicHttpResponse
argument_list|(
name|statusLine
argument_list|)
argument_list|)
expr_stmt|;
name|BasicHttpEntity
name|entity
init|=
operator|new
name|BasicHttpEntity
argument_list|()
decl_stmt|;
name|entity
operator|.
name|setContentLength
argument_list|(
name|randomInt
argument_list|(
name|bufferLimit
argument_list|)
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|onEntityEnclosed
argument_list|(
name|entity
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
name|entity
operator|.
name|setContentLength
argument_list|(
name|randomIntBetween
argument_list|(
name|bufferLimit
operator|+
literal|1
argument_list|,
name|MAX_TEST_BUFFER_SIZE
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|consumer
operator|.
name|onEntityEnclosed
argument_list|(
name|entity
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ContentTooLongException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"entity content is too long ["
operator|+
name|entity
operator|.
name|getContentLength
argument_list|()
operator|+
literal|"] for the configured buffer limit ["
operator|+
name|bufferLimit
operator|+
literal|"]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

