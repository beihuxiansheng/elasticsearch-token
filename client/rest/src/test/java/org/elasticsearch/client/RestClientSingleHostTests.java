begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntityEnclosingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|ProtocolVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|StatusLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpHead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpTrace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpUriRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|protocol
operator|.
name|HttpClientContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|utils
operator|.
name|URIBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|concurrent
operator|.
name|FutureCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|conn
operator|.
name|ConnectTimeoutException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|StringEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|auth
operator|.
name|BasicScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|nio
operator|.
name|client
operator|.
name|CloseableHttpAsyncClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicHttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicStatusLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|protocol
operator|.
name|HttpAsyncRequestProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|nio
operator|.
name|protocol
operator|.
name|HttpAsyncResponseConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|ArgumentCaptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketTimeoutException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|RestClientTestUtil
operator|.
name|getAllErrorStatusCodes
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|RestClientTestUtil
operator|.
name|getHttpMethods
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|RestClientTestUtil
operator|.
name|getOkStatusCodes
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|RestClientTestUtil
operator|.
name|randomHttpMethod
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|RestClientTestUtil
operator|.
name|randomStatusCode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Matchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Tests for basic functionality of {@link RestClient} against one single host: tests http requests being sent, headers,  * body, different status codes and corresponding responses/exceptions.  * Relies on a mock http client to intercept requests and return desired responses based on request path.  */
end_comment

begin_class
DECL|class|RestClientSingleHostTests
specifier|public
class|class
name|RestClientSingleHostTests
extends|extends
name|RestClientTestCase
block|{
DECL|field|restClient
specifier|private
name|RestClient
name|restClient
decl_stmt|;
DECL|field|defaultHeaders
specifier|private
name|Header
index|[]
name|defaultHeaders
decl_stmt|;
DECL|field|httpHost
specifier|private
name|HttpHost
name|httpHost
decl_stmt|;
DECL|field|httpClient
specifier|private
name|CloseableHttpAsyncClient
name|httpClient
decl_stmt|;
DECL|field|failureListener
specifier|private
name|HostsTrackingFailureListener
name|failureListener
decl_stmt|;
annotation|@
name|Before
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createRestClient
specifier|public
name|void
name|createRestClient
parameter_list|()
throws|throws
name|IOException
block|{
name|httpClient
operator|=
name|mock
argument_list|(
name|CloseableHttpAsyncClient
operator|.
name|class
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|httpClient
operator|.
expr|<
name|HttpResponse
operator|>
name|execute
argument_list|(
name|any
argument_list|(
name|HttpAsyncRequestProducer
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|HttpAsyncResponseConsumer
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|HttpClientContext
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|FutureCallback
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Future
argument_list|<
name|HttpResponse
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Future
argument_list|<
name|HttpResponse
argument_list|>
name|answer
parameter_list|(
name|InvocationOnMock
name|invocationOnMock
parameter_list|)
throws|throws
name|Throwable
block|{
name|HttpAsyncRequestProducer
name|requestProducer
init|=
operator|(
name|HttpAsyncRequestProducer
operator|)
name|invocationOnMock
operator|.
name|getArguments
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|HttpClientContext
name|context
init|=
operator|(
name|HttpClientContext
operator|)
name|invocationOnMock
operator|.
name|getArguments
argument_list|()
index|[
literal|2
index|]
decl_stmt|;
name|assertThat
argument_list|(
name|context
operator|.
name|getAuthCache
argument_list|()
operator|.
name|get
argument_list|(
name|httpHost
argument_list|)
argument_list|,
name|instanceOf
argument_list|(
name|BasicScheme
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|FutureCallback
argument_list|<
name|HttpResponse
argument_list|>
name|futureCallback
init|=
operator|(
name|FutureCallback
argument_list|<
name|HttpResponse
argument_list|>
operator|)
name|invocationOnMock
operator|.
name|getArguments
argument_list|()
index|[
literal|3
index|]
decl_stmt|;
name|HttpUriRequest
name|request
init|=
operator|(
name|HttpUriRequest
operator|)
name|requestProducer
operator|.
name|generateRequest
argument_list|()
decl_stmt|;
comment|//return the desired status code or exception depending on the path
if|if
condition|(
name|request
operator|.
name|getURI
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/soe"
argument_list|)
condition|)
block|{
name|futureCallback
operator|.
name|failed
argument_list|(
operator|new
name|SocketTimeoutException
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|request
operator|.
name|getURI
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|equals
argument_list|(
literal|"/coe"
argument_list|)
condition|)
block|{
name|futureCallback
operator|.
name|failed
argument_list|(
operator|new
name|ConnectTimeoutException
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|statusCode
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|request
operator|.
name|getURI
argument_list|()
operator|.
name|getPath
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|StatusLine
name|statusLine
init|=
operator|new
name|BasicStatusLine
argument_list|(
operator|new
name|ProtocolVersion
argument_list|(
literal|"http"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|statusCode
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|HttpResponse
name|httpResponse
init|=
operator|new
name|BasicHttpResponse
argument_list|(
name|statusLine
argument_list|)
decl_stmt|;
comment|//return the same body that was sent
if|if
condition|(
name|request
operator|instanceof
name|HttpEntityEnclosingRequest
condition|)
block|{
name|HttpEntity
name|entity
init|=
operator|(
operator|(
name|HttpEntityEnclosingRequest
operator|)
name|request
operator|)
operator|.
name|getEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|entity
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
literal|"the entity is not repeatable, cannot set it to the response directly"
argument_list|,
name|entity
operator|.
name|isRepeatable
argument_list|()
argument_list|)
expr_stmt|;
name|httpResponse
operator|.
name|setEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
block|}
comment|//return the same headers that were sent
name|httpResponse
operator|.
name|setHeaders
argument_list|(
name|request
operator|.
name|getAllHeaders
argument_list|()
argument_list|)
expr_stmt|;
name|futureCallback
operator|.
name|completed
argument_list|(
name|httpResponse
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|defaultHeaders
operator|=
name|RestClientTestUtil
operator|.
name|randomHeaders
argument_list|(
name|getRandom
argument_list|()
argument_list|,
literal|"Header-default"
argument_list|)
expr_stmt|;
name|httpHost
operator|=
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9200
argument_list|)
expr_stmt|;
name|failureListener
operator|=
operator|new
name|HostsTrackingFailureListener
argument_list|()
expr_stmt|;
name|restClient
operator|=
operator|new
name|RestClient
argument_list|(
name|httpClient
argument_list|,
literal|10000
argument_list|,
name|defaultHeaders
argument_list|,
operator|new
name|HttpHost
index|[]
block|{
name|httpHost
block|}
argument_list|,
literal|null
argument_list|,
name|failureListener
argument_list|)
expr_stmt|;
block|}
DECL|method|testNullPath
specifier|public
name|void
name|testNullPath
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|method
range|:
name|getHttpMethods
argument_list|()
control|)
block|{
try|try
block|{
name|restClient
operator|.
name|performRequest
argument_list|(
name|method
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"path set to null should fail!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"path must not be null"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Verifies the content of the {@link HttpRequest} that's internally created and passed through to the http client      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testInternalHttpRequest
specifier|public
name|void
name|testInternalHttpRequest
parameter_list|()
throws|throws
name|Exception
block|{
name|ArgumentCaptor
argument_list|<
name|HttpAsyncRequestProducer
argument_list|>
name|requestArgumentCaptor
init|=
name|ArgumentCaptor
operator|.
name|forClass
argument_list|(
name|HttpAsyncRequestProducer
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|times
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|httpMethod
range|:
name|getHttpMethods
argument_list|()
control|)
block|{
name|HttpUriRequest
name|expectedRequest
init|=
name|performRandomRequest
argument_list|(
name|httpMethod
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|httpClient
argument_list|,
name|times
argument_list|(
operator|++
name|times
argument_list|)
argument_list|)
operator|.
operator|<
name|HttpResponse
operator|>
name|execute
argument_list|(
name|requestArgumentCaptor
operator|.
name|capture
argument_list|()
argument_list|,
name|any
argument_list|(
name|HttpAsyncResponseConsumer
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|HttpClientContext
operator|.
name|class
argument_list|)
argument_list|,
name|any
argument_list|(
name|FutureCallback
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|HttpUriRequest
name|actualRequest
init|=
operator|(
name|HttpUriRequest
operator|)
name|requestArgumentCaptor
operator|.
name|getValue
argument_list|()
operator|.
name|generateRequest
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedRequest
operator|.
name|getURI
argument_list|()
argument_list|,
name|actualRequest
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedRequest
operator|.
name|getClass
argument_list|()
argument_list|,
name|actualRequest
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expectedRequest
operator|.
name|getAllHeaders
argument_list|()
argument_list|,
name|actualRequest
operator|.
name|getAllHeaders
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedRequest
operator|instanceof
name|HttpEntityEnclosingRequest
condition|)
block|{
name|HttpEntity
name|expectedEntity
init|=
operator|(
operator|(
name|HttpEntityEnclosingRequest
operator|)
name|expectedRequest
operator|)
operator|.
name|getEntity
argument_list|()
decl_stmt|;
if|if
condition|(
name|expectedEntity
operator|!=
literal|null
condition|)
block|{
name|HttpEntity
name|actualEntity
init|=
operator|(
operator|(
name|HttpEntityEnclosingRequest
operator|)
name|actualRequest
operator|)
operator|.
name|getEntity
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|EntityUtils
operator|.
name|toString
argument_list|(
name|expectedEntity
argument_list|)
argument_list|,
name|EntityUtils
operator|.
name|toString
argument_list|(
name|actualEntity
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testSetHosts
specifier|public
name|void
name|testSetHosts
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|restClient
operator|.
name|setHosts
argument_list|(
operator|(
name|HttpHost
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"setHosts should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"hosts must not be null nor empty"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|restClient
operator|.
name|setHosts
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"setHosts should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"hosts must not be null nor empty"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|restClient
operator|.
name|setHosts
argument_list|(
operator|(
name|HttpHost
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"setHosts should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"host cannot be null"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|restClient
operator|.
name|setHosts
argument_list|(
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9200
argument_list|)
argument_list|,
literal|null
argument_list|,
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
literal|9201
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"setHosts should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"host cannot be null"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * End to end test for ok status codes      */
DECL|method|testOkStatusCodes
specifier|public
name|void
name|testOkStatusCodes
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|method
range|:
name|getHttpMethods
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|okStatusCode
range|:
name|getOkStatusCodes
argument_list|()
control|)
block|{
name|Response
name|response
init|=
name|performRequest
argument_list|(
name|method
argument_list|,
literal|"/"
operator|+
name|okStatusCode
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|okStatusCode
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|failureListener
operator|.
name|assertNotCalled
argument_list|()
expr_stmt|;
block|}
comment|/**      * End to end test for error status codes: they should cause an exception to be thrown, apart from 404 with HEAD requests      */
DECL|method|testErrorStatusCodes
specifier|public
name|void
name|testErrorStatusCodes
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|method
range|:
name|getHttpMethods
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|expectedIgnores
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|ignoreParam
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|HttpHead
operator|.
name|METHOD_NAME
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|expectedIgnores
operator|.
name|add
argument_list|(
literal|404
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|int
name|numIgnores
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIgnores
condition|;
name|i
operator|++
control|)
block|{
name|Integer
name|code
init|=
name|randomFrom
argument_list|(
name|getAllErrorStatusCodes
argument_list|()
argument_list|)
decl_stmt|;
name|expectedIgnores
operator|.
name|add
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|ignoreParam
operator|+=
name|code
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|numIgnores
operator|-
literal|1
condition|)
block|{
name|ignoreParam
operator|+=
literal|","
expr_stmt|;
block|}
block|}
block|}
comment|//error status codes should cause an exception to be thrown
for|for
control|(
name|int
name|errorStatusCode
range|:
name|getAllErrorStatusCodes
argument_list|()
control|)
block|{
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
decl_stmt|;
if|if
condition|(
name|ignoreParam
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|params
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|params
operator|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"ignore"
argument_list|,
name|ignoreParam
argument_list|)
expr_stmt|;
block|}
name|Response
name|response
init|=
name|performRequest
argument_list|(
name|method
argument_list|,
literal|"/"
operator|+
name|errorStatusCode
argument_list|,
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedIgnores
operator|.
name|contains
argument_list|(
name|errorStatusCode
argument_list|)
condition|)
block|{
comment|//no exception gets thrown although we got an error status code, as it was configured to be ignored
name|assertEquals
argument_list|(
name|errorStatusCode
argument_list|,
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"request should have failed"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ResponseException
name|e
parameter_list|)
block|{
if|if
condition|(
name|expectedIgnores
operator|.
name|contains
argument_list|(
name|errorStatusCode
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
name|assertEquals
argument_list|(
name|errorStatusCode
argument_list|,
name|e
operator|.
name|getResponse
argument_list|()
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|errorStatusCode
operator|<=
literal|500
operator|||
name|expectedIgnores
operator|.
name|contains
argument_list|(
name|errorStatusCode
argument_list|)
condition|)
block|{
name|failureListener
operator|.
name|assertNotCalled
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|failureListener
operator|.
name|assertCalled
argument_list|(
name|httpHost
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testIOExceptions
specifier|public
name|void
name|testIOExceptions
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|method
range|:
name|getHttpMethods
argument_list|()
control|)
block|{
comment|//IOExceptions should be let bubble up
try|try
block|{
name|performRequest
argument_list|(
name|method
argument_list|,
literal|"/coe"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"request should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|instanceOf
argument_list|(
name|ConnectTimeoutException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|failureListener
operator|.
name|assertCalled
argument_list|(
name|httpHost
argument_list|)
expr_stmt|;
try|try
block|{
name|performRequest
argument_list|(
name|method
argument_list|,
literal|"/soe"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"request should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
argument_list|,
name|instanceOf
argument_list|(
name|SocketTimeoutException
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|failureListener
operator|.
name|assertCalled
argument_list|(
name|httpHost
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * End to end test for request and response body. Exercises the mock http client ability to send back      * whatever body it has received.      */
DECL|method|testBody
specifier|public
name|void
name|testBody
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|body
init|=
literal|"{ \"field\": \"value\" }"
decl_stmt|;
name|StringEntity
name|entity
init|=
operator|new
name|StringEntity
argument_list|(
name|body
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|method
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"DELETE"
argument_list|,
literal|"GET"
argument_list|,
literal|"PATCH"
argument_list|,
literal|"POST"
argument_list|,
literal|"PUT"
argument_list|)
control|)
block|{
for|for
control|(
name|int
name|okStatusCode
range|:
name|getOkStatusCodes
argument_list|()
control|)
block|{
name|Response
name|response
init|=
name|restClient
operator|.
name|performRequest
argument_list|(
name|method
argument_list|,
literal|"/"
operator|+
name|okStatusCode
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|entity
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|okStatusCode
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|EntityUtils
operator|.
name|toString
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|body
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|errorStatusCode
range|:
name|getAllErrorStatusCodes
argument_list|()
control|)
block|{
try|try
block|{
name|restClient
operator|.
name|performRequest
argument_list|(
name|method
argument_list|,
literal|"/"
operator|+
name|errorStatusCode
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|entity
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"request should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResponseException
name|e
parameter_list|)
block|{
name|Response
name|response
init|=
name|e
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|errorStatusCode
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|EntityUtils
operator|.
name|toString
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|body
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|String
name|method
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"HEAD"
argument_list|,
literal|"OPTIONS"
argument_list|,
literal|"TRACE"
argument_list|)
control|)
block|{
try|try
block|{
name|restClient
operator|.
name|performRequest
argument_list|(
name|method
argument_list|,
literal|"/"
operator|+
name|randomStatusCode
argument_list|(
name|getRandom
argument_list|()
argument_list|)
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|entity
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"request should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|method
operator|+
literal|" with body is not supported"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testNullHeaders
specifier|public
name|void
name|testNullHeaders
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|method
init|=
name|randomHttpMethod
argument_list|(
name|getRandom
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|statusCode
init|=
name|randomStatusCode
argument_list|(
name|getRandom
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|performRequest
argument_list|(
name|method
argument_list|,
literal|"/"
operator|+
name|statusCode
argument_list|,
operator|(
name|Header
index|[]
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"request should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"request headers must not be null"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|performRequest
argument_list|(
name|method
argument_list|,
literal|"/"
operator|+
name|statusCode
argument_list|,
operator|(
name|Header
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"request should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"request header must not be null"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNullParams
specifier|public
name|void
name|testNullParams
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|method
init|=
name|randomHttpMethod
argument_list|(
name|getRandom
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|statusCode
init|=
name|randomStatusCode
argument_list|(
name|getRandom
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|restClient
operator|.
name|performRequest
argument_list|(
name|method
argument_list|,
literal|"/"
operator|+
name|statusCode
argument_list|,
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"request should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"params must not be null"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|restClient
operator|.
name|performRequest
argument_list|(
name|method
argument_list|,
literal|"/"
operator|+
name|statusCode
argument_list|,
literal|null
argument_list|,
operator|(
name|HttpEntity
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"request should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"params must not be null"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * End to end test for request and response headers. Exercises the mock http client ability to send back      * whatever headers it has received.      */
DECL|method|testHeaders
specifier|public
name|void
name|testHeaders
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|method
range|:
name|getHttpMethods
argument_list|()
control|)
block|{
specifier|final
name|Header
index|[]
name|requestHeaders
init|=
name|RestClientTestUtil
operator|.
name|randomHeaders
argument_list|(
name|getRandom
argument_list|()
argument_list|,
literal|"Header"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|statusCode
init|=
name|randomStatusCode
argument_list|(
name|getRandom
argument_list|()
argument_list|)
decl_stmt|;
name|Response
name|esResponse
decl_stmt|;
try|try
block|{
name|esResponse
operator|=
name|restClient
operator|.
name|performRequest
argument_list|(
name|method
argument_list|,
literal|"/"
operator|+
name|statusCode
argument_list|,
name|requestHeaders
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResponseException
name|e
parameter_list|)
block|{
name|esResponse
operator|=
name|e
operator|.
name|getResponse
argument_list|()
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|esResponse
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|statusCode
argument_list|)
argument_list|)
expr_stmt|;
name|assertHeaders
argument_list|(
name|defaultHeaders
argument_list|,
name|requestHeaders
argument_list|,
name|esResponse
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|performRandomRequest
specifier|private
name|HttpUriRequest
name|performRandomRequest
parameter_list|(
name|String
name|method
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|uriAsString
init|=
literal|"/"
operator|+
name|randomStatusCode
argument_list|(
name|getRandom
argument_list|()
argument_list|)
decl_stmt|;
name|URIBuilder
name|uriBuilder
init|=
operator|new
name|URIBuilder
argument_list|(
name|uriAsString
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|hasParams
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasParams
condition|)
block|{
name|int
name|numParams
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numParams
condition|;
name|i
operator|++
control|)
block|{
name|String
name|paramKey
init|=
literal|"param-"
operator|+
name|i
decl_stmt|;
name|String
name|paramValue
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|paramKey
argument_list|,
name|paramValue
argument_list|)
expr_stmt|;
name|uriBuilder
operator|.
name|addParameter
argument_list|(
name|paramKey
argument_list|,
name|paramValue
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|//randomly add some ignore parameter, which doesn't get sent as part of the request
name|String
name|ignore
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|randomFrom
argument_list|(
name|RestClientTestUtil
operator|.
name|getAllErrorStatusCodes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|ignore
operator|+=
literal|","
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|randomFrom
argument_list|(
name|RestClientTestUtil
operator|.
name|getAllErrorStatusCodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|put
argument_list|(
literal|"ignore"
argument_list|,
name|ignore
argument_list|)
expr_stmt|;
block|}
name|URI
name|uri
init|=
name|uriBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|HttpUriRequest
name|request
decl_stmt|;
switch|switch
condition|(
name|method
condition|)
block|{
case|case
literal|"DELETE"
case|:
name|request
operator|=
operator|new
name|HttpDeleteWithEntity
argument_list|(
name|uri
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"GET"
case|:
name|request
operator|=
operator|new
name|HttpGetWithEntity
argument_list|(
name|uri
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"HEAD"
case|:
name|request
operator|=
operator|new
name|HttpHead
argument_list|(
name|uri
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"OPTIONS"
case|:
name|request
operator|=
operator|new
name|HttpOptions
argument_list|(
name|uri
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"PATCH"
case|:
name|request
operator|=
operator|new
name|HttpPatch
argument_list|(
name|uri
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"POST"
case|:
name|request
operator|=
operator|new
name|HttpPost
argument_list|(
name|uri
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"PUT"
case|:
name|request
operator|=
operator|new
name|HttpPut
argument_list|(
name|uri
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"TRACE"
case|:
name|request
operator|=
operator|new
name|HttpTrace
argument_list|(
name|uri
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"method not supported: "
operator|+
name|method
argument_list|)
throw|;
block|}
name|HttpEntity
name|entity
init|=
literal|null
decl_stmt|;
name|boolean
name|hasBody
init|=
name|request
operator|instanceof
name|HttpEntityEnclosingRequest
operator|&&
name|getRandom
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasBody
condition|)
block|{
name|entity
operator|=
operator|new
name|StringEntity
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|)
expr_stmt|;
operator|(
operator|(
name|HttpEntityEnclosingRequest
operator|)
name|request
operator|)
operator|.
name|setEntity
argument_list|(
name|entity
argument_list|)
expr_stmt|;
block|}
name|Header
index|[]
name|headers
init|=
operator|new
name|Header
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|uniqueNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|headers
operator|=
name|RestClientTestUtil
operator|.
name|randomHeaders
argument_list|(
name|getRandom
argument_list|()
argument_list|,
literal|"Header"
argument_list|)
expr_stmt|;
for|for
control|(
name|Header
name|header
range|:
name|headers
control|)
block|{
name|request
operator|.
name|addHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|uniqueNames
operator|.
name|add
argument_list|(
name|header
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Header
name|defaultHeader
range|:
name|defaultHeaders
control|)
block|{
comment|// request level headers override default headers
if|if
condition|(
name|uniqueNames
operator|.
name|contains
argument_list|(
name|defaultHeader
operator|.
name|getName
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
name|request
operator|.
name|addHeader
argument_list|(
name|defaultHeader
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
if|if
condition|(
name|hasParams
operator|==
literal|false
operator|&&
name|hasBody
operator|==
literal|false
operator|&&
name|randomBoolean
argument_list|()
condition|)
block|{
name|restClient
operator|.
name|performRequest
argument_list|(
name|method
argument_list|,
name|uriAsString
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hasBody
operator|==
literal|false
operator|&&
name|randomBoolean
argument_list|()
condition|)
block|{
name|restClient
operator|.
name|performRequest
argument_list|(
name|method
argument_list|,
name|uriAsString
argument_list|,
name|params
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|restClient
operator|.
name|performRequest
argument_list|(
name|method
argument_list|,
name|uriAsString
argument_list|,
name|params
argument_list|,
name|entity
argument_list|,
name|headers
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ResponseException
name|e
parameter_list|)
block|{
comment|//all good
block|}
return|return
name|request
return|;
block|}
DECL|method|performRequest
specifier|private
name|Response
name|performRequest
parameter_list|(
name|String
name|method
parameter_list|,
name|String
name|endpoint
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|performRequest
argument_list|(
name|method
argument_list|,
name|endpoint
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|headers
argument_list|)
return|;
block|}
DECL|method|performRequest
specifier|private
name|Response
name|performRequest
parameter_list|(
name|String
name|method
parameter_list|,
name|String
name|endpoint
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|Header
modifier|...
name|headers
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|methodSelector
decl_stmt|;
if|if
condition|(
name|params
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|methodSelector
operator|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|methodSelector
operator|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|methodSelector
condition|)
block|{
case|case
literal|0
case|:
return|return
name|restClient
operator|.
name|performRequest
argument_list|(
name|method
argument_list|,
name|endpoint
argument_list|,
name|headers
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|restClient
operator|.
name|performRequest
argument_list|(
name|method
argument_list|,
name|endpoint
argument_list|,
name|params
argument_list|,
name|headers
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|restClient
operator|.
name|performRequest
argument_list|(
name|method
argument_list|,
name|endpoint
argument_list|,
name|params
argument_list|,
operator|(
name|HttpEntity
operator|)
literal|null
argument_list|,
name|headers
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

