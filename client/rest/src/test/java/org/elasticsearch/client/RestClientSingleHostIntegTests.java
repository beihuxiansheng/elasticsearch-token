begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|Headers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|HttpExchange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|HttpHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|net
operator|.
name|httpserver
operator|.
name|HttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Consts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|AuthScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|UsernamePasswordCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|StringEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|BasicCredentialsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|nio
operator|.
name|client
operator|.
name|HttpAsyncClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|codehaus
operator|.
name|mojo
operator|.
name|animal_sniffer
operator|.
name|IgnoreJRERequirement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|mocksocket
operator|.
name|MockHttpServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|RestClientTestUtil
operator|.
name|getAllStatusCodes
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|RestClientTestUtil
operator|.
name|getHttpMethods
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|RestClientTestUtil
operator|.
name|randomStatusCode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|startsWith
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Integration test to check interaction between {@link RestClient} and {@link org.apache.http.client.HttpClient}.  * Works against a real http server, one single host.  */
end_comment

begin_comment
comment|//animal-sniffer doesn't like our usage of com.sun.net.httpserver.* classes
end_comment

begin_class
annotation|@
name|IgnoreJRERequirement
DECL|class|RestClientSingleHostIntegTests
specifier|public
class|class
name|RestClientSingleHostIntegTests
extends|extends
name|RestClientTestCase
block|{
DECL|field|httpServer
specifier|private
specifier|static
name|HttpServer
name|httpServer
decl_stmt|;
DECL|field|restClient
specifier|private
specifier|static
name|RestClient
name|restClient
decl_stmt|;
DECL|field|pathPrefix
specifier|private
specifier|static
name|String
name|pathPrefix
decl_stmt|;
DECL|field|defaultHeaders
specifier|private
specifier|static
name|Header
index|[]
name|defaultHeaders
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|startHttpServer
specifier|public
specifier|static
name|void
name|startHttpServer
parameter_list|()
throws|throws
name|Exception
block|{
name|pathPrefix
operator|=
name|randomBoolean
argument_list|()
condition|?
literal|"/testPathPrefix/"
operator|+
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
else|:
literal|""
expr_stmt|;
name|httpServer
operator|=
name|createHttpServer
argument_list|()
expr_stmt|;
name|defaultHeaders
operator|=
name|RestClientTestUtil
operator|.
name|randomHeaders
argument_list|(
name|getRandom
argument_list|()
argument_list|,
literal|"Header-default"
argument_list|)
expr_stmt|;
name|restClient
operator|=
name|createRestClient
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|createHttpServer
specifier|private
specifier|static
name|HttpServer
name|createHttpServer
parameter_list|()
throws|throws
name|Exception
block|{
name|HttpServer
name|httpServer
init|=
name|MockHttpServer
operator|.
name|createHttp
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|InetAddress
operator|.
name|getLoopbackAddress
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|httpServer
operator|.
name|start
argument_list|()
expr_stmt|;
comment|//returns a different status code depending on the path
for|for
control|(
name|int
name|statusCode
range|:
name|getAllStatusCodes
argument_list|()
control|)
block|{
name|httpServer
operator|.
name|createContext
argument_list|(
name|pathPrefix
operator|+
literal|"/"
operator|+
name|statusCode
argument_list|,
operator|new
name|ResponseHandler
argument_list|(
name|statusCode
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|httpServer
return|;
block|}
comment|//animal-sniffer doesn't like our usage of com.sun.net.httpserver.* classes
annotation|@
name|IgnoreJRERequirement
DECL|class|ResponseHandler
specifier|private
specifier|static
class|class
name|ResponseHandler
implements|implements
name|HttpHandler
block|{
DECL|field|statusCode
specifier|private
specifier|final
name|int
name|statusCode
decl_stmt|;
DECL|method|ResponseHandler
name|ResponseHandler
parameter_list|(
name|int
name|statusCode
parameter_list|)
block|{
name|this
operator|.
name|statusCode
operator|=
name|statusCode
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handle
specifier|public
name|void
name|handle
parameter_list|(
name|HttpExchange
name|httpExchange
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|body
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
init|(
name|InputStreamReader
name|reader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|httpExchange
operator|.
name|getRequestBody
argument_list|()
argument_list|,
name|Consts
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|char
index|[]
name|buffer
init|=
operator|new
name|char
index|[
literal|256
index|]
decl_stmt|;
name|int
name|read
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|reader
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|body
operator|.
name|append
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
block|}
name|Headers
name|requestHeaders
init|=
name|httpExchange
operator|.
name|getRequestHeaders
argument_list|()
decl_stmt|;
name|Headers
name|responseHeaders
init|=
name|httpExchange
operator|.
name|getResponseHeaders
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|header
range|:
name|requestHeaders
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|responseHeaders
operator|.
name|put
argument_list|(
name|header
operator|.
name|getKey
argument_list|()
argument_list|,
name|header
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|httpExchange
operator|.
name|getRequestBody
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|httpExchange
operator|.
name|sendResponseHeaders
argument_list|(
name|statusCode
argument_list|,
name|body
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
operator|-
literal|1
else|:
name|body
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|body
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
init|(
name|OutputStream
name|out
init|=
name|httpExchange
operator|.
name|getResponseBody
argument_list|()
init|)
block|{
name|out
operator|.
name|write
argument_list|(
name|body
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|(
name|Consts
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|httpExchange
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createRestClient
specifier|private
specifier|static
name|RestClient
name|createRestClient
parameter_list|(
specifier|final
name|boolean
name|useAuth
parameter_list|,
specifier|final
name|boolean
name|usePreemptiveAuth
parameter_list|)
block|{
comment|// provide the username/password for every request
specifier|final
name|BasicCredentialsProvider
name|credentialsProvider
init|=
operator|new
name|BasicCredentialsProvider
argument_list|()
decl_stmt|;
name|credentialsProvider
operator|.
name|setCredentials
argument_list|(
name|AuthScope
operator|.
name|ANY
argument_list|,
operator|new
name|UsernamePasswordCredentials
argument_list|(
literal|"user"
argument_list|,
literal|"pass"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|RestClientBuilder
name|restClientBuilder
init|=
name|RestClient
operator|.
name|builder
argument_list|(
operator|new
name|HttpHost
argument_list|(
name|httpServer
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostString
argument_list|()
argument_list|,
name|httpServer
operator|.
name|getAddress
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setDefaultHeaders
argument_list|(
name|defaultHeaders
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathPrefix
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// sometimes cut off the leading slash
name|restClientBuilder
operator|.
name|setPathPrefix
argument_list|(
name|randomBoolean
argument_list|()
condition|?
name|pathPrefix
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
else|:
name|pathPrefix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useAuth
condition|)
block|{
name|restClientBuilder
operator|.
name|setHttpClientConfigCallback
argument_list|(
operator|new
name|RestClientBuilder
operator|.
name|HttpClientConfigCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|HttpAsyncClientBuilder
name|customizeHttpClient
parameter_list|(
specifier|final
name|HttpAsyncClientBuilder
name|httpClientBuilder
parameter_list|)
block|{
if|if
condition|(
name|usePreemptiveAuth
operator|==
literal|false
condition|)
block|{
comment|// disable preemptive auth by ignoring any authcache
name|httpClientBuilder
operator|.
name|disableAuthCaching
argument_list|()
expr_stmt|;
block|}
return|return
name|httpClientBuilder
operator|.
name|setDefaultCredentialsProvider
argument_list|(
name|credentialsProvider
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|restClientBuilder
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|AfterClass
DECL|method|stopHttpServers
specifier|public
specifier|static
name|void
name|stopHttpServers
parameter_list|()
throws|throws
name|IOException
block|{
name|restClient
operator|.
name|close
argument_list|()
expr_stmt|;
name|restClient
operator|=
literal|null
expr_stmt|;
name|httpServer
operator|.
name|stop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|httpServer
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * End to end test for headers. We test it explicitly against a real http client as there are different ways      * to set/add headers to the {@link org.apache.http.client.HttpClient}.      * Exercises the test http server ability to send back whatever headers it received.      */
DECL|method|testHeaders
specifier|public
name|void
name|testHeaders
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|method
range|:
name|getHttpMethods
argument_list|()
control|)
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|standardHeaders
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"Connection"
argument_list|,
literal|"Host"
argument_list|,
literal|"User-agent"
argument_list|,
literal|"Date"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|.
name|equals
argument_list|(
literal|"HEAD"
argument_list|)
operator|==
literal|false
condition|)
block|{
name|standardHeaders
operator|.
name|add
argument_list|(
literal|"Content-length"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Header
index|[]
name|requestHeaders
init|=
name|RestClientTestUtil
operator|.
name|randomHeaders
argument_list|(
name|getRandom
argument_list|()
argument_list|,
literal|"Header"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|statusCode
init|=
name|randomStatusCode
argument_list|(
name|getRandom
argument_list|()
argument_list|)
decl_stmt|;
name|Response
name|esResponse
decl_stmt|;
try|try
block|{
name|esResponse
operator|=
name|restClient
operator|.
name|performRequest
argument_list|(
name|method
argument_list|,
literal|"/"
operator|+
name|statusCode
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|requestHeaders
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResponseException
name|e
parameter_list|)
block|{
name|esResponse
operator|=
name|e
operator|.
name|getResponse
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|method
argument_list|,
name|esResponse
operator|.
name|getRequestLine
argument_list|()
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|statusCode
argument_list|,
name|esResponse
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pathPrefix
operator|+
literal|"/"
operator|+
name|statusCode
argument_list|,
name|esResponse
operator|.
name|getRequestLine
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertHeaders
argument_list|(
name|defaultHeaders
argument_list|,
name|requestHeaders
argument_list|,
name|esResponse
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|standardHeaders
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Header
name|responseHeader
range|:
name|esResponse
operator|.
name|getHeaders
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|responseHeader
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"Header"
argument_list|)
operator|==
literal|false
condition|)
block|{
name|assertTrue
argument_list|(
literal|"unknown header was returned "
operator|+
name|name
argument_list|,
name|standardHeaders
operator|.
name|remove
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"some expected standard headers weren't returned: "
operator|+
name|standardHeaders
argument_list|,
name|standardHeaders
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * End to end test for delete with body. We test it explicitly as it is not supported      * out of the box by {@link org.apache.http.client.HttpClient}.      * Exercises the test http server ability to send back whatever body it received.      */
DECL|method|testDeleteWithBody
specifier|public
name|void
name|testDeleteWithBody
parameter_list|()
throws|throws
name|IOException
block|{
name|bodyTest
argument_list|(
literal|"DELETE"
argument_list|)
expr_stmt|;
block|}
comment|/**      * End to end test for get with body. We test it explicitly as it is not supported      * out of the box by {@link org.apache.http.client.HttpClient}.      * Exercises the test http server ability to send back whatever body it received.      */
DECL|method|testGetWithBody
specifier|public
name|void
name|testGetWithBody
parameter_list|()
throws|throws
name|IOException
block|{
name|bodyTest
argument_list|(
literal|"GET"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Verify that credentials are sent on the first request with preemptive auth enabled (default when provided with credentials).      */
DECL|method|testPreemptiveAuthEnabled
specifier|public
name|void
name|testPreemptiveAuthEnabled
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
index|[]
name|methods
init|=
block|{
literal|"POST"
block|,
literal|"PUT"
block|,
literal|"GET"
block|,
literal|"DELETE"
block|}
decl_stmt|;
try|try
init|(
name|RestClient
name|restClient
init|=
name|createRestClient
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
init|)
block|{
for|for
control|(
specifier|final
name|String
name|method
range|:
name|methods
control|)
block|{
specifier|final
name|Response
name|response
init|=
name|bodyTest
argument_list|(
name|restClient
argument_list|,
name|method
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHeader
argument_list|(
literal|"Authorization"
argument_list|)
argument_list|,
name|startsWith
argument_list|(
literal|"Basic"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Verify that credentials are<em>not</em> sent on the first request with preemptive auth disabled.      */
DECL|method|testPreemptiveAuthDisabled
specifier|public
name|void
name|testPreemptiveAuthDisabled
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
index|[]
name|methods
init|=
block|{
literal|"POST"
block|,
literal|"PUT"
block|,
literal|"GET"
block|,
literal|"DELETE"
block|}
decl_stmt|;
try|try
init|(
name|RestClient
name|restClient
init|=
name|createRestClient
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
init|)
block|{
for|for
control|(
specifier|final
name|String
name|method
range|:
name|methods
control|)
block|{
specifier|final
name|Response
name|response
init|=
name|bodyTest
argument_list|(
name|restClient
argument_list|,
name|method
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|response
operator|.
name|getHeader
argument_list|(
literal|"Authorization"
argument_list|)
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|bodyTest
specifier|private
name|Response
name|bodyTest
parameter_list|(
specifier|final
name|String
name|method
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|bodyTest
argument_list|(
name|restClient
argument_list|,
name|method
argument_list|)
return|;
block|}
DECL|method|bodyTest
specifier|private
name|Response
name|bodyTest
parameter_list|(
specifier|final
name|RestClient
name|restClient
parameter_list|,
specifier|final
name|String
name|method
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|requestBody
init|=
literal|"{ \"field\": \"value\" }"
decl_stmt|;
name|StringEntity
name|entity
init|=
operator|new
name|StringEntity
argument_list|(
name|requestBody
argument_list|,
name|ContentType
operator|.
name|APPLICATION_JSON
argument_list|)
decl_stmt|;
name|int
name|statusCode
init|=
name|randomStatusCode
argument_list|(
name|getRandom
argument_list|()
argument_list|)
decl_stmt|;
name|Response
name|esResponse
decl_stmt|;
try|try
block|{
name|esResponse
operator|=
name|restClient
operator|.
name|performRequest
argument_list|(
name|method
argument_list|,
literal|"/"
operator|+
name|statusCode
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
name|entity
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ResponseException
name|e
parameter_list|)
block|{
name|esResponse
operator|=
name|e
operator|.
name|getResponse
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|method
argument_list|,
name|esResponse
operator|.
name|getRequestLine
argument_list|()
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|statusCode
argument_list|,
name|esResponse
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|pathPrefix
operator|+
literal|"/"
operator|+
name|statusCode
argument_list|,
name|esResponse
operator|.
name|getRequestLine
argument_list|()
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|requestBody
argument_list|,
name|EntityUtils
operator|.
name|toString
argument_list|(
name|esResponse
operator|.
name|getEntity
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|esResponse
return|;
block|}
block|}
end_class

end_unit

