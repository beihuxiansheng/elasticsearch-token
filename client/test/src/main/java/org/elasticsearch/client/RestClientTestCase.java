begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|JUnit3MethodProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|MixWithSuiteName
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|SeedDecorators
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|TestMethodProviders
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakAction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakLingering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakScope
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakZombies
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|TimeoutSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
annotation|@
name|TestMethodProviders
argument_list|(
block|{
name|JUnit3MethodProvider
operator|.
name|class
block|}
argument_list|)
annotation|@
name|SeedDecorators
argument_list|(
block|{
name|MixWithSuiteName
operator|.
name|class
block|}
argument_list|)
comment|// See LUCENE-3995 for rationale.
annotation|@
name|ThreadLeakScope
argument_list|(
name|ThreadLeakScope
operator|.
name|Scope
operator|.
name|SUITE
argument_list|)
annotation|@
name|ThreadLeakGroup
argument_list|(
name|ThreadLeakGroup
operator|.
name|Group
operator|.
name|MAIN
argument_list|)
annotation|@
name|ThreadLeakAction
argument_list|(
block|{
name|ThreadLeakAction
operator|.
name|Action
operator|.
name|WARN
block|,
name|ThreadLeakAction
operator|.
name|Action
operator|.
name|INTERRUPT
block|}
argument_list|)
annotation|@
name|ThreadLeakZombies
argument_list|(
name|ThreadLeakZombies
operator|.
name|Consequence
operator|.
name|IGNORE_REMAINING_TESTS
argument_list|)
annotation|@
name|ThreadLeakLingering
argument_list|(
name|linger
operator|=
literal|5000
argument_list|)
comment|// 5 sec lingering
annotation|@
name|TimeoutSuite
argument_list|(
name|millis
operator|=
literal|2
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000
argument_list|)
DECL|class|RestClientTestCase
specifier|public
specifier|abstract
class|class
name|RestClientTestCase
extends|extends
name|RandomizedTest
block|{
comment|/**      * Assert that the actual headers are the expected ones given the original default and request headers. Some headers can be ignored,      * for instance in case the http client is adding its own automatically.      *      * @param defaultHeaders the default headers set to the REST client instance      * @param requestHeaders the request headers sent with a particular request      * @param actualHeaders the actual headers as a result of the provided default and request headers      * @param ignoreHeaders header keys to be ignored as they are not part of default nor request headers, yet they      *                      will be part of the actual ones      */
DECL|method|assertHeaders
specifier|protected
specifier|static
name|void
name|assertHeaders
parameter_list|(
specifier|final
name|Header
index|[]
name|defaultHeaders
parameter_list|,
specifier|final
name|Header
index|[]
name|requestHeaders
parameter_list|,
specifier|final
name|Header
index|[]
name|actualHeaders
parameter_list|,
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|ignoreHeaders
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|expectedHeaders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|requestHeaderKeys
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Header
name|header
range|:
name|requestHeaders
control|)
block|{
specifier|final
name|String
name|name
init|=
name|header
operator|.
name|getName
argument_list|()
decl_stmt|;
name|addValueToListEntry
argument_list|(
name|expectedHeaders
argument_list|,
name|name
argument_list|,
name|header
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|requestHeaderKeys
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|Header
name|defaultHeader
range|:
name|defaultHeaders
control|)
block|{
specifier|final
name|String
name|name
init|=
name|defaultHeader
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|requestHeaderKeys
operator|.
name|contains
argument_list|(
name|name
argument_list|)
operator|==
literal|false
condition|)
block|{
name|addValueToListEntry
argument_list|(
name|expectedHeaders
argument_list|,
name|name
argument_list|,
name|defaultHeader
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|actualIgnoredHeaders
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Header
name|responseHeader
range|:
name|actualHeaders
control|)
block|{
specifier|final
name|String
name|name
init|=
name|responseHeader
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|ignoreHeaders
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|expectedHeaders
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|actualIgnoredHeaders
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|final
name|String
name|value
init|=
name|responseHeader
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|expectedHeaders
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"found response header ["
operator|+
name|name
operator|+
literal|"] that wasn't originally sent: "
operator|+
name|value
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"found incorrect response header ["
operator|+
name|name
operator|+
literal|"]: "
operator|+
name|value
argument_list|,
name|values
operator|.
name|remove
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|expectedHeaders
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"some headers meant to be ignored were not part of the actual headers"
argument_list|,
name|ignoreHeaders
argument_list|,
name|actualIgnoredHeaders
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"some headers that were sent weren't returned "
operator|+
name|expectedHeaders
argument_list|,
name|expectedHeaders
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addValueToListEntry
specifier|private
specifier|static
name|void
name|addValueToListEntry
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|map
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|map
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
name|values
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

