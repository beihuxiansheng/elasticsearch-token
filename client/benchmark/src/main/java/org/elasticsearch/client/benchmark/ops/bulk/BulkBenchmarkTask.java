begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client.benchmark.ops.bulk
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|benchmark
operator|.
name|ops
operator|.
name|bulk
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|benchmark
operator|.
name|BenchmarkTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|benchmark
operator|.
name|metrics
operator|.
name|Sample
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|benchmark
operator|.
name|metrics
operator|.
name|SampleRecorder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|ESLoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
DECL|class|BulkBenchmarkTask
specifier|public
class|class
name|BulkBenchmarkTask
implements|implements
name|BenchmarkTask
block|{
DECL|field|requestExecutor
specifier|private
specifier|final
name|BulkRequestExecutor
name|requestExecutor
decl_stmt|;
DECL|field|indexFilePath
specifier|private
specifier|final
name|String
name|indexFilePath
decl_stmt|;
DECL|field|warmupIterations
specifier|private
specifier|final
name|int
name|warmupIterations
decl_stmt|;
DECL|field|measurementIterations
specifier|private
specifier|final
name|int
name|measurementIterations
decl_stmt|;
DECL|field|bulkSize
specifier|private
specifier|final
name|int
name|bulkSize
decl_stmt|;
DECL|field|generator
specifier|private
name|LoadGenerator
name|generator
decl_stmt|;
DECL|field|executorService
specifier|private
name|ExecutorService
name|executorService
decl_stmt|;
DECL|method|BulkBenchmarkTask
specifier|public
name|BulkBenchmarkTask
parameter_list|(
name|BulkRequestExecutor
name|requestExecutor
parameter_list|,
name|String
name|indexFilePath
parameter_list|,
name|int
name|warmupIterations
parameter_list|,
name|int
name|measurementIterations
parameter_list|,
name|int
name|bulkSize
parameter_list|)
block|{
name|this
operator|.
name|requestExecutor
operator|=
name|requestExecutor
expr_stmt|;
name|this
operator|.
name|indexFilePath
operator|=
name|indexFilePath
expr_stmt|;
name|this
operator|.
name|warmupIterations
operator|=
name|warmupIterations
expr_stmt|;
name|this
operator|.
name|measurementIterations
operator|=
name|measurementIterations
expr_stmt|;
name|this
operator|.
name|bulkSize
operator|=
name|bulkSize
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"PathUtils#get is fine - we don't have environment here"
argument_list|)
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|(
name|SampleRecorder
name|sampleRecorder
parameter_list|)
block|{
name|BlockingQueue
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|bulkQueue
init|=
operator|new
name|ArrayBlockingQueue
argument_list|<>
argument_list|(
literal|256
argument_list|)
decl_stmt|;
name|BulkIndexer
name|runner
init|=
operator|new
name|BulkIndexer
argument_list|(
name|bulkQueue
argument_list|,
name|warmupIterations
argument_list|,
name|measurementIterations
argument_list|,
name|sampleRecorder
argument_list|,
name|requestExecutor
argument_list|)
decl_stmt|;
name|executorService
operator|=
name|Executors
operator|.
name|newSingleThreadExecutor
argument_list|(
parameter_list|(
name|r
parameter_list|)
lambda|->
operator|new
name|Thread
argument_list|(
name|r
argument_list|,
literal|"bulk-index-runner"
argument_list|)
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|submit
argument_list|(
name|runner
argument_list|)
expr_stmt|;
name|generator
operator|=
operator|new
name|LoadGenerator
argument_list|(
name|PathUtils
operator|.
name|get
argument_list|(
name|indexFilePath
argument_list|)
argument_list|,
name|bulkQueue
argument_list|,
name|bulkSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"system out is ok for a command line tool"
argument_list|)
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|generator
operator|.
name|execute
argument_list|()
expr_stmt|;
comment|// when the generator is done, there are no more data -> shutdown client
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|//We need to wait until the queue is drained
specifier|final
name|boolean
name|finishedNormally
init|=
name|executorService
operator|.
name|awaitTermination
argument_list|(
literal|20
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
decl_stmt|;
if|if
condition|(
name|finishedNormally
operator|==
literal|false
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Background tasks are still running after timeout on enclosing pool. Forcing pool shutdown."
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
comment|//no op
block|}
DECL|class|LoadGenerator
specifier|private
specifier|static
specifier|final
class|class
name|LoadGenerator
block|{
DECL|field|bulkDataFile
specifier|private
specifier|final
name|Path
name|bulkDataFile
decl_stmt|;
DECL|field|bulkQueue
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|bulkQueue
decl_stmt|;
DECL|field|bulkSize
specifier|private
specifier|final
name|int
name|bulkSize
decl_stmt|;
DECL|method|LoadGenerator
specifier|public
name|LoadGenerator
parameter_list|(
name|Path
name|bulkDataFile
parameter_list|,
name|BlockingQueue
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|bulkQueue
parameter_list|,
name|int
name|bulkSize
parameter_list|)
block|{
name|this
operator|.
name|bulkDataFile
operator|=
name|bulkDataFile
expr_stmt|;
name|this
operator|.
name|bulkQueue
operator|=
name|bulkQueue
expr_stmt|;
name|this
operator|.
name|bulkSize
operator|=
name|bulkSize
expr_stmt|;
block|}
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"Classic I/O is fine in non-production code"
argument_list|)
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|()
block|{
try|try
init|(
name|BufferedReader
name|reader
init|=
name|Files
operator|.
name|newBufferedReader
argument_list|(
name|bulkDataFile
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|String
name|line
decl_stmt|;
name|int
name|bulkIndex
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|bulkData
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|bulkSize
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|bulkIndex
operator|==
name|bulkSize
condition|)
block|{
name|sendBulk
argument_list|(
name|bulkData
argument_list|)
expr_stmt|;
comment|// reset data structures
name|bulkData
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|bulkSize
argument_list|)
expr_stmt|;
name|bulkIndex
operator|=
literal|0
expr_stmt|;
block|}
name|bulkData
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|bulkIndex
operator|++
expr_stmt|;
block|}
comment|// also send the last bulk:
if|if
condition|(
name|bulkIndex
operator|>
literal|0
condition|)
block|{
name|sendBulk
argument_list|(
name|bulkData
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|sendBulk
specifier|private
name|void
name|sendBulk
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|bulkData
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|bulkQueue
operator|.
name|put
argument_list|(
name|bulkData
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|BulkIndexer
specifier|private
specifier|static
specifier|final
class|class
name|BulkIndexer
implements|implements
name|Runnable
block|{
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|ESLoggerFactory
operator|.
name|getLogger
argument_list|(
name|BulkIndexer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|bulkData
specifier|private
specifier|final
name|BlockingQueue
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|bulkData
decl_stmt|;
DECL|field|warmupIterations
specifier|private
specifier|final
name|int
name|warmupIterations
decl_stmt|;
DECL|field|measurementIterations
specifier|private
specifier|final
name|int
name|measurementIterations
decl_stmt|;
DECL|field|bulkRequestExecutor
specifier|private
specifier|final
name|BulkRequestExecutor
name|bulkRequestExecutor
decl_stmt|;
DECL|field|sampleRecorder
specifier|private
specifier|final
name|SampleRecorder
name|sampleRecorder
decl_stmt|;
DECL|method|BulkIndexer
specifier|public
name|BulkIndexer
parameter_list|(
name|BlockingQueue
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|bulkData
parameter_list|,
name|int
name|warmupIterations
parameter_list|,
name|int
name|measurementIterations
parameter_list|,
name|SampleRecorder
name|sampleRecorder
parameter_list|,
name|BulkRequestExecutor
name|bulkRequestExecutor
parameter_list|)
block|{
name|this
operator|.
name|bulkData
operator|=
name|bulkData
expr_stmt|;
name|this
operator|.
name|warmupIterations
operator|=
name|warmupIterations
expr_stmt|;
name|this
operator|.
name|measurementIterations
operator|=
name|measurementIterations
expr_stmt|;
name|this
operator|.
name|bulkRequestExecutor
operator|=
name|bulkRequestExecutor
expr_stmt|;
name|this
operator|.
name|sampleRecorder
operator|=
name|sampleRecorder
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|iteration
init|=
literal|0
init|;
name|iteration
operator|<
name|warmupIterations
operator|+
name|measurementIterations
condition|;
name|iteration
operator|++
control|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|currentBulk
decl_stmt|;
try|try
block|{
name|currentBulk
operator|=
name|bulkData
operator|.
name|take
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return;
block|}
comment|//measure only service time, latency is not that interesting for a throughput benchmark
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
try|try
block|{
name|success
operator|=
name|bulkRequestExecutor
operator|.
name|bulkIndex
argument_list|(
name|currentBulk
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Error while executing bulk request"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|long
name|stop
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|iteration
operator|<
name|warmupIterations
condition|)
block|{
name|sampleRecorder
operator|.
name|addSample
argument_list|(
operator|new
name|Sample
argument_list|(
literal|"bulk"
argument_list|,
name|start
argument_list|,
name|start
argument_list|,
name|stop
argument_list|,
name|success
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

