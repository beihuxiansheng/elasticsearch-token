begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client.benchmark.ops.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|benchmark
operator|.
name|ops
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|benchmark
operator|.
name|BenchmarkTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|benchmark
operator|.
name|metrics
operator|.
name|Sample
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|benchmark
operator|.
name|metrics
operator|.
name|SampleRecorder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
DECL|class|SearchBenchmarkTask
specifier|public
class|class
name|SearchBenchmarkTask
implements|implements
name|BenchmarkTask
block|{
DECL|field|searchRequestExecutor
specifier|private
specifier|final
name|SearchRequestExecutor
name|searchRequestExecutor
decl_stmt|;
DECL|field|searchRequestBody
specifier|private
specifier|final
name|String
name|searchRequestBody
decl_stmt|;
DECL|field|warmupIterations
specifier|private
specifier|final
name|int
name|warmupIterations
decl_stmt|;
DECL|field|measurementIterations
specifier|private
specifier|final
name|int
name|measurementIterations
decl_stmt|;
DECL|field|targetThroughput
specifier|private
specifier|final
name|int
name|targetThroughput
decl_stmt|;
DECL|field|sampleRecorder
specifier|private
name|SampleRecorder
name|sampleRecorder
decl_stmt|;
DECL|method|SearchBenchmarkTask
specifier|public
name|SearchBenchmarkTask
parameter_list|(
name|SearchRequestExecutor
name|searchRequestExecutor
parameter_list|,
name|String
name|body
parameter_list|,
name|int
name|warmupIterations
parameter_list|,
name|int
name|measurementIterations
parameter_list|,
name|int
name|targetThroughput
parameter_list|)
block|{
name|this
operator|.
name|searchRequestExecutor
operator|=
name|searchRequestExecutor
expr_stmt|;
name|this
operator|.
name|searchRequestBody
operator|=
name|body
expr_stmt|;
name|this
operator|.
name|warmupIterations
operator|=
name|warmupIterations
expr_stmt|;
name|this
operator|.
name|measurementIterations
operator|=
name|measurementIterations
expr_stmt|;
name|this
operator|.
name|targetThroughput
operator|=
name|targetThroughput
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|(
name|SampleRecorder
name|sampleRecorder
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|sampleRecorder
operator|=
name|sampleRecorder
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|runIterations
argument_list|(
name|warmupIterations
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|runIterations
argument_list|(
name|measurementIterations
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|runIterations
specifier|private
name|void
name|runIterations
parameter_list|(
name|int
name|iterations
parameter_list|,
name|boolean
name|addSample
parameter_list|)
block|{
name|long
name|interval
init|=
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toNanos
argument_list|(
literal|1L
argument_list|)
operator|/
name|targetThroughput
decl_stmt|;
name|long
name|totalStart
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|iteration
init|=
literal|0
init|;
name|iteration
operator|<
name|iterations
condition|;
name|iteration
operator|++
control|)
block|{
name|long
name|expectedStart
init|=
name|totalStart
operator|+
name|iteration
operator|*
name|interval
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|<
name|expectedStart
condition|)
block|{
comment|// busy spin
block|}
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
name|searchRequestExecutor
operator|.
name|search
argument_list|(
name|searchRequestBody
argument_list|)
decl_stmt|;
name|long
name|stop
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|addSample
condition|)
block|{
name|sampleRecorder
operator|.
name|addSample
argument_list|(
operator|new
name|Sample
argument_list|(
literal|"search"
argument_list|,
name|expectedStart
argument_list|,
name|start
argument_list|,
name|stop
argument_list|,
name|success
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// no op
block|}
block|}
end_class

end_unit

