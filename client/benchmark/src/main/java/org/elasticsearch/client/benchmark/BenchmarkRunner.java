begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client.benchmark
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|benchmark
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|benchmark
operator|.
name|metrics
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|benchmark
operator|.
name|metrics
operator|.
name|MetricsCalculator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|benchmark
operator|.
name|metrics
operator|.
name|Sample
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|benchmark
operator|.
name|metrics
operator|.
name|SampleRecorder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_class
DECL|class|BenchmarkRunner
specifier|public
specifier|final
class|class
name|BenchmarkRunner
block|{
DECL|field|warmupIterations
specifier|private
specifier|final
name|int
name|warmupIterations
decl_stmt|;
DECL|field|iterations
specifier|private
specifier|final
name|int
name|iterations
decl_stmt|;
DECL|field|task
specifier|private
specifier|final
name|BenchmarkTask
name|task
decl_stmt|;
DECL|method|BenchmarkRunner
specifier|public
name|BenchmarkRunner
parameter_list|(
name|int
name|warmupIterations
parameter_list|,
name|int
name|iterations
parameter_list|,
name|BenchmarkTask
name|task
parameter_list|)
block|{
name|this
operator|.
name|warmupIterations
operator|=
name|warmupIterations
expr_stmt|;
name|this
operator|.
name|iterations
operator|=
name|iterations
expr_stmt|;
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
block|}
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"system out is ok for a command line tool"
argument_list|)
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|SampleRecorder
name|recorder
init|=
operator|new
name|SampleRecorder
argument_list|(
name|iterations
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"Running %s with %d warmup iterations and %d iterations.%n"
argument_list|,
name|task
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|warmupIterations
argument_list|,
name|iterations
argument_list|)
expr_stmt|;
try|try
block|{
name|task
operator|.
name|setUp
argument_list|(
name|recorder
argument_list|)
expr_stmt|;
name|task
operator|.
name|run
argument_list|()
expr_stmt|;
name|task
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ex
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Sample
argument_list|>
name|samples
init|=
name|recorder
operator|.
name|getSamples
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Metrics
argument_list|>
name|summaryMetrics
init|=
name|MetricsCalculator
operator|.
name|calculate
argument_list|(
name|samples
argument_list|)
decl_stmt|;
if|if
condition|(
name|summaryMetrics
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"No results."
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Metrics
name|metrics
range|:
name|summaryMetrics
control|)
block|{
name|String
name|throughput
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Throughput [ops/s]: %f"
argument_list|,
name|metrics
operator|.
name|throughput
argument_list|)
decl_stmt|;
name|String
name|serviceTimes
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Service time [ms]: p50 = %f, p90 = %f, p95 = %f, p99 = %f, p99.9 = %f, p99.99 = %f"
argument_list|,
name|metrics
operator|.
name|serviceTimeP50
argument_list|,
name|metrics
operator|.
name|serviceTimeP90
argument_list|,
name|metrics
operator|.
name|serviceTimeP95
argument_list|,
name|metrics
operator|.
name|serviceTimeP99
argument_list|,
name|metrics
operator|.
name|serviceTimeP999
argument_list|,
name|metrics
operator|.
name|serviceTimeP9999
argument_list|)
decl_stmt|;
name|String
name|latencies
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Latency [ms]:      p50 = %f, p90 = %f, p95 = %f, p99 = %f, p99.9 = %f, p99.99 = %f"
argument_list|,
name|metrics
operator|.
name|latencyP50
argument_list|,
name|metrics
operator|.
name|latencyP90
argument_list|,
name|metrics
operator|.
name|latencyP95
argument_list|,
name|metrics
operator|.
name|latencyP99
argument_list|,
name|metrics
operator|.
name|latencyP999
argument_list|,
name|metrics
operator|.
name|latencyP9999
argument_list|)
decl_stmt|;
name|int
name|lineLength
init|=
name|Math
operator|.
name|max
argument_list|(
name|serviceTimes
operator|.
name|length
argument_list|()
argument_list|,
name|latencies
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|repeat
argument_list|(
name|lineLength
argument_list|,
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|throughput
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|serviceTimes
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|latencies
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|printf
argument_list|(
literal|"success count = %d, error count = %d%n"
argument_list|,
name|metrics
operator|.
name|successCount
argument_list|,
name|metrics
operator|.
name|errorCount
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|repeat
argument_list|(
name|lineLength
argument_list|,
literal|'-'
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|repeat
specifier|private
name|String
name|repeat
parameter_list|(
name|int
name|times
parameter_list|,
name|char
name|character
parameter_list|)
block|{
name|char
index|[]
name|characters
init|=
operator|new
name|char
index|[
name|times
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|characters
argument_list|,
name|character
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|characters
argument_list|)
return|;
block|}
block|}
end_class

end_unit

