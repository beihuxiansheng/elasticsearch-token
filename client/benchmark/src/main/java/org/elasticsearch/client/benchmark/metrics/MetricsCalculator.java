begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.client.benchmark.metrics
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|benchmark
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math3
operator|.
name|stat
operator|.
name|StatUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_class
DECL|class|MetricsCalculator
specifier|public
specifier|final
class|class
name|MetricsCalculator
block|{
DECL|method|calculate
specifier|public
specifier|static
name|List
argument_list|<
name|Metrics
argument_list|>
name|calculate
parameter_list|(
name|Collection
argument_list|<
name|Sample
argument_list|>
name|samples
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Sample
argument_list|>
argument_list|>
name|samplesPerOperation
init|=
name|groupByOperation
argument_list|(
name|samples
argument_list|)
decl_stmt|;
return|return
name|calculateMetricsPerOperation
argument_list|(
name|samplesPerOperation
argument_list|)
return|;
block|}
DECL|method|groupByOperation
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Sample
argument_list|>
argument_list|>
name|groupByOperation
parameter_list|(
name|Collection
argument_list|<
name|Sample
argument_list|>
name|samples
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Sample
argument_list|>
argument_list|>
name|samplesPerOperation
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Sample
name|sample
range|:
name|samples
control|)
block|{
if|if
condition|(
operator|!
name|samplesPerOperation
operator|.
name|containsKey
argument_list|(
name|sample
operator|.
name|getOperation
argument_list|()
argument_list|)
condition|)
block|{
name|samplesPerOperation
operator|.
name|put
argument_list|(
name|sample
operator|.
name|getOperation
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|samplesPerOperation
operator|.
name|get
argument_list|(
name|sample
operator|.
name|getOperation
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|sample
argument_list|)
expr_stmt|;
block|}
return|return
name|samplesPerOperation
return|;
block|}
DECL|method|calculateMetricsPerOperation
specifier|private
specifier|static
name|List
argument_list|<
name|Metrics
argument_list|>
name|calculateMetricsPerOperation
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Sample
argument_list|>
argument_list|>
name|samplesPerOperation
parameter_list|)
block|{
name|List
argument_list|<
name|Metrics
argument_list|>
name|metrics
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Sample
argument_list|>
argument_list|>
name|operationAndMetrics
range|:
name|samplesPerOperation
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Sample
argument_list|>
name|samples
init|=
name|operationAndMetrics
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|double
index|[]
name|serviceTimes
init|=
operator|new
name|double
index|[
name|samples
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|double
index|[]
name|latencies
init|=
operator|new
name|double
index|[
name|samples
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|it
init|=
literal|0
decl_stmt|;
name|long
name|firstStart
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|long
name|latestEnd
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|Sample
name|sample
range|:
name|samples
control|)
block|{
name|firstStart
operator|=
name|Math
operator|.
name|min
argument_list|(
name|sample
operator|.
name|getStartTimestamp
argument_list|()
argument_list|,
name|firstStart
argument_list|)
expr_stmt|;
name|latestEnd
operator|=
name|Math
operator|.
name|max
argument_list|(
name|sample
operator|.
name|getStopTimestamp
argument_list|()
argument_list|,
name|latestEnd
argument_list|)
expr_stmt|;
name|serviceTimes
index|[
name|it
index|]
operator|=
name|sample
operator|.
name|getServiceTime
argument_list|()
expr_stmt|;
name|latencies
index|[
name|it
index|]
operator|=
name|sample
operator|.
name|getLatency
argument_list|()
expr_stmt|;
name|it
operator|++
expr_stmt|;
block|}
name|metrics
operator|.
name|add
argument_list|(
operator|new
name|Metrics
argument_list|(
name|operationAndMetrics
operator|.
name|getKey
argument_list|()
argument_list|,
name|samples
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
parameter_list|(
name|r
parameter_list|)
lambda|->
name|r
operator|.
name|isSuccess
argument_list|()
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
name|samples
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
parameter_list|(
name|r
parameter_list|)
lambda|->
operator|!
name|r
operator|.
name|isSuccess
argument_list|()
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
comment|// throughput calculation is based on the total (Wall clock) time it took to generate all samples
name|calculateThroughput
argument_list|(
name|samples
operator|.
name|size
argument_list|()
argument_list|,
name|latestEnd
operator|-
name|firstStart
argument_list|)
argument_list|,
comment|// convert ns -> ms without losing precision
name|StatUtils
operator|.
name|percentile
argument_list|(
name|serviceTimes
argument_list|,
literal|50.0d
argument_list|)
operator|/
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toNanos
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|StatUtils
operator|.
name|percentile
argument_list|(
name|serviceTimes
argument_list|,
literal|90.0d
argument_list|)
operator|/
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toNanos
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|StatUtils
operator|.
name|percentile
argument_list|(
name|serviceTimes
argument_list|,
literal|95.0d
argument_list|)
operator|/
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toNanos
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|StatUtils
operator|.
name|percentile
argument_list|(
name|serviceTimes
argument_list|,
literal|99.0d
argument_list|)
operator|/
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toNanos
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|StatUtils
operator|.
name|percentile
argument_list|(
name|serviceTimes
argument_list|,
literal|99.9d
argument_list|)
operator|/
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toNanos
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|StatUtils
operator|.
name|percentile
argument_list|(
name|serviceTimes
argument_list|,
literal|99.99d
argument_list|)
operator|/
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toNanos
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|StatUtils
operator|.
name|percentile
argument_list|(
name|latencies
argument_list|,
literal|50.0d
argument_list|)
operator|/
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toNanos
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|StatUtils
operator|.
name|percentile
argument_list|(
name|latencies
argument_list|,
literal|90.0d
argument_list|)
operator|/
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toNanos
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|StatUtils
operator|.
name|percentile
argument_list|(
name|latencies
argument_list|,
literal|95.0d
argument_list|)
operator|/
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toNanos
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|StatUtils
operator|.
name|percentile
argument_list|(
name|latencies
argument_list|,
literal|99.0d
argument_list|)
operator|/
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toNanos
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|StatUtils
operator|.
name|percentile
argument_list|(
name|latencies
argument_list|,
literal|99.9d
argument_list|)
operator|/
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toNanos
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|StatUtils
operator|.
name|percentile
argument_list|(
name|latencies
argument_list|,
literal|99.99d
argument_list|)
operator|/
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toNanos
argument_list|(
literal|1L
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|metrics
return|;
block|}
DECL|method|calculateThroughput
specifier|private
specifier|static
name|double
name|calculateThroughput
parameter_list|(
name|int
name|sampleSize
parameter_list|,
name|double
name|duration
parameter_list|)
block|{
return|return
name|sampleSize
operator|*
operator|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|toNanos
argument_list|(
literal|1L
argument_list|)
operator|/
name|duration
operator|)
return|;
block|}
block|}
end_class

end_unit

