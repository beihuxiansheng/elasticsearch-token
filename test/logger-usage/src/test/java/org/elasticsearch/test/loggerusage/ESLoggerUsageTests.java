begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.loggerusage
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|loggerusage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Marker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|message
operator|.
name|ParameterizedMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|MessageSupplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|util
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressLoggerChecks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|loggerusage
operator|.
name|ESLoggerUsageChecker
operator|.
name|WrongLoggerUsage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThanOrEqualTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|lessThanOrEqualTo
import|;
end_import

begin_class
DECL|class|ESLoggerUsageTests
specifier|public
class|class
name|ESLoggerUsageTests
extends|extends
name|ESTestCase
block|{
DECL|method|testLoggerUsageChecks
specifier|public
name|void
name|testLoggerUsageChecks
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|Method
name|method
range|:
name|getClass
argument_list|()
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|method
operator|.
name|getDeclaringClass
argument_list|()
operator|.
name|equals
argument_list|(
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"check"
argument_list|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Checking logger usage for method {}"
argument_list|,
name|method
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|classInputStream
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|".class"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|WrongLoggerUsage
argument_list|>
name|errors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ESLoggerUsageChecker
operator|.
name|check
argument_list|(
name|errors
operator|::
name|add
argument_list|,
name|classInputStream
argument_list|,
name|m
lambda|->
name|m
operator|.
name|equals
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|m
operator|.
name|startsWith
argument_list|(
literal|"lambda$"
operator|+
name|method
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"checkFail"
argument_list|)
condition|)
block|{
name|assertFalse
argument_list|(
literal|"Expected "
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|" to have wrong Logger usage"
argument_list|,
name|errors
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"Method "
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|" has unexpected Logger usage errors: "
operator|+
name|errors
argument_list|,
name|errors
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|assertTrue
argument_list|(
literal|"only allow methods starting with test or check in this class"
argument_list|,
name|method
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testLoggerUsageCheckerCompatibilityWithLog4j2Logger
specifier|public
name|void
name|testLoggerUsageCheckerCompatibilityWithLog4j2Logger
parameter_list|()
throws|throws
name|NoSuchMethodException
block|{
for|for
control|(
name|Method
name|method
range|:
name|Logger
operator|.
name|class
operator|.
name|getMethods
argument_list|()
control|)
block|{
if|if
condition|(
name|ESLoggerUsageChecker
operator|.
name|LOGGER_METHODS
operator|.
name|contains
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|assertThat
argument_list|(
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|markerOffset
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|Marker
operator|.
name|class
argument_list|)
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|int
name|paramLength
init|=
name|method
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|-
name|markerOffset
decl_stmt|;
if|if
condition|(
name|method
operator|.
name|isVarArgs
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|paramLength
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
name|markerOffset
index|]
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
name|markerOffset
operator|+
literal|1
index|]
argument_list|,
name|Matchers
operator|.
expr|<
name|Class
argument_list|<
name|?
argument_list|>
operator|>
name|isOneOf
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|,
name|Supplier
index|[]
operator|.
expr|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertThat
argument_list|(
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
name|markerOffset
index|]
argument_list|,
name|Matchers
operator|.
expr|<
name|Class
argument_list|<
name|?
argument_list|>
operator|>
name|isOneOf
argument_list|(
name|Message
operator|.
name|class
argument_list|,
name|MessageSupplier
operator|.
name|class
argument_list|,
name|CharSequence
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Supplier
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|paramLength
operator|==
literal|2
condition|)
block|{
name|assertThat
argument_list|(
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
name|markerOffset
operator|+
literal|1
index|]
argument_list|,
name|Matchers
operator|.
expr|<
name|Class
argument_list|<
name|?
argument_list|>
operator|>
name|isOneOf
argument_list|(
name|Throwable
operator|.
name|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
name|markerOffset
operator|+
literal|1
index|]
operator|.
name|equals
argument_list|(
name|Object
operator|.
name|class
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
name|markerOffset
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|paramLength
operator|>
literal|2
condition|)
block|{
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
name|markerOffset
index|]
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|paramLength
argument_list|,
name|lessThanOrEqualTo
argument_list|(
literal|11
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|paramLength
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|method
operator|.
name|getParameterTypes
argument_list|()
index|[
name|markerOffset
operator|+
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
for|for
control|(
name|String
name|methodName
range|:
name|ESLoggerUsageChecker
operator|.
name|LOGGER_METHODS
control|)
block|{
name|assertEquals
argument_list|(
literal|48
argument_list|,
name|Stream
operator|.
name|of
argument_list|(
name|Logger
operator|.
name|class
operator|.
name|getMethods
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|m
lambda|->
name|methodName
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Constructor
argument_list|<
name|?
argument_list|>
name|constructor
range|:
name|ParameterizedMessage
operator|.
name|class
operator|.
name|getConstructors
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
name|constructor
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
argument_list|,
name|greaterThanOrEqualTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|constructor
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|constructor
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|1
index|]
argument_list|,
name|Matchers
operator|.
expr|<
name|Class
argument_list|<
name|?
argument_list|>
operator|>
name|isOneOf
argument_list|(
name|String
index|[]
operator|.
expr|class
argument_list|,
name|Object
index|[]
operator|.
expr|class
argument_list|,
name|Object
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|constructor
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
operator|>
literal|2
condition|)
block|{
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|constructor
operator|.
name|getParameterTypes
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|constructor
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
name|Object
operator|.
name|class
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|Object
operator|.
name|class
argument_list|,
name|constructor
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|Throwable
operator|.
name|class
argument_list|,
name|constructor
operator|.
name|getParameterTypes
argument_list|()
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|ParameterizedMessage
operator|.
name|class
operator|.
name|getConstructors
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|checkNumberOfArguments1
specifier|public
name|void
name|checkNumberOfArguments1
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Hello {}"
argument_list|,
literal|"world"
argument_list|)
expr_stmt|;
block|}
DECL|method|checkFailNumberOfArguments1
specifier|public
name|void
name|checkFailNumberOfArguments1
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Hello {}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressLoggerChecks
argument_list|(
name|reason
operator|=
literal|"test ignore functionality"
argument_list|)
DECL|method|checkIgnoreWhenAnnotationPresent
specifier|public
name|void
name|checkIgnoreWhenAnnotationPresent
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Hello {}"
argument_list|)
expr_stmt|;
block|}
DECL|method|checkNumberOfArguments2
specifier|public
name|void
name|checkNumberOfArguments2
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Hello {}, {}, {}"
argument_list|,
literal|"world"
argument_list|,
literal|2
argument_list|,
literal|"third argument"
argument_list|)
expr_stmt|;
block|}
DECL|method|checkFailNumberOfArguments2
specifier|public
name|void
name|checkFailNumberOfArguments2
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Hello {}, {}"
argument_list|,
literal|"world"
argument_list|,
literal|2
argument_list|,
literal|"third argument"
argument_list|)
expr_stmt|;
block|}
DECL|method|checkNumberOfArguments3
specifier|public
name|void
name|checkNumberOfArguments3
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Hello {}, {}, {}, {}, {}, {}, {}"
argument_list|,
literal|"world"
argument_list|,
literal|2
argument_list|,
literal|"third argument"
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
operator|new
name|String
argument_list|(
literal|"last arg"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkFailNumberOfArguments3
specifier|public
name|void
name|checkFailNumberOfArguments3
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Hello {}, {}, {}, {}, {}, {}, {}"
argument_list|,
literal|"world"
argument_list|,
literal|2
argument_list|,
literal|"third argument"
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
operator|new
name|String
argument_list|(
literal|"last arg"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkNumberOfArgumentsParameterizedMessage1
specifier|public
name|void
name|checkNumberOfArgumentsParameterizedMessage1
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
operator|new
name|ParameterizedMessage
argument_list|(
literal|"Hello {}, {}, {}"
argument_list|,
literal|"world"
argument_list|,
literal|2
argument_list|,
literal|"third argument"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkFailNumberOfArgumentsParameterizedMessage1
specifier|public
name|void
name|checkFailNumberOfArgumentsParameterizedMessage1
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
operator|new
name|ParameterizedMessage
argument_list|(
literal|"Hello {}, {}"
argument_list|,
literal|"world"
argument_list|,
literal|2
argument_list|,
literal|"third argument"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkNumberOfArgumentsParameterizedMessage2
specifier|public
name|void
name|checkNumberOfArgumentsParameterizedMessage2
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
operator|new
name|ParameterizedMessage
argument_list|(
literal|"Hello {}, {}"
argument_list|,
literal|"world"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkFailNumberOfArgumentsParameterizedMessage2
specifier|public
name|void
name|checkFailNumberOfArgumentsParameterizedMessage2
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
operator|new
name|ParameterizedMessage
argument_list|(
literal|"Hello {}, {}, {}"
argument_list|,
literal|"world"
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkNumberOfArgumentsParameterizedMessage3
specifier|public
name|void
name|checkNumberOfArgumentsParameterizedMessage3
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"Hello {}, {}, {}"
argument_list|,
literal|"world"
argument_list|,
literal|2
argument_list|,
literal|"third argument"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkFailNumberOfArgumentsParameterizedMessage3
specifier|public
name|void
name|checkFailNumberOfArgumentsParameterizedMessage3
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"Hello {}, {}"
argument_list|,
literal|"world"
argument_list|,
literal|2
argument_list|,
literal|"third argument"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkOrderOfExceptionArgument
specifier|public
name|void
name|checkOrderOfExceptionArgument
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Hello"
argument_list|,
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkOrderOfExceptionArgument1
specifier|public
name|void
name|checkOrderOfExceptionArgument1
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"Hello {}"
argument_list|,
literal|"world"
argument_list|)
argument_list|,
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkFailOrderOfExceptionArgument1
specifier|public
name|void
name|checkFailOrderOfExceptionArgument1
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Hello {}"
argument_list|,
literal|"world"
argument_list|,
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkOrderOfExceptionArgument2
specifier|public
name|void
name|checkOrderOfExceptionArgument2
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
literal|"Hello {}, {}"
argument_list|,
literal|"world"
argument_list|,
literal|42
argument_list|)
argument_list|,
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkFailOrderOfExceptionArgument2
specifier|public
name|void
name|checkFailOrderOfExceptionArgument2
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Hello {}, {}"
argument_list|,
literal|"world"
argument_list|,
literal|42
argument_list|,
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkNonConstantMessageWithZeroArguments
specifier|public
name|void
name|checkNonConstantMessageWithZeroArguments
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
name|b
argument_list|)
argument_list|,
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkFailNonConstantMessageWithArguments
specifier|public
name|void
name|checkFailNonConstantMessageWithArguments
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
call|(
name|Supplier
argument_list|<
name|?
argument_list|>
call|)
argument_list|()
operator|->
operator|new
name|ParameterizedMessage
argument_list|(
name|Boolean
operator|.
name|toString
argument_list|(
name|b
argument_list|)
argument_list|,
literal|42
argument_list|)
argument_list|,
operator|new
name|Exception
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|checkComplexUsage
specifier|public
name|void
name|checkComplexUsage
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Hello {}, {}"
decl_stmt|;
name|Object
index|[]
name|args
init|=
operator|new
name|Object
index|[]
block|{
literal|"world"
block|,
literal|42
block|}
decl_stmt|;
if|if
condition|(
name|b
condition|)
block|{
name|message
operator|=
literal|"also two args {}{}"
expr_stmt|;
name|args
operator|=
operator|new
name|Object
index|[]
block|{
literal|"world"
block|,
literal|43
block|}
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
name|message
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
DECL|method|checkFailComplexUsage1
specifier|public
name|void
name|checkFailComplexUsage1
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Hello {}, {}"
decl_stmt|;
name|Object
index|[]
name|args
init|=
operator|new
name|Object
index|[]
block|{
literal|"world"
block|,
literal|42
block|}
decl_stmt|;
if|if
condition|(
name|b
condition|)
block|{
name|message
operator|=
literal|"just one arg {}"
expr_stmt|;
name|args
operator|=
operator|new
name|Object
index|[]
block|{
literal|"world"
block|,
literal|43
block|}
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
name|message
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
DECL|method|checkFailComplexUsage2
specifier|public
name|void
name|checkFailComplexUsage2
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Hello {}, {}"
decl_stmt|;
name|Object
index|[]
name|args
init|=
operator|new
name|Object
index|[]
block|{
literal|"world"
block|,
literal|42
block|}
decl_stmt|;
if|if
condition|(
name|b
condition|)
block|{
name|message
operator|=
literal|"also two args {}{}"
expr_stmt|;
name|args
operator|=
operator|new
name|Object
index|[]
block|{
literal|"world"
block|,
literal|43
block|,
literal|"another argument"
block|}
expr_stmt|;
block|}
name|logger
operator|.
name|info
argument_list|(
name|message
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

