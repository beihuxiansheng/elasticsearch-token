begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.settings
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A mock implementation of secure settings for tests to use.  */
end_comment

begin_class
DECL|class|MockSecureSettings
specifier|public
class|class
name|MockSecureSettings
implements|implements
name|SecureSettings
block|{
DECL|field|secureStrings
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|SecureString
argument_list|>
name|secureStrings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|files
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|files
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|settingNames
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|settingNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|isLoaded
specifier|public
name|boolean
name|isLoaded
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|getSettingNames
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getSettingNames
parameter_list|()
block|{
return|return
name|settingNames
return|;
block|}
annotation|@
name|Override
DECL|method|getString
specifier|public
name|SecureString
name|getString
parameter_list|(
name|String
name|setting
parameter_list|)
block|{
return|return
name|secureStrings
operator|.
name|get
argument_list|(
name|setting
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFile
specifier|public
name|InputStream
name|getFile
parameter_list|(
name|String
name|setting
parameter_list|)
block|{
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|files
operator|.
name|get
argument_list|(
name|setting
argument_list|)
argument_list|)
return|;
block|}
DECL|method|setString
specifier|public
name|void
name|setString
parameter_list|(
name|String
name|setting
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|secureStrings
operator|.
name|put
argument_list|(
name|setting
argument_list|,
operator|new
name|SecureString
argument_list|(
name|value
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|settingNames
operator|.
name|add
argument_list|(
name|setting
argument_list|)
expr_stmt|;
block|}
DECL|method|setFile
specifier|public
name|void
name|setFile
parameter_list|(
name|String
name|setting
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
block|{
name|files
operator|.
name|put
argument_list|(
name|setting
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|settingNames
operator|.
name|add
argument_list|(
name|setting
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{}
block|}
end_class

end_unit

