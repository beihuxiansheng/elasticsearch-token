begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.cli
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|StreamsUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|isEmptyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_class
DECL|class|CliToolTestCase
specifier|public
specifier|abstract
class|class
name|CliToolTestCase
extends|extends
name|ESTestCase
block|{
annotation|@
name|Before
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"sets es.default.path.home during tests"
argument_list|)
DECL|method|setPathHome
specifier|public
name|void
name|setPathHome
parameter_list|()
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"es.default.path.home"
argument_list|,
name|createTempDir
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"clears es.default.path.home during tests"
argument_list|)
DECL|method|clearPathHome
specifier|public
name|void
name|clearPathHome
parameter_list|()
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"es.default.path.home"
argument_list|)
expr_stmt|;
block|}
DECL|method|args
specifier|public
specifier|static
name|String
index|[]
name|args
parameter_list|(
name|String
name|command
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Strings
operator|.
name|hasLength
argument_list|(
name|command
argument_list|)
condition|)
block|{
return|return
name|Strings
operator|.
name|EMPTY_ARRAY
return|;
block|}
return|return
name|command
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|)
return|;
block|}
DECL|method|assertTerminalOutputContainsHelpFile
specifier|public
specifier|static
name|void
name|assertTerminalOutputContainsHelpFile
parameter_list|(
name|MockTerminal
name|terminal
parameter_list|,
name|String
name|classPath
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|output
init|=
name|terminal
operator|.
name|getOutput
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|output
argument_list|,
name|not
argument_list|(
name|isEmptyString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|expectedDocs
init|=
name|StreamsUtils
operator|.
name|copyToStringFromClasspath
argument_list|(
name|classPath
argument_list|)
decl_stmt|;
comment|// convert to *nix newlines as MockTerminal used for tests also uses *nix newlines
name|expectedDocs
operator|=
name|expectedDocs
operator|.
name|replace
argument_list|(
literal|"\r\n"
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|output
argument_list|,
name|containsString
argument_list|(
name|expectedDocs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

