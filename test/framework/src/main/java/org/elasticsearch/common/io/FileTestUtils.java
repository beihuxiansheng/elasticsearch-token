begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.io
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipInputStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertFileExists
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_comment
comment|/** test helper methods for working with files */
end_comment

begin_class
DECL|class|FileTestUtils
specifier|public
class|class
name|FileTestUtils
block|{
comment|/**      * Check that a file contains a given String      * @param dir root dir for file      * @param filename relative path from root dir to file      * @param expected expected content (if null, we don't expect any file)      */
DECL|method|assertFileContent
specifier|public
specifier|static
name|void
name|assertFileContent
parameter_list|(
name|Path
name|dir
parameter_list|,
name|String
name|filename
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|Assert
operator|.
name|assertThat
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
name|dir
operator|.
name|resolve
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertThat
argument_list|(
literal|"file ["
operator|+
name|file
operator|+
literal|"] should not exist."
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|file
argument_list|)
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFileExists
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|String
name|fileContent
init|=
operator|new
name|String
argument_list|(
name|Files
operator|.
name|readAllBytes
argument_list|(
name|file
argument_list|)
argument_list|,
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
comment|// trim the string content to prevent different handling on windows vs. unix and CR chars...
name|Assert
operator|.
name|assertThat
argument_list|(
name|fileContent
operator|.
name|trim
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expected
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Unzip a zip file to a destination directory.  If the zip file does not exist, an IOException is thrown.      * If the destination directory does not exist, it will be created.      *      * @param zip      zip file to unzip      * @param destDir  directory to unzip the file to      * @param prefixToRemove  the (optional) prefix in the zip file path to remove when writing to the destination directory      * @throws IOException if zip file does not exist, or there was an error reading from the zip file or      *                     writing to the destination directory      */
DECL|method|unzip
specifier|public
specifier|static
name|void
name|unzip
parameter_list|(
specifier|final
name|Path
name|zip
parameter_list|,
specifier|final
name|Path
name|destDir
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|String
name|prefixToRemove
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|Files
operator|.
name|notExists
argument_list|(
name|zip
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"["
operator|+
name|zip
operator|+
literal|"] zip file must exist"
argument_list|)
throw|;
block|}
name|Files
operator|.
name|createDirectories
argument_list|(
name|destDir
argument_list|)
expr_stmt|;
try|try
init|(
name|ZipInputStream
name|zipInput
init|=
operator|new
name|ZipInputStream
argument_list|(
name|Files
operator|.
name|newInputStream
argument_list|(
name|zip
argument_list|)
argument_list|)
init|)
block|{
name|ZipEntry
name|entry
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|zipInput
operator|.
name|getNextEntry
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|entryPath
decl_stmt|;
if|if
condition|(
name|prefixToRemove
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|prefixToRemove
argument_list|)
condition|)
block|{
name|entryPath
operator|=
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
name|prefixToRemove
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"prefix not found: "
operator|+
name|prefixToRemove
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|entryPath
operator|=
name|entry
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Path
name|path
init|=
name|Paths
operator|.
name|get
argument_list|(
name|destDir
operator|.
name|toString
argument_list|()
argument_list|,
name|entryPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|Files
operator|.
name|createDirectories
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Files
operator|.
name|copy
argument_list|(
name|zipInput
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
name|zipInput
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

