begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.common.logging
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|Appender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LoggerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|AppenderRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|LoggerConfig
import|;
end_import

begin_class
DECL|class|TestLoggers
specifier|public
class|class
name|TestLoggers
block|{
DECL|method|addAppender
specifier|public
specifier|static
name|void
name|addAppender
parameter_list|(
specifier|final
name|Logger
name|logger
parameter_list|,
specifier|final
name|Appender
name|appender
parameter_list|)
block|{
specifier|final
name|LoggerContext
name|ctx
init|=
operator|(
name|LoggerContext
operator|)
name|LogManager
operator|.
name|getContext
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|config
init|=
name|ctx
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|config
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
name|LoggerConfig
name|loggerConfig
init|=
name|config
operator|.
name|getLoggerConfig
argument_list|(
name|logger
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|logger
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|loggerConfig
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|loggerConfig
operator|=
operator|new
name|LoggerConfig
argument_list|(
name|logger
operator|.
name|getName
argument_list|()
argument_list|,
name|logger
operator|.
name|getLevel
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|addLogger
argument_list|(
name|logger
operator|.
name|getName
argument_list|()
argument_list|,
name|loggerConfig
argument_list|)
expr_stmt|;
block|}
name|loggerConfig
operator|.
name|addAppender
argument_list|(
name|appender
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|updateLoggers
argument_list|()
expr_stmt|;
block|}
DECL|method|removeAppender
specifier|public
specifier|static
name|void
name|removeAppender
parameter_list|(
specifier|final
name|Logger
name|logger
parameter_list|,
specifier|final
name|Appender
name|appender
parameter_list|)
block|{
specifier|final
name|LoggerContext
name|ctx
init|=
operator|(
name|LoggerContext
operator|)
name|LogManager
operator|.
name|getContext
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|config
init|=
name|ctx
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|LoggerConfig
name|loggerConfig
init|=
name|config
operator|.
name|getLoggerConfig
argument_list|(
name|logger
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|logger
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|loggerConfig
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|loggerConfig
operator|=
operator|new
name|LoggerConfig
argument_list|(
name|logger
operator|.
name|getName
argument_list|()
argument_list|,
name|logger
operator|.
name|getLevel
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|addLogger
argument_list|(
name|logger
operator|.
name|getName
argument_list|()
argument_list|,
name|loggerConfig
argument_list|)
expr_stmt|;
block|}
name|loggerConfig
operator|.
name|removeAppender
argument_list|(
name|appender
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|updateLoggers
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

