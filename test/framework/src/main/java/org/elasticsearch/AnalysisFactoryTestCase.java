begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch
package|package
name|org
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|MapBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|ASCIIFoldingTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|ApostropheFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|ArabicNormalizationFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|ArabicStemTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|BrazilianStemTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|CJKBigramFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|CJKWidthFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|ClassicFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|ClassicTokenizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|CommonGramsTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|CzechStemTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|DecimalDigitFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|DelimitedPayloadTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|EdgeNGramTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|EdgeNGramTokenizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|ElisionTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|GermanNormalizationFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|GermanStemTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|HindiNormalizationFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|HtmlStripCharFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|HunspellTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|IndicNormalizationFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|KStemTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|KeepTypesFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|KeepWordFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|KeywordMarkerTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|KeywordTokenizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|LengthTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|LetterTokenizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|LimitTokenCountFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|LowerCaseTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|LowerCaseTokenizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|MappingCharFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|MultiTermAwareComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|NGramTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|NGramTokenizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|PathHierarchyTokenizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|PatternCaptureGroupTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|PatternReplaceCharFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|PatternReplaceTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|PatternTokenizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|PersianNormalizationFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|PorterStemTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|ReverseTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|ScandinavianFoldingFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|ScandinavianNormalizationFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|SerbianNormalizationFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|ShingleTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|SnowballTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|SoraniNormalizationFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|StandardTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|StandardTokenizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|StemmerOverrideTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|StemmerTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|StopTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|SynonymTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|ThaiTokenizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|TrimTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|TruncateTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|UAX29URLEmailTokenizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|UpperCaseTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|WhitespaceTokenizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|WordDelimiterTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|compound
operator|.
name|DictionaryCompoundWordTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|compound
operator|.
name|HyphenationCompoundWordTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**   * Alerts us if new analyzers are added to lucene, so we don't miss them.  *<p>  * If we don't want to expose one for a specific reason, just map it to Void.  * The deprecated ones can be mapped to Deprecated.class.  */
end_comment

begin_class
DECL|class|AnalysisFactoryTestCase
specifier|public
class|class
name|AnalysisFactoryTestCase
extends|extends
name|ESTestCase
block|{
DECL|field|KNOWN_TOKENIZERS
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|KNOWN_TOKENIZERS
init|=
operator|new
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
comment|// exposed in ES
operator|.
name|put
argument_list|(
literal|"classic"
argument_list|,
name|ClassicTokenizerFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"edgengram"
argument_list|,
name|EdgeNGramTokenizerFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"keyword"
argument_list|,
name|KeywordTokenizerFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"letter"
argument_list|,
name|LetterTokenizerFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"lowercase"
argument_list|,
name|LowerCaseTokenizerFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"ngram"
argument_list|,
name|NGramTokenizerFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"pathhierarchy"
argument_list|,
name|PathHierarchyTokenizerFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"pattern"
argument_list|,
name|PatternTokenizerFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"standard"
argument_list|,
name|StandardTokenizerFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"thai"
argument_list|,
name|ThaiTokenizerFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"uax29urlemail"
argument_list|,
name|UAX29URLEmailTokenizerFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"whitespace"
argument_list|,
name|WhitespaceTokenizerFactory
operator|.
name|class
argument_list|)
comment|// this one "seems to mess up offsets". probably shouldn't be a tokenizer...
operator|.
name|put
argument_list|(
literal|"wikipedia"
argument_list|,
name|Void
operator|.
name|class
argument_list|)
operator|.
name|immutableMap
argument_list|()
decl_stmt|;
DECL|field|KNOWN_TOKENFILTERS
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|KNOWN_TOKENFILTERS
init|=
operator|new
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
comment|// exposed in ES
operator|.
name|put
argument_list|(
literal|"apostrophe"
argument_list|,
name|ApostropheFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"arabicnormalization"
argument_list|,
name|ArabicNormalizationFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"arabicstem"
argument_list|,
name|ArabicStemTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"asciifolding"
argument_list|,
name|ASCIIFoldingTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"brazilianstem"
argument_list|,
name|BrazilianStemTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"bulgarianstem"
argument_list|,
name|StemmerTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"cjkbigram"
argument_list|,
name|CJKBigramFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"cjkwidth"
argument_list|,
name|CJKWidthFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"classic"
argument_list|,
name|ClassicFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"commongrams"
argument_list|,
name|CommonGramsTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"commongramsquery"
argument_list|,
name|CommonGramsTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"czechstem"
argument_list|,
name|CzechStemTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"decimaldigit"
argument_list|,
name|DecimalDigitFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"delimitedpayload"
argument_list|,
name|DelimitedPayloadTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"dictionarycompoundword"
argument_list|,
name|DictionaryCompoundWordTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"edgengram"
argument_list|,
name|EdgeNGramTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"elision"
argument_list|,
name|ElisionTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"englishminimalstem"
argument_list|,
name|StemmerTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"englishpossessive"
argument_list|,
name|StemmerTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"finnishlightstem"
argument_list|,
name|StemmerTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"frenchlightstem"
argument_list|,
name|StemmerTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"frenchminimalstem"
argument_list|,
name|StemmerTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"galicianminimalstem"
argument_list|,
name|StemmerTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"galicianstem"
argument_list|,
name|StemmerTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"germanstem"
argument_list|,
name|GermanStemTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"germanlightstem"
argument_list|,
name|StemmerTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"germanminimalstem"
argument_list|,
name|StemmerTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"germannormalization"
argument_list|,
name|GermanNormalizationFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"greeklowercase"
argument_list|,
name|LowerCaseTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"greekstem"
argument_list|,
name|StemmerTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"hindinormalization"
argument_list|,
name|HindiNormalizationFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"hindistem"
argument_list|,
name|StemmerTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"hungarianlightstem"
argument_list|,
name|StemmerTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"hunspellstem"
argument_list|,
name|HunspellTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"hyphenationcompoundword"
argument_list|,
name|HyphenationCompoundWordTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"indicnormalization"
argument_list|,
name|IndicNormalizationFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"irishlowercase"
argument_list|,
name|LowerCaseTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"indonesianstem"
argument_list|,
name|StemmerTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"italianlightstem"
argument_list|,
name|StemmerTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"keepword"
argument_list|,
name|KeepWordFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"keywordmarker"
argument_list|,
name|KeywordMarkerTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"kstem"
argument_list|,
name|KStemTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"latvianstem"
argument_list|,
name|StemmerTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"length"
argument_list|,
name|LengthTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"limittokencount"
argument_list|,
name|LimitTokenCountFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"lowercase"
argument_list|,
name|LowerCaseTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"ngram"
argument_list|,
name|NGramTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"norwegianlightstem"
argument_list|,
name|StemmerTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"norwegianminimalstem"
argument_list|,
name|StemmerTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"patterncapturegroup"
argument_list|,
name|PatternCaptureGroupTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"patternreplace"
argument_list|,
name|PatternReplaceTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"persiannormalization"
argument_list|,
name|PersianNormalizationFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"porterstem"
argument_list|,
name|PorterStemTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"portuguesestem"
argument_list|,
name|StemmerTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"portugueselightstem"
argument_list|,
name|StemmerTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"portugueseminimalstem"
argument_list|,
name|StemmerTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"reversestring"
argument_list|,
name|ReverseTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"russianlightstem"
argument_list|,
name|StemmerTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"scandinavianfolding"
argument_list|,
name|ScandinavianFoldingFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"scandinaviannormalization"
argument_list|,
name|ScandinavianNormalizationFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"serbiannormalization"
argument_list|,
name|SerbianNormalizationFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"shingle"
argument_list|,
name|ShingleTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"snowballporter"
argument_list|,
name|SnowballTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"soraninormalization"
argument_list|,
name|SoraniNormalizationFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"soranistem"
argument_list|,
name|StemmerTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"spanishlightstem"
argument_list|,
name|StemmerTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"standard"
argument_list|,
name|StandardTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"stemmeroverride"
argument_list|,
name|StemmerOverrideTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"stop"
argument_list|,
name|StopTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"swedishlightstem"
argument_list|,
name|StemmerTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"synonym"
argument_list|,
name|SynonymTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"trim"
argument_list|,
name|TrimTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"truncate"
argument_list|,
name|TruncateTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"turkishlowercase"
argument_list|,
name|LowerCaseTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|KeepTypesFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"uppercase"
argument_list|,
name|UpperCaseTokenFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"worddelimiter"
argument_list|,
name|WordDelimiterTokenFilterFactory
operator|.
name|class
argument_list|)
comment|// TODO: these tokenfilters are not yet exposed: useful?
comment|// suggest stop
operator|.
name|put
argument_list|(
literal|"suggeststop"
argument_list|,
name|Void
operator|.
name|class
argument_list|)
comment|// capitalizes tokens
operator|.
name|put
argument_list|(
literal|"capitalization"
argument_list|,
name|Void
operator|.
name|class
argument_list|)
comment|// like length filter (but codepoints)
operator|.
name|put
argument_list|(
literal|"codepointcount"
argument_list|,
name|Void
operator|.
name|class
argument_list|)
comment|// puts hyphenated words back together
operator|.
name|put
argument_list|(
literal|"hyphenatedwords"
argument_list|,
name|Void
operator|.
name|class
argument_list|)
comment|// repeats anything marked as keyword
operator|.
name|put
argument_list|(
literal|"keywordrepeat"
argument_list|,
name|Void
operator|.
name|class
argument_list|)
comment|// like limittokencount, but by offset
operator|.
name|put
argument_list|(
literal|"limittokenoffset"
argument_list|,
name|Void
operator|.
name|class
argument_list|)
comment|// like limittokencount, but by position
operator|.
name|put
argument_list|(
literal|"limittokenposition"
argument_list|,
name|Void
operator|.
name|class
argument_list|)
comment|// ???
operator|.
name|put
argument_list|(
literal|"numericpayload"
argument_list|,
name|Void
operator|.
name|class
argument_list|)
comment|// removes duplicates at the same position (this should be used by the existing factory)
operator|.
name|put
argument_list|(
literal|"removeduplicates"
argument_list|,
name|Void
operator|.
name|class
argument_list|)
comment|// ???
operator|.
name|put
argument_list|(
literal|"tokenoffsetpayload"
argument_list|,
name|Void
operator|.
name|class
argument_list|)
comment|// puts the type into the payload
operator|.
name|put
argument_list|(
literal|"typeaspayload"
argument_list|,
name|Void
operator|.
name|class
argument_list|)
comment|// fingerprint
operator|.
name|put
argument_list|(
literal|"fingerprint"
argument_list|,
name|Void
operator|.
name|class
argument_list|)
comment|// for tee-sinks
operator|.
name|put
argument_list|(
literal|"daterecognizer"
argument_list|,
name|Void
operator|.
name|class
argument_list|)
operator|.
name|immutableMap
argument_list|()
decl_stmt|;
DECL|field|KNOWN_CHARFILTERS
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|KNOWN_CHARFILTERS
init|=
operator|new
name|MapBuilder
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|()
comment|// exposed in ES
operator|.
name|put
argument_list|(
literal|"htmlstrip"
argument_list|,
name|HtmlStripCharFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"mapping"
argument_list|,
name|MappingCharFilterFactory
operator|.
name|class
argument_list|)
operator|.
name|put
argument_list|(
literal|"patternreplace"
argument_list|,
name|PatternReplaceCharFilterFactory
operator|.
name|class
argument_list|)
comment|// TODO: these charfilters are not yet exposed: useful?
comment|// handling of zwnj for persian
operator|.
name|put
argument_list|(
literal|"persian"
argument_list|,
name|Void
operator|.
name|class
argument_list|)
operator|.
name|immutableMap
argument_list|()
decl_stmt|;
DECL|method|getTokenizers
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getTokenizers
parameter_list|()
block|{
return|return
name|KNOWN_TOKENIZERS
return|;
block|}
DECL|method|getTokenFilters
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getTokenFilters
parameter_list|()
block|{
return|return
name|KNOWN_TOKENFILTERS
return|;
block|}
DECL|method|getCharFilters
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|getCharFilters
parameter_list|()
block|{
return|return
name|KNOWN_CHARFILTERS
return|;
block|}
DECL|method|testTokenizers
specifier|public
name|void
name|testTokenizers
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|missing
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|TokenizerFactory
operator|.
name|availableTokenizers
argument_list|()
argument_list|)
decl_stmt|;
name|missing
operator|.
name|removeAll
argument_list|(
name|getTokenizers
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"new tokenizers found, please update KNOWN_TOKENIZERS: "
operator|+
name|missing
operator|.
name|toString
argument_list|()
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testCharFilters
specifier|public
name|void
name|testCharFilters
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|missing
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|CharFilterFactory
operator|.
name|availableCharFilters
argument_list|()
argument_list|)
decl_stmt|;
name|missing
operator|.
name|removeAll
argument_list|(
name|getCharFilters
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"new charfilters found, please update KNOWN_CHARFILTERS: "
operator|+
name|missing
operator|.
name|toString
argument_list|()
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testTokenFilters
specifier|public
name|void
name|testTokenFilters
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|missing
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|TokenFilterFactory
operator|.
name|availableTokenFilters
argument_list|()
argument_list|)
decl_stmt|;
name|missing
operator|.
name|removeAll
argument_list|(
name|getTokenFilters
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"new tokenfilters found, please update KNOWN_TOKENFILTERS: "
operator|+
name|missing
operator|.
name|toString
argument_list|()
argument_list|,
name|missing
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiTermAware
specifier|public
name|void
name|testMultiTermAware
parameter_list|()
block|{
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|expected
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|entry
range|:
name|getTokenizers
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|MultiTermAwareComponent
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|TokenizerFactory
operator|.
name|lookupClass
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|expected
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|entry
range|:
name|getTokenFilters
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|MultiTermAwareComponent
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|TokenFilterFactory
operator|.
name|lookupClass
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|expected
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|entry
range|:
name|getCharFilters
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|MultiTermAwareComponent
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|CharFilterFactory
operator|.
name|lookupClass
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|expected
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|expected
operator|.
name|remove
argument_list|(
name|Void
operator|.
name|class
argument_list|)
expr_stmt|;
name|expected
operator|.
name|remove
argument_list|(
name|Deprecated
operator|.
name|class
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|actual
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
range|:
name|getTokenizers
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|MultiTermAwareComponent
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|actual
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
range|:
name|getTokenFilters
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|MultiTermAwareComponent
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|actual
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
range|:
name|getCharFilters
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|MultiTermAwareComponent
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|actual
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classesMissingMultiTermSupport
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|expected
argument_list|)
decl_stmt|;
name|classesMissingMultiTermSupport
operator|.
name|removeAll
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Classes are missing multi-term support: "
operator|+
name|classesMissingMultiTermSupport
argument_list|,
name|classesMissingMultiTermSupport
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|classesThatShouldNotHaveMultiTermSupport
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|actual
argument_list|)
decl_stmt|;
name|classesThatShouldNotHaveMultiTermSupport
operator|.
name|removeAll
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Classes should not have multi-term support: "
operator|+
name|classesThatShouldNotHaveMultiTermSupport
argument_list|,
name|classesThatShouldNotHaveMultiTermSupport
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

