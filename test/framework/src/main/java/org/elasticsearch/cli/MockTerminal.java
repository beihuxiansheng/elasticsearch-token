begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.cli
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|cli
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A terminal for tests which captures all output, and  * can be plugged with fake input.  */
end_comment

begin_class
DECL|class|MockTerminal
specifier|public
class|class
name|MockTerminal
extends|extends
name|Terminal
block|{
DECL|field|buffer
specifier|private
specifier|final
name|ByteArrayOutputStream
name|buffer
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
DECL|field|writer
specifier|private
specifier|final
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|buffer
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
comment|// A deque would be a perfect data structure for the FIFO queue of input values needed here. However,
comment|// to support the valid return value of readText being null (defined by Console), we need to be able
comment|// to store nulls. However, java the java Deque api does not allow nulls because it uses null as
comment|// a special return value from certain methods like peek(). So instead of deque, we use an array list here,
comment|// and keep track of the last position which was read. It means that we will hold onto all input
comment|// setup for the mock terminal during its lifetime, but this is normally a very small amount of data
comment|// so in reality it will not matter.
DECL|field|textInput
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|textInput
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|textIndex
specifier|private
name|int
name|textIndex
init|=
literal|0
decl_stmt|;
DECL|field|secretInput
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|secretInput
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|secretIndex
specifier|private
name|int
name|secretIndex
init|=
literal|0
decl_stmt|;
DECL|method|MockTerminal
specifier|public
name|MockTerminal
parameter_list|()
block|{
name|super
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
comment|// always *nix newlines for tests
block|}
annotation|@
name|Override
DECL|method|readText
specifier|public
name|String
name|readText
parameter_list|(
name|String
name|prompt
parameter_list|)
block|{
if|if
condition|(
name|textIndex
operator|>=
name|textInput
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No text input configured for prompt ["
operator|+
name|prompt
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|textInput
operator|.
name|get
argument_list|(
name|textIndex
operator|++
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|readSecret
specifier|public
name|char
index|[]
name|readSecret
parameter_list|(
name|String
name|prompt
parameter_list|)
block|{
if|if
condition|(
name|secretIndex
operator|>=
name|secretInput
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No secret input configured for prompt ["
operator|+
name|prompt
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|secretInput
operator|.
name|get
argument_list|(
name|secretIndex
operator|++
argument_list|)
operator|.
name|toCharArray
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getWriter
specifier|public
name|PrintWriter
name|getWriter
parameter_list|()
block|{
return|return
name|writer
return|;
block|}
comment|/** Adds an an input that will be return from {@link #readText(String)}. Values are read in FIFO order. */
DECL|method|addTextInput
specifier|public
name|void
name|addTextInput
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|textInput
operator|.
name|add
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
comment|/** Adds an an input that will be return from {@link #readText(String)}. Values are read in FIFO order. */
DECL|method|addSecretInput
specifier|public
name|void
name|addSecretInput
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|secretInput
operator|.
name|add
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
comment|/** Returns all output written to this terminal. */
DECL|method|getOutput
specifier|public
name|String
name|getOutput
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
return|return
name|buffer
operator|.
name|toString
argument_list|(
literal|"UTF-8"
argument_list|)
return|;
block|}
comment|/** Wipes the input and output. */
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|buffer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|textInput
operator|.
name|clear
argument_list|()
expr_stmt|;
name|secretInput
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

