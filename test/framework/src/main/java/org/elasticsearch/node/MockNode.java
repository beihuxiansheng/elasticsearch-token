begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.node
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|node
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|MockBigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|CircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|internal
operator|.
name|InternalSettingsPreparer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_comment
comment|/**  * A node for testing which allows:  *<ul>  *<li>Overriding Version.CURRENT</li>  *<li>Adding test plugins that exist on the classpath</li>  *</ul>  */
end_comment

begin_class
DECL|class|MockNode
specifier|public
class|class
name|MockNode
extends|extends
name|Node
block|{
DECL|field|mockBigArrays
specifier|private
specifier|final
name|boolean
name|mockBigArrays
decl_stmt|;
DECL|field|plugins
specifier|private
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|plugins
decl_stmt|;
DECL|method|MockNode
specifier|public
name|MockNode
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|classpathPlugins
parameter_list|)
block|{
name|super
argument_list|(
name|InternalSettingsPreparer
operator|.
name|prepareEnvironment
argument_list|(
name|settings
argument_list|,
literal|null
argument_list|)
argument_list|,
name|classpathPlugins
argument_list|)
expr_stmt|;
name|this
operator|.
name|plugins
operator|=
name|classpathPlugins
expr_stmt|;
name|this
operator|.
name|mockBigArrays
operator|=
name|classpathPlugins
operator|.
name|contains
argument_list|(
name|NodeMocksPlugin
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// if this plugin is present we mock bigarrays :)
block|}
DECL|method|getPlugins
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|getPlugins
parameter_list|()
block|{
return|return
name|plugins
return|;
block|}
annotation|@
name|Override
DECL|method|createBigArrays
specifier|protected
name|BigArrays
name|createBigArrays
parameter_list|(
name|Settings
name|settings
parameter_list|,
name|CircuitBreakerService
name|circuitBreakerService
parameter_list|)
block|{
if|if
condition|(
name|mockBigArrays
condition|)
block|{
return|return
operator|new
name|MockBigArrays
argument_list|(
name|settings
argument_list|,
name|circuitBreakerService
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|createBigArrays
argument_list|(
name|settings
argument_list|,
name|circuitBreakerService
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

