begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.bootstrap
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cli
operator|.
name|MockTerminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_class
DECL|class|ESElasticsearchCliTestCase
specifier|abstract
class|class
name|ESElasticsearchCliTestCase
extends|extends
name|ESTestCase
block|{
DECL|interface|InitConsumer
interface|interface
name|InitConsumer
block|{
DECL|method|accept
name|void
name|accept
parameter_list|(
specifier|final
name|boolean
name|foreground
parameter_list|,
specifier|final
name|Path
name|pidFile
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|esSettings
parameter_list|)
function_decl|;
block|}
DECL|method|runTest
name|void
name|runTest
parameter_list|(
specifier|final
name|int
name|expectedStatus
parameter_list|,
specifier|final
name|boolean
name|expectedInit
parameter_list|,
specifier|final
name|Consumer
argument_list|<
name|String
argument_list|>
name|outputConsumer
parameter_list|,
specifier|final
name|InitConsumer
name|initConsumer
parameter_list|,
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|MockTerminal
name|terminal
init|=
operator|new
name|MockTerminal
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|AtomicBoolean
name|init
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|int
name|status
init|=
name|Elasticsearch
operator|.
name|main
argument_list|(
name|args
argument_list|,
operator|new
name|Elasticsearch
argument_list|()
block|{
annotation|@
name|Override
name|void
name|init
parameter_list|(
specifier|final
name|boolean
name|daemonize
parameter_list|,
specifier|final
name|Path
name|pidFile
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|esSettings
parameter_list|)
block|{
name|init
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|initConsumer
operator|.
name|accept
argument_list|(
operator|!
name|daemonize
argument_list|,
name|pidFile
argument_list|,
name|esSettings
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|,
name|terminal
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|status
argument_list|,
name|equalTo
argument_list|(
name|expectedStatus
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|init
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|expectedInit
argument_list|)
argument_list|)
expr_stmt|;
name|outputConsumer
operator|.
name|accept
argument_list|(
name|terminal
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// if an unexpected exception is thrown, we log
comment|// terminal output to aid debugging
name|logger
operator|.
name|info
argument_list|(
name|terminal
operator|.
name|getOutput
argument_list|()
argument_list|)
expr_stmt|;
comment|// rethrow so the test fails
throw|throw
name|e
throw|;
block|}
block|}
block|}
end_class

end_unit

