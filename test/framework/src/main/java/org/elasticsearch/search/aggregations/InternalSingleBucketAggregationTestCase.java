begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search.aggregations
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|action
operator|.
name|search
operator|.
name|RestSearchAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|InternalSingleBucketAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|bucket
operator|.
name|ParsedSingleBucketAggregation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|max
operator|.
name|InternalMax
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|metrics
operator|.
name|min
operator|.
name|InternalMin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|aggregations
operator|.
name|pipeline
operator|.
name|PipelineAggregator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalAggregationTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
operator|.
name|toXContent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertToXContentEquivalent
import|;
end_import

begin_class
DECL|class|InternalSingleBucketAggregationTestCase
specifier|public
specifier|abstract
class|class
name|InternalSingleBucketAggregationTestCase
parameter_list|<
name|T
extends|extends
name|InternalSingleBucketAggregation
parameter_list|>
extends|extends
name|InternalAggregationTestCase
argument_list|<
name|T
argument_list|>
block|{
DECL|field|hasInternalMax
specifier|private
name|boolean
name|hasInternalMax
decl_stmt|;
DECL|field|hasInternalMin
specifier|private
name|boolean
name|hasInternalMin
decl_stmt|;
DECL|field|subAggregationsSupplier
specifier|public
name|Supplier
argument_list|<
name|InternalAggregations
argument_list|>
name|subAggregationsSupplier
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|hasInternalMax
operator|=
name|randomBoolean
argument_list|()
expr_stmt|;
name|hasInternalMin
operator|=
name|randomBoolean
argument_list|()
expr_stmt|;
name|subAggregationsSupplier
operator|=
parameter_list|()
lambda|->
block|{
name|List
argument_list|<
name|InternalAggregation
argument_list|>
name|aggs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasInternalMax
condition|)
block|{
name|aggs
operator|.
name|add
argument_list|(
operator|new
name|InternalMax
argument_list|(
literal|"max"
argument_list|,
name|randomDouble
argument_list|()
argument_list|,
name|randomNumericDocValueFormat
argument_list|()
argument_list|,
name|emptyList
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasInternalMin
condition|)
block|{
name|aggs
operator|.
name|add
argument_list|(
operator|new
name|InternalMin
argument_list|(
literal|"min"
argument_list|,
name|randomDouble
argument_list|()
argument_list|,
name|randomNumericDocValueFormat
argument_list|()
argument_list|,
name|emptyList
argument_list|()
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|InternalAggregations
argument_list|(
name|aggs
argument_list|)
return|;
block|}
expr_stmt|;
block|}
DECL|method|createTestInstance
specifier|protected
specifier|abstract
name|T
name|createTestInstance
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|docCount
parameter_list|,
name|InternalAggregations
name|aggregations
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
function_decl|;
DECL|method|extraAssertReduced
specifier|protected
specifier|abstract
name|void
name|extraAssertReduced
parameter_list|(
name|T
name|reduced
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|inputs
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|createTestInstance
specifier|protected
specifier|final
name|T
name|createTestInstance
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|PipelineAggregator
argument_list|>
name|pipelineAggregators
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metaData
parameter_list|)
block|{
comment|// we shouldn't use the full long range here since we sum doc count on reduce, and don't want to overflow the long range there
name|long
name|docCount
init|=
name|between
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
return|return
name|createTestInstance
argument_list|(
name|name
argument_list|,
name|docCount
argument_list|,
name|subAggregationsSupplier
operator|.
name|get
argument_list|()
argument_list|,
name|pipelineAggregators
argument_list|,
name|metaData
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|assertReduced
specifier|protected
specifier|final
name|void
name|assertReduced
parameter_list|(
name|T
name|reduced
parameter_list|,
name|List
argument_list|<
name|T
argument_list|>
name|inputs
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|inputs
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|InternalSingleBucketAggregation
operator|::
name|getDocCount
argument_list|)
operator|.
name|sum
argument_list|()
argument_list|,
name|reduced
operator|.
name|getDocCount
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasInternalMax
condition|)
block|{
name|double
name|expected
init|=
name|inputs
operator|.
name|stream
argument_list|()
operator|.
name|mapToDouble
argument_list|(
name|i
lambda|->
block|{
name|InternalMax
name|max
init|=
name|i
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"max"
argument_list|)
decl_stmt|;
return|return
name|max
operator|.
name|getValue
argument_list|()
return|;
block|}
argument_list|)
operator|.
name|max
argument_list|()
operator|.
name|getAsDouble
argument_list|()
decl_stmt|;
name|InternalMax
name|reducedMax
init|=
name|reduced
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"max"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|reducedMax
operator|.
name|getValue
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasInternalMin
condition|)
block|{
name|double
name|expected
init|=
name|inputs
operator|.
name|stream
argument_list|()
operator|.
name|mapToDouble
argument_list|(
name|i
lambda|->
block|{
name|InternalMin
name|min
init|=
name|i
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"min"
argument_list|)
decl_stmt|;
return|return
name|min
operator|.
name|getValue
argument_list|()
return|;
block|}
argument_list|)
operator|.
name|min
argument_list|()
operator|.
name|getAsDouble
argument_list|()
decl_stmt|;
name|InternalMin
name|reducedMin
init|=
name|reduced
operator|.
name|getAggregations
argument_list|()
operator|.
name|get
argument_list|(
literal|"min"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|reducedMin
operator|.
name|getValue
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|extraAssertReduced
argument_list|(
name|reduced
argument_list|,
name|inputs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|assertFromXContent
specifier|protected
name|void
name|assertFromXContent
parameter_list|(
name|T
name|aggregation
parameter_list|,
name|ParsedAggregation
name|parsedAggregation
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|parsedAggregation
operator|instanceof
name|ParsedSingleBucketAggregation
argument_list|)
expr_stmt|;
name|ParsedSingleBucketAggregation
name|parsed
init|=
operator|(
name|ParsedSingleBucketAggregation
operator|)
name|parsedAggregation
decl_stmt|;
name|assertEquals
argument_list|(
name|aggregation
operator|.
name|getDocCount
argument_list|()
argument_list|,
name|parsed
operator|.
name|getDocCount
argument_list|()
argument_list|)
expr_stmt|;
name|InternalAggregations
name|aggregations
init|=
name|aggregation
operator|.
name|getAggregations
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Aggregation
argument_list|>
name|expectedAggregations
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|expectedNumberOfAggregations
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Aggregation
name|expectedAggregation
range|:
name|aggregations
control|)
block|{
comment|// since we shuffle xContent, we cannot rely on the order of the original inner aggregations for comparison
name|assertTrue
argument_list|(
name|expectedAggregation
operator|instanceof
name|InternalAggregation
argument_list|)
expr_stmt|;
name|expectedAggregations
operator|.
name|put
argument_list|(
name|expectedAggregation
operator|.
name|getName
argument_list|()
argument_list|,
name|expectedAggregation
argument_list|)
expr_stmt|;
name|expectedNumberOfAggregations
operator|++
expr_stmt|;
block|}
name|int
name|parsedNumberOfAggregations
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Aggregation
name|parsedAgg
range|:
name|parsed
operator|.
name|getAggregations
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|parsedAgg
operator|instanceof
name|ParsedAggregation
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expectedAggregations
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|parsedAgg
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Aggregation
name|expectedInternalAggregation
init|=
name|expectedAggregations
operator|.
name|get
argument_list|(
name|parsedAgg
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ToXContent
operator|.
name|Params
name|params
init|=
operator|new
name|ToXContent
operator|.
name|MapParams
argument_list|(
name|singletonMap
argument_list|(
name|RestSearchAction
operator|.
name|TYPED_KEYS_PARAM
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
name|BytesReference
name|expectedBytes
init|=
name|toXContent
argument_list|(
name|expectedInternalAggregation
argument_list|,
name|xContentType
argument_list|,
name|params
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|BytesReference
name|actualBytes
init|=
name|toXContent
argument_list|(
name|parsedAgg
argument_list|,
name|xContentType
argument_list|,
name|params
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertToXContentEquivalent
argument_list|(
name|expectedBytes
argument_list|,
name|actualBytes
argument_list|,
name|xContentType
argument_list|)
expr_stmt|;
name|parsedNumberOfAggregations
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expectedNumberOfAggregations
argument_list|,
name|parsedNumberOfAggregations
argument_list|)
expr_stmt|;
name|Class
argument_list|<
name|?
extends|extends
name|ParsedSingleBucketAggregation
argument_list|>
name|parsedClass
init|=
name|implementationClass
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|parsedClass
operator|!=
literal|null
operator|&&
name|parsedClass
operator|.
name|isInstance
argument_list|(
name|parsedAggregation
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|implementationClass
specifier|protected
specifier|abstract
name|Class
argument_list|<
name|?
extends|extends
name|ParsedSingleBucketAggregation
argument_list|>
name|implementationClass
parameter_list|()
function_decl|;
block|}
end_class

end_unit

