begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.repositories
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|repositories
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|blobstore
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_comment
comment|/**  * Generic test case for blob store implementation.  * These tests check basic blob store functionality.  */
end_comment

begin_class
DECL|class|ESBlobStoreTestCase
specifier|public
specifier|abstract
class|class
name|ESBlobStoreTestCase
extends|extends
name|ESTestCase
block|{
DECL|method|testContainerCreationAndDeletion
specifier|public
name|void
name|testContainerCreationAndDeletion
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
specifier|final
name|BlobStore
name|store
init|=
name|newBlobStore
argument_list|()
init|)
block|{
specifier|final
name|BlobContainer
name|containerFoo
init|=
name|store
operator|.
name|blobContainer
argument_list|(
operator|new
name|BlobPath
argument_list|()
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|BlobContainer
name|containerBar
init|=
name|store
operator|.
name|blobContainer
argument_list|(
operator|new
name|BlobPath
argument_list|()
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data1
init|=
name|randomBytes
argument_list|(
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|scaledRandomIntBetween
argument_list|(
literal|1024
argument_list|,
literal|1
operator|<<
literal|16
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data2
init|=
name|randomBytes
argument_list|(
name|randomIntBetween
argument_list|(
literal|10
argument_list|,
name|scaledRandomIntBetween
argument_list|(
literal|1024
argument_list|,
literal|1
operator|<<
literal|16
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|containerFoo
operator|.
name|writeBlob
argument_list|(
literal|"test"
argument_list|,
operator|new
name|BytesArray
argument_list|(
name|data1
argument_list|)
argument_list|)
expr_stmt|;
name|containerBar
operator|.
name|writeBlob
argument_list|(
literal|"test"
argument_list|,
operator|new
name|BytesArray
argument_list|(
name|data2
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|readBlobFully
argument_list|(
name|containerFoo
argument_list|,
literal|"test"
argument_list|,
name|data1
operator|.
name|length
argument_list|)
argument_list|,
name|data1
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|readBlobFully
argument_list|(
name|containerBar
argument_list|,
literal|"test"
argument_list|,
name|data2
operator|.
name|length
argument_list|)
argument_list|,
name|data2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|containerFoo
operator|.
name|blobExists
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|containerBar
operator|.
name|blobExists
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|delete
argument_list|(
operator|new
name|BlobPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|containerFoo
operator|.
name|blobExists
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|containerBar
operator|.
name|blobExists
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeRandomBlob
specifier|public
specifier|static
name|byte
index|[]
name|writeRandomBlob
parameter_list|(
name|BlobContainer
name|container
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
name|randomBytes
argument_list|(
name|length
argument_list|)
decl_stmt|;
name|container
operator|.
name|writeBlob
argument_list|(
name|name
argument_list|,
operator|new
name|BytesArray
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
DECL|method|readBlobFully
specifier|public
specifier|static
name|byte
index|[]
name|readBlobFully
parameter_list|(
name|BlobContainer
name|container
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
try|try
init|(
name|InputStream
name|inputStream
init|=
name|container
operator|.
name|readBlob
argument_list|(
name|name
argument_list|)
init|)
block|{
name|assertThat
argument_list|(
name|inputStream
operator|.
name|read
argument_list|(
name|data
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|inputStream
operator|.
name|read
argument_list|()
argument_list|,
name|equalTo
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
DECL|method|randomBytes
specifier|public
specifier|static
name|byte
index|[]
name|randomBytes
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|randomInt
argument_list|()
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
DECL|method|newBlobStore
specifier|protected
specifier|abstract
name|BlobStore
name|newBlobStore
parameter_list|()
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

