begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.plugins
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/** Utility methods for testing plugins */
end_comment

begin_class
DECL|class|PluginTestUtil
specifier|public
class|class
name|PluginTestUtil
block|{
comment|/** convenience method to write a plugin properties file */
DECL|method|writeProperties
specifier|public
specifier|static
name|void
name|writeProperties
parameter_list|(
name|Path
name|pluginDir
parameter_list|,
name|String
modifier|...
name|stringProps
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|stringProps
operator|.
name|length
operator|%
literal|2
operator|==
literal|0
assert|;
name|Files
operator|.
name|createDirectories
argument_list|(
name|pluginDir
argument_list|)
expr_stmt|;
name|Path
name|propertiesFile
init|=
name|pluginDir
operator|.
name|resolve
argument_list|(
name|PluginInfo
operator|.
name|ES_PLUGIN_PROPERTIES
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stringProps
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|properties
operator|.
name|put
argument_list|(
name|stringProps
index|[
name|i
index|]
argument_list|,
name|stringProps
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|OutputStream
name|out
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|propertiesFile
argument_list|)
init|)
block|{
name|properties
operator|.
name|store
argument_list|(
name|out
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

