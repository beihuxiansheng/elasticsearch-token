begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index.shard
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|hppc
operator|.
name|cursors
operator|.
name|ObjectObjectCursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|flush
operator|.
name|FlushRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MappingMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|RecoverySource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRoutingState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|TestShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|uid
operator|.
name|Versions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|LocalTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|MapperTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|VersionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|IndexCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|query
operator|.
name|DisabledQueryCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|engine
operator|.
name|Engine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldDataCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldDataService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|SourceToParse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Uid
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|UidFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|seqno
operator|.
name|SequenceNumbersService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|similarity
operator|.
name|SimilarityService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|DirectoryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|store
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|NoneCircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|fielddata
operator|.
name|cache
operator|.
name|IndicesFieldDataCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|PeerRecoveryTargetService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoveryFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoverySourceHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoveryState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|RecoveryTarget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|recovery
operator|.
name|StartRecoveryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|DummyShardLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|TestThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|contains
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasSize
import|;
end_import

begin_comment
comment|/**  * A base class for unit tests that need to create and shutdown {@link IndexShard} instances easily,  * containing utilities for shard creation and recoveries. See {{@link #newShard(boolean)}} and  * {@link #newStartedShard()} for a good starting points  */
end_comment

begin_class
DECL|class|IndexShardTestCase
specifier|public
specifier|abstract
class|class
name|IndexShardTestCase
extends|extends
name|ESTestCase
block|{
DECL|field|recoveryListener
specifier|protected
specifier|static
specifier|final
name|PeerRecoveryTargetService
operator|.
name|RecoveryListener
name|recoveryListener
init|=
operator|new
name|PeerRecoveryTargetService
operator|.
name|RecoveryListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onRecoveryDone
parameter_list|(
name|RecoveryState
name|state
parameter_list|)
block|{          }
annotation|@
name|Override
specifier|public
name|void
name|onRecoveryFailure
parameter_list|(
name|RecoveryState
name|state
parameter_list|,
name|RecoveryFailedException
name|e
parameter_list|,
name|boolean
name|sendShardFailure
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
DECL|field|threadPool
specifier|protected
name|ThreadPool
name|threadPool
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|threadPool
operator|=
operator|new
name|TestThreadPool
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|ThreadPool
operator|.
name|terminate
argument_list|(
name|threadPool
argument_list|,
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createStore
specifier|private
name|Store
name|createStore
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|,
name|ShardPath
name|shardPath
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ShardId
name|shardId
init|=
name|shardPath
operator|.
name|getShardId
argument_list|()
decl_stmt|;
specifier|final
name|DirectoryService
name|directoryService
init|=
operator|new
name|DirectoryService
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Directory
name|newDirectory
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|newFSDirectory
argument_list|(
name|shardPath
operator|.
name|resolveIndex
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|throttleTimeInNanos
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
decl_stmt|;
return|return
operator|new
name|Store
argument_list|(
name|shardId
argument_list|,
name|indexSettings
argument_list|,
name|directoryService
argument_list|,
operator|new
name|DummyShardLock
argument_list|(
name|shardId
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * creates a new initializing shard. The shard will have its own unique data path.      *      * @param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica      *                (ready to recover from another shard)      */
DECL|method|newShard
specifier|protected
name|IndexShard
name|newShard
parameter_list|(
name|boolean
name|primary
parameter_list|)
throws|throws
name|IOException
block|{
name|ShardRouting
name|shardRouting
init|=
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
operator|new
name|ShardId
argument_list|(
literal|"index"
argument_list|,
literal|"_na_"
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|"n1"
argument_list|,
name|primary
argument_list|,
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|,
name|primary
condition|?
name|RecoverySource
operator|.
name|StoreRecoverySource
operator|.
name|EMPTY_STORE_INSTANCE
else|:
name|RecoverySource
operator|.
name|PeerRecoverySource
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
return|return
name|newShard
argument_list|(
name|shardRouting
argument_list|)
return|;
block|}
comment|/**      * creates a new initializing shard. The shard will have its own unique data path.      *      * @param shardRouting the {@link ShardRouting} to use for this shard      * @param listeners    an optional set of listeners to add to the shard      */
DECL|method|newShard
specifier|protected
name|IndexShard
name|newShard
parameter_list|(
name|ShardRouting
name|shardRouting
parameter_list|,
name|IndexingOperationListener
modifier|...
name|listeners
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|shardRouting
operator|.
name|initializing
argument_list|()
operator|:
name|shardRouting
assert|;
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
literal|0
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexMetaData
operator|.
name|Builder
name|metaData
init|=
name|IndexMetaData
operator|.
name|builder
argument_list|(
name|shardRouting
operator|.
name|getIndexName
argument_list|()
argument_list|)
operator|.
name|settings
argument_list|(
name|settings
argument_list|)
operator|.
name|primaryTerm
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
return|return
name|newShard
argument_list|(
name|shardRouting
argument_list|,
name|metaData
operator|.
name|build
argument_list|()
argument_list|,
name|listeners
argument_list|)
return|;
block|}
comment|/**      * creates a new initializing shard. The shard will have its own unique data path.      *      * @param shardId   the shard id to use      * @param primary   indicates whether to a primary shard (ready to recover from an empty store) or a replica      *                  (ready to recover from another shard)      * @param listeners an optional set of listeners to add to the shard      */
DECL|method|newShard
specifier|protected
name|IndexShard
name|newShard
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|boolean
name|primary
parameter_list|,
name|IndexingOperationListener
modifier|...
name|listeners
parameter_list|)
throws|throws
name|IOException
block|{
name|ShardRouting
name|shardRouting
init|=
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
name|shardId
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|5
argument_list|)
argument_list|,
name|primary
argument_list|,
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|,
name|primary
condition|?
name|RecoverySource
operator|.
name|StoreRecoverySource
operator|.
name|EMPTY_STORE_INSTANCE
else|:
name|RecoverySource
operator|.
name|PeerRecoverySource
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
return|return
name|newShard
argument_list|(
name|shardRouting
argument_list|,
name|listeners
argument_list|)
return|;
block|}
comment|/**      * creates a new initializing shard. The shard will will be put in its proper path under the      * supplied node id.      *      * @param shardId the shard id to use      * @param primary indicates whether to a primary shard (ready to recover from an empty store) or a replica      *                (ready to recover from another shard)      */
DECL|method|newShard
specifier|protected
name|IndexShard
name|newShard
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|boolean
name|primary
parameter_list|,
name|String
name|nodeId
parameter_list|,
name|IndexMetaData
name|indexMetaData
parameter_list|,
annotation|@
name|Nullable
name|IndexSearcherWrapper
name|searcherWrapper
parameter_list|)
throws|throws
name|IOException
block|{
name|ShardRouting
name|shardRouting
init|=
name|TestShardRouting
operator|.
name|newShardRouting
argument_list|(
name|shardId
argument_list|,
name|nodeId
argument_list|,
name|primary
argument_list|,
name|ShardRoutingState
operator|.
name|INITIALIZING
argument_list|,
name|primary
condition|?
name|RecoverySource
operator|.
name|StoreRecoverySource
operator|.
name|EMPTY_STORE_INSTANCE
else|:
name|RecoverySource
operator|.
name|PeerRecoverySource
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
return|return
name|newShard
argument_list|(
name|shardRouting
argument_list|,
name|indexMetaData
argument_list|,
name|searcherWrapper
argument_list|)
return|;
block|}
comment|/**      * creates a new initializing shard. The shard will will be put in its proper path under the      * current node id the shard is assigned to.      *      * @param routing       shard routing to use      * @param indexMetaData indexMetaData for the shard, including any mapping      * @param listeners     an optional set of listeners to add to the shard      */
DECL|method|newShard
specifier|protected
name|IndexShard
name|newShard
parameter_list|(
name|ShardRouting
name|routing
parameter_list|,
name|IndexMetaData
name|indexMetaData
parameter_list|,
name|IndexingOperationListener
modifier|...
name|listeners
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|newShard
argument_list|(
name|routing
argument_list|,
name|indexMetaData
argument_list|,
literal|null
argument_list|,
name|listeners
argument_list|)
return|;
block|}
comment|/**      * creates a new initializing shard. The shard will will be put in its proper path under the      * current node id the shard is assigned to.      *      * @param routing              shard routing to use      * @param indexMetaData        indexMetaData for the shard, including any mapping      * @param indexSearcherWrapper an optional wrapper to be used during searchers      * @param listeners            an optional set of listeners to add to the shard      */
DECL|method|newShard
specifier|protected
name|IndexShard
name|newShard
parameter_list|(
name|ShardRouting
name|routing
parameter_list|,
name|IndexMetaData
name|indexMetaData
parameter_list|,
annotation|@
name|Nullable
name|IndexSearcherWrapper
name|indexSearcherWrapper
parameter_list|,
name|IndexingOperationListener
modifier|...
name|listeners
parameter_list|)
throws|throws
name|IOException
block|{
comment|// add node id as name to settings for popper logging
specifier|final
name|ShardId
name|shardId
init|=
name|routing
operator|.
name|shardId
argument_list|()
decl_stmt|;
specifier|final
name|NodeEnvironment
operator|.
name|NodePath
name|nodePath
init|=
operator|new
name|NodeEnvironment
operator|.
name|NodePath
argument_list|(
name|createTempDir
argument_list|()
argument_list|)
decl_stmt|;
name|ShardPath
name|shardPath
init|=
operator|new
name|ShardPath
argument_list|(
literal|false
argument_list|,
name|nodePath
operator|.
name|resolve
argument_list|(
name|shardId
argument_list|)
argument_list|,
name|nodePath
operator|.
name|resolve
argument_list|(
name|shardId
argument_list|)
argument_list|,
name|shardId
argument_list|)
decl_stmt|;
return|return
name|newShard
argument_list|(
name|routing
argument_list|,
name|shardPath
argument_list|,
name|indexMetaData
argument_list|,
name|indexSearcherWrapper
argument_list|,
name|listeners
argument_list|)
return|;
block|}
comment|/**      * creates a new initializing shard.      *      * @param routing              shard routing to use      * @param shardPath            path to use for shard data      * @param indexMetaData        indexMetaData for the shard, including any mapping      * @param indexSearcherWrapper an optional wrapper to be used during searchers      * @param listeners            an optional set of listeners to add to the shard      */
DECL|method|newShard
specifier|protected
name|IndexShard
name|newShard
parameter_list|(
name|ShardRouting
name|routing
parameter_list|,
name|ShardPath
name|shardPath
parameter_list|,
name|IndexMetaData
name|indexMetaData
parameter_list|,
annotation|@
name|Nullable
name|IndexSearcherWrapper
name|indexSearcherWrapper
parameter_list|,
name|IndexingOperationListener
modifier|...
name|listeners
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Settings
name|nodeSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.name"
argument_list|,
name|routing
operator|.
name|currentNodeId
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|IndexSettings
name|indexSettings
init|=
operator|new
name|IndexSettings
argument_list|(
name|indexMetaData
argument_list|,
name|nodeSettings
argument_list|)
decl_stmt|;
specifier|final
name|IndexShard
name|indexShard
decl_stmt|;
specifier|final
name|Store
name|store
init|=
name|createStore
argument_list|(
name|indexSettings
argument_list|,
name|shardPath
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|IndexCache
name|indexCache
init|=
operator|new
name|IndexCache
argument_list|(
name|indexSettings
argument_list|,
operator|new
name|DisabledQueryCache
argument_list|(
name|indexSettings
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|MapperService
name|mapperService
init|=
name|MapperTestUtils
operator|.
name|newMapperService
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|indexSettings
operator|.
name|getSettings
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjectObjectCursor
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|typeMapping
range|:
name|indexMetaData
operator|.
name|getMappings
argument_list|()
control|)
block|{
name|mapperService
operator|.
name|merge
argument_list|(
name|typeMapping
operator|.
name|key
argument_list|,
name|typeMapping
operator|.
name|value
operator|.
name|source
argument_list|()
argument_list|,
name|MapperService
operator|.
name|MergeReason
operator|.
name|MAPPING_RECOVERY
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|SimilarityService
name|similarityService
init|=
operator|new
name|SimilarityService
argument_list|(
name|indexSettings
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|IndexEventListener
name|indexEventListener
init|=
operator|new
name|IndexEventListener
argument_list|()
block|{             }
decl_stmt|;
specifier|final
name|Engine
operator|.
name|Warmer
name|warmer
init|=
name|searcher
lambda|->
block|{             }
decl_stmt|;
name|IndicesFieldDataCache
name|indicesFieldDataCache
init|=
operator|new
name|IndicesFieldDataCache
argument_list|(
name|nodeSettings
argument_list|,
operator|new
name|IndexFieldDataCache
operator|.
name|Listener
argument_list|()
block|{             }
argument_list|)
decl_stmt|;
name|IndexFieldDataService
name|indexFieldDataService
init|=
operator|new
name|IndexFieldDataService
argument_list|(
name|indexSettings
argument_list|,
name|indicesFieldDataCache
argument_list|,
operator|new
name|NoneCircuitBreakerService
argument_list|()
argument_list|,
name|mapperService
argument_list|)
decl_stmt|;
name|indexShard
operator|=
operator|new
name|IndexShard
argument_list|(
name|routing
argument_list|,
name|indexSettings
argument_list|,
name|shardPath
argument_list|,
name|store
argument_list|,
name|indexCache
argument_list|,
name|mapperService
argument_list|,
name|similarityService
argument_list|,
name|indexFieldDataService
argument_list|,
literal|null
argument_list|,
name|indexEventListener
argument_list|,
name|indexSearcherWrapper
argument_list|,
name|threadPool
argument_list|,
name|BigArrays
operator|.
name|NON_RECYCLING_INSTANCE
argument_list|,
name|warmer
argument_list|,
parameter_list|()
lambda|->
block|{}
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|listeners
argument_list|)
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
operator|==
literal|false
condition|)
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|indexShard
return|;
block|}
comment|/**      * Takes an existing shard, closes it and and starts a new initialing shard at the same location      *      * @param listeners new listerns to use for the newly created shard      */
DECL|method|reinitShard
specifier|protected
name|IndexShard
name|reinitShard
parameter_list|(
name|IndexShard
name|current
parameter_list|,
name|IndexingOperationListener
modifier|...
name|listeners
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ShardRouting
name|shardRouting
init|=
name|current
operator|.
name|routingEntry
argument_list|()
decl_stmt|;
return|return
name|reinitShard
argument_list|(
name|current
argument_list|,
name|ShardRoutingHelper
operator|.
name|initWithSameId
argument_list|(
name|shardRouting
argument_list|,
name|shardRouting
operator|.
name|primary
argument_list|()
condition|?
name|RecoverySource
operator|.
name|StoreRecoverySource
operator|.
name|EXISTING_STORE_INSTANCE
else|:
name|RecoverySource
operator|.
name|PeerRecoverySource
operator|.
name|INSTANCE
argument_list|)
argument_list|,
name|listeners
argument_list|)
return|;
block|}
comment|/**      * Takes an existing shard, closes it and and starts a new initialing shard at the same location      *      * @param routing   the shard routing to use for the newly created shard.      * @param listeners new listerns to use for the newly created shard      */
DECL|method|reinitShard
specifier|protected
name|IndexShard
name|reinitShard
parameter_list|(
name|IndexShard
name|current
parameter_list|,
name|ShardRouting
name|routing
parameter_list|,
name|IndexingOperationListener
modifier|...
name|listeners
parameter_list|)
throws|throws
name|IOException
block|{
name|closeShards
argument_list|(
name|current
argument_list|)
expr_stmt|;
return|return
name|newShard
argument_list|(
name|routing
argument_list|,
name|current
operator|.
name|shardPath
argument_list|()
argument_list|,
name|current
operator|.
name|indexSettings
argument_list|()
operator|.
name|getIndexMetaData
argument_list|()
argument_list|,
literal|null
argument_list|,
name|listeners
argument_list|)
return|;
block|}
comment|/**      * creates a new empyu shard and starts it. The shard will be either a replica or a primary.      */
DECL|method|newStartedShard
specifier|protected
name|IndexShard
name|newStartedShard
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|newStartedShard
argument_list|(
name|randomBoolean
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * creates a new empty shard and starts it.      *      * @param primary controls whether the shard will be a primary or a replica.      */
DECL|method|newStartedShard
specifier|protected
name|IndexShard
name|newStartedShard
parameter_list|(
name|boolean
name|primary
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexShard
name|shard
init|=
name|newShard
argument_list|(
name|primary
argument_list|)
decl_stmt|;
if|if
condition|(
name|primary
condition|)
block|{
name|recoveryShardFromStore
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|recoveryEmptyReplica
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
return|return
name|shard
return|;
block|}
DECL|method|closeShards
specifier|protected
name|void
name|closeShards
parameter_list|(
name|IndexShard
modifier|...
name|shards
parameter_list|)
throws|throws
name|IOException
block|{
name|closeShards
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|shards
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|closeShards
specifier|protected
name|void
name|closeShards
parameter_list|(
name|Iterable
argument_list|<
name|IndexShard
argument_list|>
name|shards
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|IndexShard
name|shard
range|:
name|shards
control|)
block|{
if|if
condition|(
name|shard
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|shard
operator|.
name|close
argument_list|(
literal|"test"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|shard
operator|.
name|store
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|recoveryShardFromStore
specifier|protected
name|void
name|recoveryShardFromStore
parameter_list|(
name|IndexShard
name|primary
parameter_list|)
throws|throws
name|IOException
block|{
name|primary
operator|.
name|markAsRecovering
argument_list|(
literal|"store"
argument_list|,
operator|new
name|RecoveryState
argument_list|(
name|primary
operator|.
name|routingEntry
argument_list|()
argument_list|,
name|getFakeDiscoNode
argument_list|(
name|primary
operator|.
name|routingEntry
argument_list|()
operator|.
name|currentNodeId
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|primary
operator|.
name|recoverFromStore
argument_list|()
expr_stmt|;
name|primary
operator|.
name|updateRoutingEntry
argument_list|(
name|ShardRoutingHelper
operator|.
name|moveToStarted
argument_list|(
name|primary
operator|.
name|routingEntry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|recoveryEmptyReplica
specifier|protected
name|void
name|recoveryEmptyReplica
parameter_list|(
name|IndexShard
name|replica
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexShard
name|primary
init|=
literal|null
decl_stmt|;
try|try
block|{
name|primary
operator|=
name|newStartedShard
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|recoverReplica
argument_list|(
name|replica
argument_list|,
name|primary
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|closeShards
argument_list|(
name|primary
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getFakeDiscoNode
specifier|private
name|DiscoveryNode
name|getFakeDiscoNode
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
operator|new
name|DiscoveryNode
argument_list|(
name|id
argument_list|,
operator|new
name|LocalTransportAddress
argument_list|(
literal|"_fake_"
operator|+
name|id
argument_list|)
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
return|;
block|}
comment|/** recovers a replica from the given primary **/
DECL|method|recoverReplica
specifier|protected
name|void
name|recoverReplica
parameter_list|(
name|IndexShard
name|replica
parameter_list|,
name|IndexShard
name|primary
parameter_list|)
throws|throws
name|IOException
block|{
name|recoverReplica
argument_list|(
name|replica
argument_list|,
name|primary
argument_list|,
parameter_list|(
name|r
parameter_list|,
name|sourceNode
parameter_list|)
lambda|->
operator|new
name|RecoveryTarget
argument_list|(
name|r
argument_list|,
name|sourceNode
argument_list|,
name|recoveryListener
argument_list|,
name|version
lambda|->
block|{             }
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Recovers a replica from the give primary, allow the user to supply a custom recovery target.      * A typical usage of a custome recovery target is to assert things in the various stages of recovery      *      * @param markAsRecovering set to false if you have already marked the replica as recovering      */
DECL|method|recoverReplica
specifier|protected
name|void
name|recoverReplica
parameter_list|(
name|IndexShard
name|replica
parameter_list|,
name|IndexShard
name|primary
parameter_list|,
name|BiFunction
argument_list|<
name|IndexShard
argument_list|,
name|DiscoveryNode
argument_list|,
name|RecoveryTarget
argument_list|>
name|targetSupplier
parameter_list|,
name|boolean
name|markAsRecovering
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|DiscoveryNode
name|pNode
init|=
name|getFakeDiscoNode
argument_list|(
name|primary
operator|.
name|routingEntry
argument_list|()
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|DiscoveryNode
name|rNode
init|=
name|getFakeDiscoNode
argument_list|(
name|replica
operator|.
name|routingEntry
argument_list|()
operator|.
name|currentNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|markAsRecovering
condition|)
block|{
name|replica
operator|.
name|markAsRecovering
argument_list|(
literal|"remote"
argument_list|,
operator|new
name|RecoveryState
argument_list|(
name|replica
operator|.
name|routingEntry
argument_list|()
argument_list|,
name|pNode
argument_list|,
name|rNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|replica
operator|.
name|state
argument_list|()
argument_list|,
name|IndexShardState
operator|.
name|RECOVERING
argument_list|)
expr_stmt|;
block|}
name|replica
operator|.
name|prepareForIndexRecovery
argument_list|()
expr_stmt|;
name|RecoveryTarget
name|recoveryTarget
init|=
name|targetSupplier
operator|.
name|apply
argument_list|(
name|replica
argument_list|,
name|pNode
argument_list|)
decl_stmt|;
name|StartRecoveryRequest
name|request
init|=
operator|new
name|StartRecoveryRequest
argument_list|(
name|replica
operator|.
name|shardId
argument_list|()
argument_list|,
name|pNode
argument_list|,
name|rNode
argument_list|,
name|getMetadataSnapshotOrEmpty
argument_list|(
name|replica
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|RecoverySourceHandler
name|recovery
init|=
operator|new
name|RecoverySourceHandler
argument_list|(
name|primary
argument_list|,
name|recoveryTarget
argument_list|,
name|request
argument_list|,
parameter_list|()
lambda|->
literal|0L
argument_list|,
name|e
lambda|->
parameter_list|()
lambda|->
block|{         }
argument_list|,
operator|(
name|int
operator|)
name|ByteSizeUnit
operator|.
name|MB
operator|.
name|toKB
argument_list|(
literal|1
argument_list|)
argument_list|,
name|logger
argument_list|)
decl_stmt|;
name|recovery
operator|.
name|recoverToTarget
argument_list|()
expr_stmt|;
name|recoveryTarget
operator|.
name|markAsDone
argument_list|()
expr_stmt|;
name|replica
operator|.
name|updateRoutingEntry
argument_list|(
name|ShardRoutingHelper
operator|.
name|moveToStarted
argument_list|(
name|replica
operator|.
name|routingEntry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getMetadataSnapshotOrEmpty
specifier|private
name|Store
operator|.
name|MetadataSnapshot
name|getMetadataSnapshotOrEmpty
parameter_list|(
name|IndexShard
name|replica
parameter_list|)
throws|throws
name|IOException
block|{
name|Store
operator|.
name|MetadataSnapshot
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|replica
operator|.
name|snapshotStoreMetadata
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|e
parameter_list|)
block|{
comment|// OK!
name|result
operator|=
name|Store
operator|.
name|MetadataSnapshot
operator|.
name|EMPTY
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"failed read store, treating as empty"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|result
operator|=
name|Store
operator|.
name|MetadataSnapshot
operator|.
name|EMPTY
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getShardDocUIDs
specifier|protected
name|Set
argument_list|<
name|Uid
argument_list|>
name|getShardDocUIDs
parameter_list|(
specifier|final
name|IndexShard
name|shard
parameter_list|)
throws|throws
name|IOException
block|{
name|shard
operator|.
name|refresh
argument_list|(
literal|"get_uids"
argument_list|)
expr_stmt|;
try|try
init|(
name|Engine
operator|.
name|Searcher
name|searcher
init|=
name|shard
operator|.
name|acquireSearcher
argument_list|(
literal|"test"
argument_list|)
init|)
block|{
name|Set
argument_list|<
name|Uid
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|LeafReaderContext
name|leafContext
range|:
name|searcher
operator|.
name|reader
argument_list|()
operator|.
name|leaves
argument_list|()
control|)
block|{
name|LeafReader
name|reader
init|=
name|leafContext
operator|.
name|reader
argument_list|()
decl_stmt|;
name|Bits
name|liveDocs
init|=
name|reader
operator|.
name|getLiveDocs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reader
operator|.
name|maxDoc
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|liveDocs
operator|==
literal|null
operator|||
name|liveDocs
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|Document
name|uuid
init|=
name|reader
operator|.
name|document
argument_list|(
name|i
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|)
argument_list|)
decl_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|Uid
operator|.
name|createUid
argument_list|(
name|uuid
operator|.
name|get
argument_list|(
name|UidFieldMapper
operator|.
name|NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ids
return|;
block|}
block|}
DECL|method|assertDocCount
specifier|protected
name|void
name|assertDocCount
parameter_list|(
name|IndexShard
name|shard
parameter_list|,
name|int
name|docDount
parameter_list|)
throws|throws
name|IOException
block|{
name|assertThat
argument_list|(
name|getShardDocUIDs
argument_list|(
name|shard
argument_list|)
argument_list|,
name|hasSize
argument_list|(
name|docDount
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertDocs
specifier|protected
name|void
name|assertDocs
parameter_list|(
name|IndexShard
name|shard
parameter_list|,
name|Uid
modifier|...
name|uids
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Set
argument_list|<
name|Uid
argument_list|>
name|shardDocUIDs
init|=
name|getShardDocUIDs
argument_list|(
name|shard
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|shardDocUIDs
argument_list|,
name|contains
argument_list|(
name|uids
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|shardDocUIDs
argument_list|,
name|hasSize
argument_list|(
name|uids
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|indexDoc
specifier|protected
name|Engine
operator|.
name|Index
name|indexDoc
parameter_list|(
name|IndexShard
name|shard
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|)
block|{
return|return
name|indexDoc
argument_list|(
name|shard
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
literal|"{}"
argument_list|)
return|;
block|}
DECL|method|indexDoc
specifier|protected
name|Engine
operator|.
name|Index
name|indexDoc
parameter_list|(
name|IndexShard
name|shard
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|source
parameter_list|)
block|{
specifier|final
name|Engine
operator|.
name|Index
name|index
decl_stmt|;
if|if
condition|(
name|shard
operator|.
name|routingEntry
argument_list|()
operator|.
name|primary
argument_list|()
condition|)
block|{
name|index
operator|=
name|shard
operator|.
name|prepareIndexOnPrimary
argument_list|(
name|SourceToParse
operator|.
name|source
argument_list|(
name|SourceToParse
operator|.
name|Origin
operator|.
name|PRIMARY
argument_list|,
name|shard
operator|.
name|shardId
argument_list|()
operator|.
name|getIndexName
argument_list|()
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
operator|new
name|BytesArray
argument_list|(
name|source
argument_list|)
argument_list|)
argument_list|,
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|,
name|IndexRequest
operator|.
name|UNSET_AUTO_GENERATED_TIMESTAMP
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|index
operator|=
name|shard
operator|.
name|prepareIndexOnReplica
argument_list|(
name|SourceToParse
operator|.
name|source
argument_list|(
name|SourceToParse
operator|.
name|Origin
operator|.
name|PRIMARY
argument_list|,
name|shard
operator|.
name|shardId
argument_list|()
operator|.
name|getIndexName
argument_list|()
argument_list|,
name|type
argument_list|,
name|id
argument_list|,
operator|new
name|BytesArray
argument_list|(
name|source
argument_list|)
argument_list|)
argument_list|,
name|SequenceNumbersService
operator|.
name|UNASSIGNED_SEQ_NO
argument_list|,
literal|1
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|,
name|IndexRequest
operator|.
name|UNSET_AUTO_GENERATED_TIMESTAMP
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|shard
operator|.
name|index
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|index
return|;
block|}
DECL|method|deleteDoc
specifier|protected
name|Engine
operator|.
name|Delete
name|deleteDoc
parameter_list|(
name|IndexShard
name|shard
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|)
block|{
specifier|final
name|Engine
operator|.
name|Delete
name|delete
decl_stmt|;
if|if
condition|(
name|shard
operator|.
name|routingEntry
argument_list|()
operator|.
name|primary
argument_list|()
condition|)
block|{
name|delete
operator|=
name|shard
operator|.
name|prepareDeleteOnPrimary
argument_list|(
name|type
argument_list|,
name|id
argument_list|,
name|Versions
operator|.
name|MATCH_ANY
argument_list|,
name|VersionType
operator|.
name|INTERNAL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|delete
operator|=
name|shard
operator|.
name|prepareDeleteOnPrimary
argument_list|(
name|type
argument_list|,
name|id
argument_list|,
literal|1
argument_list|,
name|VersionType
operator|.
name|EXTERNAL
argument_list|)
expr_stmt|;
block|}
name|shard
operator|.
name|delete
argument_list|(
name|delete
argument_list|)
expr_stmt|;
return|return
name|delete
return|;
block|}
DECL|method|flushShard
specifier|protected
name|void
name|flushShard
parameter_list|(
name|IndexShard
name|shard
parameter_list|)
block|{
name|flushShard
argument_list|(
name|shard
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|flushShard
specifier|protected
name|void
name|flushShard
parameter_list|(
name|IndexShard
name|shard
parameter_list|,
name|boolean
name|force
parameter_list|)
block|{
name|shard
operator|.
name|flush
argument_list|(
operator|new
name|FlushRequest
argument_list|(
name|shard
operator|.
name|shardId
argument_list|()
operator|.
name|getIndexName
argument_list|()
argument_list|)
operator|.
name|force
argument_list|(
name|force
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

