begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.index
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|index
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|AssertingDirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FilterDirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|SettingsModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|engine
operator|.
name|MockEngineFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|engine
operator|.
name|MockEngineSupport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_comment
comment|// this must exist in the same package as IndexModule to allow access to setting the impl
end_comment

begin_class
DECL|class|MockEngineFactoryPlugin
specifier|public
class|class
name|MockEngineFactoryPlugin
extends|extends
name|Plugin
block|{
DECL|field|readerWrapper
specifier|private
name|Class
argument_list|<
name|?
extends|extends
name|FilterDirectoryReader
argument_list|>
name|readerWrapper
init|=
name|AssertingDirectoryReader
operator|.
name|class
decl_stmt|;
DECL|method|onModule
specifier|public
name|void
name|onModule
parameter_list|(
name|SettingsModule
name|module
parameter_list|)
block|{
name|module
operator|.
name|registerSetting
argument_list|(
name|MockEngineSupport
operator|.
name|DISABLE_FLUSH_ON_CLOSE
argument_list|)
expr_stmt|;
name|module
operator|.
name|registerSetting
argument_list|(
name|MockEngineSupport
operator|.
name|WRAP_READER_RATIO
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onIndexModule
specifier|public
name|void
name|onIndexModule
parameter_list|(
name|IndexModule
name|module
parameter_list|)
block|{
name|module
operator|.
name|engineFactory
operator|.
name|set
argument_list|(
operator|new
name|MockEngineFactory
argument_list|(
name|readerWrapper
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nodeModules
specifier|public
name|Collection
argument_list|<
name|Module
argument_list|>
name|nodeModules
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|MockEngineReaderModule
argument_list|()
argument_list|)
return|;
block|}
DECL|class|MockEngineReaderModule
specifier|public
class|class
name|MockEngineReaderModule
extends|extends
name|AbstractModule
block|{
DECL|method|setReaderClass
specifier|public
name|void
name|setReaderClass
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|FilterDirectoryReader
argument_list|>
name|readerWrapper
parameter_list|)
block|{
name|MockEngineFactoryPlugin
operator|.
name|this
operator|.
name|readerWrapper
operator|=
name|readerWrapper
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|configure
specifier|protected
name|void
name|configure
parameter_list|()
block|{         }
block|}
block|}
end_class

end_unit

