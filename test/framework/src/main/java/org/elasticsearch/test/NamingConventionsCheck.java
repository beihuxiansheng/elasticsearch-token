begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileVisitResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileVisitor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|BasicFileAttributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|PathUtils
import|;
end_import

begin_comment
comment|/**  * Checks that all tests in a directory are named according to our naming conventions. This is important because tests that do not follow  * our conventions aren't run by gradle. This was once a glorious unit test but now that Elasticsearch is a multi-module project it must be  * a class with a main method so gradle can call it for each project. This has the advantage of allowing gradle to calculate when it is  * {@code UP-TO-DATE} so it can be skipped if the compiled classes haven't changed. This is useful on large modules for which checking all  * the modules can be slow.  *  * Annoyingly, this cannot be tested using standard unit tests because to do so you'd have to declare classes that violate the rules. That  * would cause the test fail which would prevent the build from passing. So we have to make a mechanism for removing those test classes. Now  * that we have such a mechanism it isn't much work to fail the process if we don't detect the offending classes. Thus, the funky  * {@code --self-test} that is only run in the test:framework project.  */
end_comment

begin_class
DECL|class|NamingConventionsCheck
specifier|public
class|class
name|NamingConventionsCheck
block|{
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|ClassNotFoundException
block|{
name|NamingConventionsCheck
name|check
init|=
operator|new
name|NamingConventionsCheck
argument_list|()
decl_stmt|;
name|boolean
name|skipIntegTestsInDisguise
init|=
literal|false
decl_stmt|;
name|boolean
name|selfTest
init|=
literal|false
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
name|args
index|[
name|i
index|]
condition|)
block|{
case|case
literal|"--skip-integ-tests-in-disguise"
case|:
name|skipIntegTestsInDisguise
operator|=
literal|true
expr_stmt|;
name|i
operator|++
expr_stmt|;
continue|continue;
case|case
literal|"--self-test"
case|:
name|selfTest
operator|=
literal|true
expr_stmt|;
name|i
operator|++
expr_stmt|;
continue|continue;
case|case
literal|"--"
case|:
name|i
operator|++
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|(
literal|"Expected -- before a path."
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|check
operator|.
name|check
argument_list|(
name|PathUtils
operator|.
name|get
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|selfTest
condition|)
block|{
name|assertViolation
argument_list|(
literal|"WrongName"
argument_list|,
name|check
operator|.
name|missingSuffix
argument_list|)
expr_stmt|;
name|assertViolation
argument_list|(
literal|"WrongNameTheSecond"
argument_list|,
name|check
operator|.
name|missingSuffix
argument_list|)
expr_stmt|;
name|assertViolation
argument_list|(
literal|"DummyAbstractTests"
argument_list|,
name|check
operator|.
name|notRunnable
argument_list|)
expr_stmt|;
name|assertViolation
argument_list|(
literal|"DummyInterfaceTests"
argument_list|,
name|check
operator|.
name|notRunnable
argument_list|)
expr_stmt|;
name|assertViolation
argument_list|(
literal|"InnerTests"
argument_list|,
name|check
operator|.
name|innerClasses
argument_list|)
expr_stmt|;
name|assertViolation
argument_list|(
literal|"NotImplementingTests"
argument_list|,
name|check
operator|.
name|notImplementing
argument_list|)
expr_stmt|;
name|assertViolation
argument_list|(
literal|"PlainUnit"
argument_list|,
name|check
operator|.
name|pureUnitTest
argument_list|)
expr_stmt|;
block|}
comment|// Now we should have no violations
name|assertNoViolations
argument_list|(
literal|"Not all subclasses of "
operator|+
name|ESTestCase
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" match the naming convention. Concrete classes must end with [Tests]"
argument_list|,
name|check
operator|.
name|missingSuffix
argument_list|)
expr_stmt|;
name|assertNoViolations
argument_list|(
literal|"Classes ending with [Tests] are abstract or interfaces"
argument_list|,
name|check
operator|.
name|notRunnable
argument_list|)
expr_stmt|;
name|assertNoViolations
argument_list|(
literal|"Found inner classes that are tests, which are excluded from the test runner"
argument_list|,
name|check
operator|.
name|innerClasses
argument_list|)
expr_stmt|;
name|String
name|classesToSubclass
init|=
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|ESTestCase
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|ESTestCase
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|ESTokenStreamTestCase
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|LuceneTestCase
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNoViolations
argument_list|(
literal|"Pure Unit-Test found must subclass one of ["
operator|+
name|classesToSubclass
operator|+
literal|"]"
argument_list|,
name|check
operator|.
name|pureUnitTest
argument_list|)
expr_stmt|;
name|assertNoViolations
argument_list|(
literal|"Classes ending with [Tests] must subclass ["
operator|+
name|classesToSubclass
operator|+
literal|"]"
argument_list|,
name|check
operator|.
name|notImplementing
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|skipIntegTestsInDisguise
condition|)
block|{
name|assertNoViolations
argument_list|(
literal|"Subclasses of ESIntegTestCase should end with IT as they are integration tests"
argument_list|,
name|check
operator|.
name|integTestsInDisguise
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|notImplementing
specifier|private
specifier|final
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|notImplementing
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|pureUnitTest
specifier|private
specifier|final
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|pureUnitTest
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|missingSuffix
specifier|private
specifier|final
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|missingSuffix
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|integTestsInDisguise
specifier|private
specifier|final
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|integTestsInDisguise
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|notRunnable
specifier|private
specifier|final
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|notRunnable
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|innerClasses
specifier|private
specifier|final
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|innerClasses
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|check
specifier|public
name|void
name|check
parameter_list|(
name|Path
name|rootPath
parameter_list|)
throws|throws
name|IOException
block|{
name|Files
operator|.
name|walkFileTree
argument_list|(
name|rootPath
argument_list|,
operator|new
name|FileVisitor
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
comment|/**              * The package name of the directory we are currently visiting. Kept as a string rather than something fancy because we load              * just about every class and doing so requires building a string out of it anyway. At least this way we don't need to build the              * first part of the string over and over and over again.              */
specifier|private
name|String
name|packageName
decl_stmt|;
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|preVisitDirectory
parameter_list|(
name|Path
name|dir
parameter_list|,
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
comment|// First we visit the root directory
if|if
condition|(
name|packageName
operator|==
literal|null
condition|)
block|{
comment|// And it package is empty string regardless of the directory name
name|packageName
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|packageName
operator|+=
name|dir
operator|.
name|getFileName
argument_list|()
operator|+
literal|"."
expr_stmt|;
block|}
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|postVisitDirectory
parameter_list|(
name|Path
name|dir
parameter_list|,
name|IOException
name|exc
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Go up one package by jumping back to the second to last '.'
name|packageName
operator|=
name|packageName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
operator|+
name|packageName
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|,
name|packageName
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|visitFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|filename
init|=
name|file
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|filename
operator|.
name|endsWith
argument_list|(
literal|".class"
argument_list|)
condition|)
block|{
name|String
name|className
init|=
name|filename
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|filename
operator|.
name|length
argument_list|()
operator|-
literal|".class"
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|loadClass
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"Tests"
argument_list|)
condition|)
block|{
if|if
condition|(
name|ESIntegTestCase
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|integTestsInDisguise
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|clazz
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|||
name|Modifier
operator|.
name|isInterface
argument_list|(
name|clazz
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|notRunnable
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isTestCase
argument_list|(
name|clazz
argument_list|)
operator|==
literal|false
condition|)
block|{
name|notImplementing
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Modifier
operator|.
name|isStatic
argument_list|(
name|clazz
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|innerClasses
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|clazz
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"IT"
argument_list|)
condition|)
block|{
if|if
condition|(
name|isTestCase
argument_list|(
name|clazz
argument_list|)
operator|==
literal|false
condition|)
block|{
name|notImplementing
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|clazz
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|==
literal|false
operator|&&
name|Modifier
operator|.
name|isInterface
argument_list|(
name|clazz
operator|.
name|getModifiers
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|isTestCase
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|missingSuffix
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|junit
operator|.
name|framework
operator|.
name|Test
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|pureUnitTest
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
specifier|private
name|boolean
name|isTestCase
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|LuceneTestCase
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
return|;
block|}
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|loadClass
parameter_list|(
name|String
name|className
parameter_list|)
block|{
try|try
block|{
return|return
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|loadClass
argument_list|(
name|packageName
operator|+
name|className
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|visitFileFailed
parameter_list|(
name|Path
name|file
parameter_list|,
name|IOException
name|exc
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
name|exc
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Fail the process if there are any violations in the set. Named to look like a junit assertion even though it isn't because it is      * similar enough.      */
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"System.err/System.exit"
argument_list|)
DECL|method|assertNoViolations
specifier|private
specifier|static
name|void
name|assertNoViolations
parameter_list|(
name|String
name|message
parameter_list|,
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|set
parameter_list|)
block|{
if|if
condition|(
literal|false
operator|==
name|set
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|message
operator|+
literal|":"
argument_list|)
expr_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|bad
range|:
name|set
control|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" * "
operator|+
name|bad
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Fail the process if we didn't detect a particular violation. Named to look like a junit assertion even though it isn't because it is      * similar enough.      */
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"System.err/System.exit"
argument_list|)
DECL|method|assertViolation
specifier|private
specifier|static
name|void
name|assertViolation
parameter_list|(
name|String
name|className
parameter_list|,
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|set
parameter_list|)
throws|throws
name|ClassNotFoundException
block|{
name|className
operator|=
literal|"org.elasticsearch.test.test.NamingConventionsCheckBadClasses$"
operator|+
name|className
expr_stmt|;
if|if
condition|(
literal|false
operator|==
name|set
operator|.
name|remove
argument_list|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error in NamingConventionsCheck! Expected ["
operator|+
name|className
operator|+
literal|"] to be a violation but wasn't."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Fail the process with the provided message.      */
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"System.err/System.exit"
argument_list|)
DECL|method|fail
specifier|private
specifier|static
name|void
name|fail
parameter_list|(
name|String
name|reason
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|reason
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

