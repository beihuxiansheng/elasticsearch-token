begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.rest.yaml
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|yaml
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpHead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_comment
comment|/**  * Response obtained from a REST call, eagerly reads the response body into a string for later optional parsing.  * Supports parsing the response body when needed and returning specific values extracted from it.  */
end_comment

begin_class
DECL|class|ClientYamlTestResponse
specifier|public
class|class
name|ClientYamlTestResponse
block|{
DECL|field|response
specifier|private
specifier|final
name|Response
name|response
decl_stmt|;
DECL|field|body
specifier|private
specifier|final
name|String
name|body
decl_stmt|;
DECL|field|parsedResponse
specifier|private
name|ObjectPath
name|parsedResponse
decl_stmt|;
DECL|method|ClientYamlTestResponse
name|ClientYamlTestResponse
parameter_list|(
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|getEntity
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|body
operator|=
name|EntityUtils
operator|.
name|toString
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|EntityUtils
operator|.
name|consumeQuietly
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|this
operator|.
name|body
operator|=
literal|null
expr_stmt|;
block|}
name|parseResponseBody
argument_list|()
expr_stmt|;
block|}
DECL|method|parseResponseBody
specifier|private
name|void
name|parseResponseBody
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|body
operator|!=
literal|null
condition|)
block|{
name|String
name|contentType
init|=
name|response
operator|.
name|getHeader
argument_list|(
literal|"Content-Type"
argument_list|)
decl_stmt|;
name|XContentType
name|xContentType
init|=
name|XContentType
operator|.
name|fromMediaTypeOrFormat
argument_list|(
name|contentType
argument_list|)
decl_stmt|;
comment|//skip parsing if we got text back (e.g. if we called _cat apis)
if|if
condition|(
name|xContentType
operator|==
name|XContentType
operator|.
name|JSON
operator|||
name|xContentType
operator|==
name|XContentType
operator|.
name|YAML
condition|)
block|{
name|this
operator|.
name|parsedResponse
operator|=
name|ObjectPath
operator|.
name|createFromXContent
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getStatusCode
specifier|public
name|int
name|getStatusCode
parameter_list|()
block|{
return|return
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
return|;
block|}
DECL|method|getReasonPhrase
specifier|public
name|String
name|getReasonPhrase
parameter_list|()
block|{
return|return
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getReasonPhrase
argument_list|()
return|;
block|}
comment|/**      * Returns the body properly parsed depending on the content type.      * Might be a string or a json object parsed as a map.      */
DECL|method|getBody
specifier|public
name|Object
name|getBody
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|parsedResponse
operator|!=
literal|null
condition|)
block|{
return|return
name|parsedResponse
operator|.
name|evaluate
argument_list|(
literal|""
argument_list|)
return|;
block|}
return|return
name|body
return|;
block|}
comment|/**      * Returns the body as a string      */
DECL|method|getBodyAsString
specifier|public
name|String
name|getBodyAsString
parameter_list|()
block|{
return|return
name|body
return|;
block|}
DECL|method|isError
specifier|public
name|boolean
name|isError
parameter_list|()
block|{
return|return
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
operator|>=
literal|400
return|;
block|}
comment|/**      * Parses the response body and extracts a specific value from it (identified by the provided path)      */
DECL|method|evaluate
specifier|public
name|Object
name|evaluate
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|evaluate
argument_list|(
name|path
argument_list|,
name|Stash
operator|.
name|EMPTY
argument_list|)
return|;
block|}
comment|/**      * Parses the response body and extracts a specific value from it (identified by the provided path)      */
DECL|method|evaluate
specifier|public
name|Object
name|evaluate
parameter_list|(
name|String
name|path
parameter_list|,
name|Stash
name|stash
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|response
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|parsedResponse
operator|==
literal|null
condition|)
block|{
comment|//special case: api that don't support body (e.g. exists) return true if 200, false if 404, even if no body
comment|//is_true: '' means the response had no body but the client returned true (caused by 200)
comment|//is_false: '' means the response had no body but the client returned false (caused by 404)
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|&&
name|HttpHead
operator|.
name|METHOD_NAME
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getRequestLine
argument_list|()
operator|.
name|getMethod
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|isError
argument_list|()
operator|==
literal|false
return|;
block|}
return|return
literal|null
return|;
block|}
return|return
name|parsedResponse
operator|.
name|evaluate
argument_list|(
name|path
argument_list|,
name|stash
argument_list|)
return|;
block|}
block|}
end_class

end_unit

