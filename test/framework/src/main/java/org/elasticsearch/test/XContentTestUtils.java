begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|NamedXContentRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|yaml
operator|.
name|ObjectPath
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomStrings
operator|.
name|randomAsciiOfLength
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
operator|.
name|EMPTY_PARAMS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
operator|.
name|createParser
import|;
end_import

begin_class
DECL|class|XContentTestUtils
specifier|public
specifier|final
class|class
name|XContentTestUtils
block|{
DECL|method|XContentTestUtils
specifier|private
name|XContentTestUtils
parameter_list|()
block|{      }
DECL|method|convertToMap
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|convertToMap
parameter_list|(
name|ToXContent
name|part
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|part
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|XContentHelper
operator|.
name|convertToMap
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|,
literal|false
argument_list|,
name|builder
operator|.
name|contentType
argument_list|()
argument_list|)
operator|.
name|v2
argument_list|()
return|;
block|}
comment|/**      * Compares to maps generated from XContentObjects. The order of elements in arrays is ignored.      *      * @return null if maps are equal or path to the element where the difference was found      */
DECL|method|differenceBetweenMapsIgnoringArrayOrder
specifier|public
specifier|static
name|String
name|differenceBetweenMapsIgnoringArrayOrder
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|first
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|second
parameter_list|)
block|{
return|return
name|differenceBetweenMapsIgnoringArrayOrder
argument_list|(
literal|""
argument_list|,
name|first
argument_list|,
name|second
argument_list|)
return|;
block|}
DECL|method|differenceBetweenMapsIgnoringArrayOrder
specifier|private
specifier|static
name|String
name|differenceBetweenMapsIgnoringArrayOrder
parameter_list|(
name|String
name|path
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|first
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|second
parameter_list|)
block|{
if|if
condition|(
name|first
operator|.
name|size
argument_list|()
operator|!=
name|second
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|path
operator|+
literal|": sizes of the maps don't match: "
operator|+
name|first
operator|.
name|size
argument_list|()
operator|+
literal|" != "
operator|+
name|second
operator|.
name|size
argument_list|()
return|;
block|}
for|for
control|(
name|String
name|key
range|:
name|first
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|reason
init|=
name|differenceBetweenObjectsIgnoringArrayOrder
argument_list|(
name|path
operator|+
literal|"/"
operator|+
name|key
argument_list|,
name|first
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|second
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|reason
operator|!=
literal|null
condition|)
block|{
return|return
name|reason
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|differenceBetweenObjectsIgnoringArrayOrder
specifier|private
specifier|static
name|String
name|differenceBetweenObjectsIgnoringArrayOrder
parameter_list|(
name|String
name|path
parameter_list|,
name|Object
name|first
parameter_list|,
name|Object
name|second
parameter_list|)
block|{
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|second
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|path
operator|+
literal|": first element is null, the second element is not null"
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|first
operator|instanceof
name|List
condition|)
block|{
if|if
condition|(
name|second
operator|instanceof
name|List
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|secondList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|second
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|firstList
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|first
decl_stmt|;
if|if
condition|(
name|firstList
operator|.
name|size
argument_list|()
operator|==
name|secondList
operator|.
name|size
argument_list|()
condition|)
block|{
name|String
name|reason
init|=
name|path
operator|+
literal|": no matches found"
decl_stmt|;
for|for
control|(
name|Object
name|firstObj
range|:
name|firstList
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Object
name|secondObj
range|:
name|secondList
control|)
block|{
name|reason
operator|=
name|differenceBetweenObjectsIgnoringArrayOrder
argument_list|(
name|path
operator|+
literal|"/*"
argument_list|,
name|firstObj
argument_list|,
name|secondObj
argument_list|)
expr_stmt|;
if|if
condition|(
name|reason
operator|==
literal|null
condition|)
block|{
name|secondList
operator|.
name|remove
argument_list|(
name|secondObj
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|found
operator|==
literal|false
condition|)
block|{
return|return
name|reason
return|;
block|}
block|}
if|if
condition|(
name|secondList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|path
operator|+
literal|": the second list is not empty"
return|;
block|}
block|}
else|else
block|{
return|return
name|path
operator|+
literal|": sizes of the arrays don't match: "
operator|+
name|firstList
operator|.
name|size
argument_list|()
operator|+
literal|" != "
operator|+
name|secondList
operator|.
name|size
argument_list|()
return|;
block|}
block|}
else|else
block|{
return|return
name|path
operator|+
literal|": the second element is not an array"
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|first
operator|instanceof
name|Map
condition|)
block|{
if|if
condition|(
name|second
operator|instanceof
name|Map
condition|)
block|{
return|return
name|differenceBetweenMapsIgnoringArrayOrder
argument_list|(
name|path
argument_list|,
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|first
argument_list|,
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|second
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|path
operator|+
literal|": the second element is not a map (got "
operator|+
name|second
operator|+
literal|")"
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|first
operator|.
name|equals
argument_list|(
name|second
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|path
operator|+
literal|": the elements don't match: ["
operator|+
name|first
operator|+
literal|"] != ["
operator|+
name|second
operator|+
literal|"]"
return|;
block|}
block|}
block|}
comment|/**      * This method takes the input xContent data and adds a random field value, inner object or array into each      * json object. This can e.g. be used to test if parsers that handle the resulting xContent can handle the      * augmented xContent correctly, for example when testing lenient parsing.      *      * If the xContent output contains objects that should be skipped of such treatment, an optional filtering      * {@link Predicate} can be supplied that checks xContent paths that should be excluded from this treatment.      *      * This predicate should check the xContent path that we want to insert to and return<tt>true</tt> if the      * path should be excluded. Paths are string concatenating field names and array indices, so e.g. in:      *      *<pre>      * {      *      "foo1 : {      *          "bar" : [      *              { ...Â },      *              { ... },      *              {      *                  "baz" : {      *                      // insert here      *                  }      *              }      *          ]      *      }      * }      *</pre>      *      * "foo1.bar.2.baz" would point to the desired insert location.      *      * To exclude inserting into the "foo1" object we would user a {@link Predicate} like      *<pre>      * {@code      *      (path) -> path.endsWith("foo1")      * }      *</pre>      *      * or if we don't want any random insertions in the "foo1" tree we could use      *<pre>      * {@code      *      (path) -> path.contains("foo1")      * }      *</pre>      */
DECL|method|insertRandomFields
specifier|public
specifier|static
name|BytesReference
name|insertRandomFields
parameter_list|(
name|XContentType
name|contentType
parameter_list|,
name|BytesReference
name|xContent
parameter_list|,
name|Predicate
argument_list|<
name|String
argument_list|>
name|excludeFilter
parameter_list|,
name|Random
name|random
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|insertPaths
decl_stmt|;
comment|// we can use NamedXContentRegistry.EMPTY here because we only traverse the xContent once and don't use it
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|NamedXContentRegistry
operator|.
name|EMPTY
argument_list|,
name|xContent
argument_list|,
name|contentType
argument_list|)
init|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|possiblePaths
init|=
name|XContentTestUtils
operator|.
name|getInsertPaths
argument_list|(
name|parser
argument_list|,
operator|new
name|Stack
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|excludeFilter
operator|==
literal|null
condition|)
block|{
name|insertPaths
operator|=
name|possiblePaths
expr_stmt|;
block|}
else|else
block|{
name|insertPaths
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|possiblePaths
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|excludeFilter
operator|.
name|negate
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|insertPaths
operator|::
name|add
argument_list|)
expr_stmt|;
block|}
block|}
name|Supplier
argument_list|<
name|Object
argument_list|>
name|value
init|=
parameter_list|()
lambda|->
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|randomValues
init|=
name|RandomObjects
operator|.
name|randomStoredFieldValues
argument_list|(
name|random
argument_list|,
name|contentType
argument_list|)
operator|.
name|v1
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
return|return
name|randomValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
return|return
name|randomValues
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|obj
lambda|->
name|randomAsciiOfLength
argument_list|(
name|random
argument_list|,
literal|10
argument_list|)
argument_list|,
name|obj
lambda|->
name|obj
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|randomValues
return|;
block|}
block|}
block|}
decl_stmt|;
return|return
name|XContentTestUtils
operator|.
name|insertIntoXContent
argument_list|(
name|contentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|xContent
argument_list|,
name|insertPaths
argument_list|,
parameter_list|()
lambda|->
name|randomAsciiOfLength
argument_list|(
name|random
argument_list|,
literal|10
argument_list|)
argument_list|,
name|value
argument_list|)
operator|.
name|bytes
argument_list|()
return|;
block|}
comment|/**      * This utility method takes an XContentParser and walks the xContent structure to find all      * possible paths to where a new object or array starts. This can be used in tests that add random      * xContent values to test parsing code for errors or to check their robustness against new fields.      *      * The path uses dot separated fieldnames and numbers for array indices, similar to what we do in      * {@link ObjectPath}.      *      * The {@link Stack} passed in should initially be empty, it gets pushed to by recursive calls      *      * As an example, the following json xContent:      *<pre>      *     {      *         "foo" : "bar",      *         "foo1" : [ 1, { "foo2" : "baz" }, 3, 4]      *         "foo3" : {      *             "foo4" : {      *                  "foo5": "buzz"      *             }      *         }      *     }      *</pre>      *      * Would return the following list:      *      *<ul>      *<li>"" (the empty string is the path to the root object)</li>      *<li>"foo1.1"</li>      *<li>"foo3</li>      *<li>"foo3.foo4</li>      *</ul>      */
DECL|method|getInsertPaths
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getInsertPaths
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|Stack
argument_list|<
name|String
argument_list|>
name|currentPath
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
operator|||
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
operator|:
literal|"should only be called when new objects or arrays start"
assert|;
name|List
argument_list|<
name|String
argument_list|>
name|validPaths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// parser.currentName() can be null for root object and unnamed objects in arrays
if|if
condition|(
name|parser
operator|.
name|currentName
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// dots in randomized field names need to be escaped, we use that character as the path separator
name|currentPath
operator|.
name|push
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\\\."
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|validPaths
operator|.
name|add
argument_list|(
name|String
operator|.
name|join
argument_list|(
literal|"."
argument_list|,
name|currentPath
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|currentPath
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
operator|||
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
name|validPaths
operator|.
name|addAll
argument_list|(
name|getInsertPaths
argument_list|(
name|parser
argument_list|,
name|currentPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
name|int
name|itemCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
if|if
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
operator|||
name|parser
operator|.
name|currentToken
argument_list|()
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
name|currentPath
operator|.
name|push
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|itemCount
argument_list|)
argument_list|)
expr_stmt|;
name|validPaths
operator|.
name|addAll
argument_list|(
name|getInsertPaths
argument_list|(
name|parser
argument_list|,
name|currentPath
argument_list|)
argument_list|)
expr_stmt|;
name|currentPath
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
name|itemCount
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|parser
operator|.
name|currentName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|currentPath
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
return|return
name|validPaths
return|;
block|}
comment|/**      * Inserts key/value pairs into xContent passed in as {@link BytesReference} and returns a new {@link XContentBuilder}      * The paths argument uses dot separated fieldnames and numbers for array indices, similar to what we do in      * {@link ObjectPath}.      * The key/value arguments can suppliers that either return fixed or random values.      */
DECL|method|insertIntoXContent
specifier|static
name|XContentBuilder
name|insertIntoXContent
parameter_list|(
name|XContent
name|xContent
parameter_list|,
name|BytesReference
name|original
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|,
name|Supplier
argument_list|<
name|String
argument_list|>
name|key
parameter_list|,
name|Supplier
argument_list|<
name|Object
argument_list|>
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|ObjectPath
name|object
init|=
name|ObjectPath
operator|.
name|createFromXContent
argument_list|(
name|xContent
argument_list|,
name|original
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|insertMap
init|=
name|object
operator|.
name|evaluate
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|insertMap
operator|.
name|put
argument_list|(
name|key
operator|.
name|get
argument_list|()
argument_list|,
name|value
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|object
operator|.
name|toXContentBuilder
argument_list|(
name|xContent
argument_list|)
return|;
block|}
block|}
end_class

end_unit

