begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|io
operator|.
name|JsonStringEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BoostQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanBoostQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|mapping
operator|.
name|put
operator|.
name|PutMappingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|PlainActionFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvectors
operator|.
name|MultiTermVectorsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|termvectors
operator|.
name|MultiTermVectorsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseFieldMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|compress
operator|.
name|CompressedXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|ModulesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|util
operator|.
name|Providers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableAwareStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|IndexScopedSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|SettingsModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|Fuzziness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|AnalysisService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|cache
operator|.
name|bitset
operator|.
name|BitsetFilterCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldDataCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|fielddata
operator|.
name|IndexFieldDataService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MapperService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|AbstractQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryRewriteContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|support
operator|.
name|QueryParsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|similarity
operator|.
name|SimilarityService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|AnalysisModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|CircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|breaker
operator|.
name|NoneCircuitBreakerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|fielddata
operator|.
name|cache
operator|.
name|IndicesFieldDataCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|mapper
operator|.
name|MapperRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|query
operator|.
name|IndicesQueriesRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|internal
operator|.
name|InternalSettingsPreparer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|MapperPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|PluginsService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|ScriptPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|SearchPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|either
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|not
import|;
end_import

begin_class
DECL|class|AbstractQueryTestCase
specifier|public
specifier|abstract
class|class
name|AbstractQueryTestCase
parameter_list|<
name|QB
extends|extends
name|AbstractQueryBuilder
parameter_list|<
name|QB
parameter_list|>
parameter_list|>
extends|extends
name|ESTestCase
block|{
DECL|field|STRING_FIELD_NAME
specifier|public
specifier|static
specifier|final
name|String
name|STRING_FIELD_NAME
init|=
literal|"mapped_string"
decl_stmt|;
DECL|field|STRING_FIELD_NAME_2
specifier|protected
specifier|static
specifier|final
name|String
name|STRING_FIELD_NAME_2
init|=
literal|"mapped_string_2"
decl_stmt|;
DECL|field|INT_FIELD_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|INT_FIELD_NAME
init|=
literal|"mapped_int"
decl_stmt|;
DECL|field|DOUBLE_FIELD_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|DOUBLE_FIELD_NAME
init|=
literal|"mapped_double"
decl_stmt|;
DECL|field|BOOLEAN_FIELD_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|BOOLEAN_FIELD_NAME
init|=
literal|"mapped_boolean"
decl_stmt|;
DECL|field|DATE_FIELD_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|DATE_FIELD_NAME
init|=
literal|"mapped_date"
decl_stmt|;
DECL|field|OBJECT_FIELD_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|OBJECT_FIELD_NAME
init|=
literal|"mapped_object"
decl_stmt|;
DECL|field|GEO_POINT_FIELD_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|GEO_POINT_FIELD_NAME
init|=
literal|"mapped_geo_point"
decl_stmt|;
DECL|field|LEGACY_GEO_POINT_FIELD_MAPPING
specifier|protected
specifier|static
specifier|final
name|String
name|LEGACY_GEO_POINT_FIELD_MAPPING
init|=
literal|"type=geo_point,lat_lon=true,geohash=true,geohash_prefix=true"
decl_stmt|;
DECL|field|GEO_SHAPE_FIELD_NAME
specifier|protected
specifier|static
specifier|final
name|String
name|GEO_SHAPE_FIELD_NAME
init|=
literal|"mapped_geo_shape"
decl_stmt|;
DECL|field|MAPPED_FIELD_NAMES
specifier|protected
specifier|static
specifier|final
name|String
index|[]
name|MAPPED_FIELD_NAMES
init|=
operator|new
name|String
index|[]
block|{
name|STRING_FIELD_NAME
block|,
name|INT_FIELD_NAME
block|,
name|DOUBLE_FIELD_NAME
block|,
name|BOOLEAN_FIELD_NAME
block|,
name|DATE_FIELD_NAME
block|,
name|OBJECT_FIELD_NAME
block|,
name|GEO_POINT_FIELD_NAME
block|,
name|GEO_SHAPE_FIELD_NAME
block|}
decl_stmt|;
DECL|field|MAPPED_LEAF_FIELD_NAMES
specifier|protected
specifier|static
specifier|final
name|String
index|[]
name|MAPPED_LEAF_FIELD_NAMES
init|=
operator|new
name|String
index|[]
block|{
name|STRING_FIELD_NAME
block|,
name|INT_FIELD_NAME
block|,
name|DOUBLE_FIELD_NAME
block|,
name|BOOLEAN_FIELD_NAME
block|,
name|DATE_FIELD_NAME
block|,
name|GEO_POINT_FIELD_NAME
block|}
decl_stmt|;
DECL|field|NUMBER_OF_TESTQUERIES
specifier|private
specifier|static
specifier|final
name|int
name|NUMBER_OF_TESTQUERIES
init|=
literal|20
decl_stmt|;
DECL|field|serviceHolder
specifier|private
specifier|static
name|ServiceHolder
name|serviceHolder
decl_stmt|;
DECL|field|queryNameId
specifier|private
specifier|static
name|int
name|queryNameId
init|=
literal|0
decl_stmt|;
DECL|field|nodeSettings
specifier|private
specifier|static
name|Settings
name|nodeSettings
decl_stmt|;
DECL|field|indexSettings
specifier|private
specifier|static
name|Settings
name|indexSettings
decl_stmt|;
DECL|field|index
specifier|private
specifier|static
name|Index
name|index
decl_stmt|;
DECL|field|currentTypes
specifier|private
specifier|static
name|String
index|[]
name|currentTypes
decl_stmt|;
DECL|field|randomTypes
specifier|private
specifier|static
name|String
index|[]
name|randomTypes
decl_stmt|;
DECL|method|getIndex
specifier|protected
specifier|static
name|Index
name|getIndex
parameter_list|()
block|{
return|return
name|index
return|;
block|}
DECL|method|getCurrentTypes
specifier|protected
specifier|static
name|String
index|[]
name|getCurrentTypes
parameter_list|()
block|{
return|return
name|currentTypes
return|;
block|}
DECL|method|getPlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|getPlugins
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
DECL|method|initializeAdditionalMappings
specifier|protected
name|void
name|initializeAdditionalMappings
parameter_list|(
name|MapperService
name|mapperService
parameter_list|)
throws|throws
name|IOException
block|{     }
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
block|{
comment|// we have to prefer CURRENT since with the range of versions we support it's rather unlikely to get the current actually.
name|Version
name|indexVersionCreated
init|=
name|randomBoolean
argument_list|()
condition|?
name|Version
operator|.
name|CURRENT
else|:
name|VersionUtils
operator|.
name|randomVersionBetween
argument_list|(
name|random
argument_list|()
argument_list|,
name|Version
operator|.
name|V_2_0_0_beta1
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
name|nodeSettings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"node.name"
argument_list|,
name|AbstractQueryTestCase
operator|.
name|class
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ScriptService
operator|.
name|SCRIPT_AUTO_RELOAD_ENABLED_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|indexSettings
operator|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|ParseFieldMatcher
operator|.
name|PARSE_STRICT
argument_list|,
literal|true
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|indexVersionCreated
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|index
operator|=
operator|new
name|Index
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|"_na_"
argument_list|)
expr_stmt|;
comment|//create some random type with some default field, those types will stick around for all of the subclasses
name|currentTypes
operator|=
operator|new
name|String
index|[
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|currentTypes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|type
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|currentTypes
index|[
name|i
index|]
operator|=
name|type
expr_stmt|;
block|}
comment|//set some random types to be queried as part the search request, before each test
name|randomTypes
operator|=
name|getRandomTypes
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|serviceHolder
argument_list|)
expr_stmt|;
name|serviceHolder
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|beforeTest
specifier|public
name|void
name|beforeTest
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|serviceHolder
operator|==
literal|null
condition|)
block|{
name|serviceHolder
operator|=
operator|new
name|ServiceHolder
argument_list|(
name|nodeSettings
argument_list|,
name|indexSettings
argument_list|,
name|getPlugins
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|serviceHolder
operator|.
name|clientInvocationHandler
operator|.
name|delegate
operator|=
name|this
expr_stmt|;
block|}
DECL|method|setSearchContext
specifier|private
specifier|static
name|void
name|setSearchContext
parameter_list|(
name|String
index|[]
name|types
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
block|{
name|TestSearchContext
name|testSearchContext
init|=
operator|new
name|TestSearchContext
argument_list|(
name|context
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|MapperService
name|mapperService
parameter_list|()
block|{
return|return
name|serviceHolder
operator|.
name|mapperService
return|;
comment|// need to build / parse inner hits sort fields
block|}
annotation|@
name|Override
specifier|public
name|IndexFieldDataService
name|fieldData
parameter_list|()
block|{
return|return
name|serviceHolder
operator|.
name|indexFieldDataService
return|;
comment|// need to build / parse inner hits sort fields
block|}
block|}
decl_stmt|;
name|testSearchContext
operator|.
name|getQueryShardContext
argument_list|()
operator|.
name|setTypes
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|SearchContext
operator|.
name|setCurrent
argument_list|(
name|testSearchContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|afterTest
specifier|public
name|void
name|afterTest
parameter_list|()
block|{
name|serviceHolder
operator|.
name|clientInvocationHandler
operator|.
name|delegate
operator|=
literal|null
expr_stmt|;
name|SearchContext
operator|.
name|removeCurrent
argument_list|()
expr_stmt|;
block|}
DECL|method|createTestQueryBuilder
specifier|public
specifier|final
name|QB
name|createTestQueryBuilder
parameter_list|()
block|{
name|QB
name|query
init|=
name|doCreateTestQueryBuilder
argument_list|()
decl_stmt|;
comment|//we should not set boost and query name for queries that don't parse it
if|if
condition|(
name|supportsBoostAndQueryName
argument_list|()
condition|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|query
operator|.
name|boost
argument_list|(
literal|2.0f
operator|/
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|query
operator|.
name|queryName
argument_list|(
name|createUniqueRandomName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|query
return|;
block|}
comment|/**      * make sure query names are unique by suffixing them with increasing counter      */
DECL|method|createUniqueRandomName
specifier|private
specifier|static
name|String
name|createUniqueRandomName
parameter_list|()
block|{
name|String
name|queryName
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
operator|+
name|queryNameId
decl_stmt|;
name|queryNameId
operator|++
expr_stmt|;
return|return
name|queryName
return|;
block|}
comment|/**      * Create the query that is being tested      */
DECL|method|doCreateTestQueryBuilder
specifier|protected
specifier|abstract
name|QB
name|doCreateTestQueryBuilder
parameter_list|()
function_decl|;
comment|/**      * Generic test that creates new query from the test query and checks both for equality      * and asserts equality on the two queries.      */
DECL|method|testFromXContent
specifier|public
name|void
name|testFromXContent
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|runs
init|=
literal|0
init|;
name|runs
operator|<
name|NUMBER_OF_TESTQUERIES
condition|;
name|runs
operator|++
control|)
block|{
name|QB
name|testQuery
init|=
name|createTestQueryBuilder
argument_list|()
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|toXContent
argument_list|(
name|testQuery
argument_list|,
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|XContentBuilder
name|shuffled
init|=
name|shuffleXContent
argument_list|(
name|builder
argument_list|,
name|shuffleProtectedFields
argument_list|()
argument_list|)
decl_stmt|;
name|assertParsedQuery
argument_list|(
name|shuffled
operator|.
name|bytes
argument_list|()
argument_list|,
name|testQuery
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|QB
argument_list|>
name|alternateVersion
range|:
name|getAlternateVersions
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|queryAsString
init|=
name|alternateVersion
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|assertParsedQuery
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|queryAsString
argument_list|)
argument_list|,
name|alternateVersion
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Subclasses can override this method and return an array of fieldnames which should be protected from      * recursive random shuffling in the {@link #testFromXContent()} test case      */
DECL|method|shuffleProtectedFields
specifier|protected
name|String
index|[]
name|shuffleProtectedFields
parameter_list|()
block|{
return|return
name|Strings
operator|.
name|EMPTY_ARRAY
return|;
block|}
DECL|method|toXContent
specifier|protected
specifier|static
name|XContentBuilder
name|toXContent
parameter_list|(
name|QueryBuilder
name|query
parameter_list|,
name|XContentType
name|contentType
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|contentType
argument_list|)
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|prettyPrint
argument_list|()
expr_stmt|;
block|}
name|query
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
comment|/**      * Test that unknown field trigger ParsingException.      * To find the right position in the root query, we add a marker as `queryName` which      * all query builders support. The added bogus field after that should trigger the exception.      * Queries that allow arbitrary field names at this level need to override this test.      */
DECL|method|testUnknownField
specifier|public
name|void
name|testUnknownField
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|marker
init|=
literal|"#marker#"
decl_stmt|;
name|QB
name|testQuery
decl_stmt|;
do|do
block|{
name|testQuery
operator|=
name|createTestQueryBuilder
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|testQuery
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|marker
argument_list|)
condition|)
do|;
name|testQuery
operator|.
name|queryName
argument_list|(
name|marker
argument_list|)
expr_stmt|;
comment|// to find root query to add additional bogus field there
name|String
name|queryAsString
init|=
name|testQuery
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\""
operator|+
name|marker
operator|+
literal|"\""
argument_list|,
literal|"\""
operator|+
name|marker
operator|+
literal|"\", \"bogusField\" : \"someValue\""
argument_list|)
decl_stmt|;
name|ParsingException
name|e
init|=
name|expectThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|parseQuery
argument_list|(
name|queryAsString
argument_list|)
argument_list|)
decl_stmt|;
comment|// we'd like to see the offending field name here
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"bogusField"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test that adding an additional object within each object of the otherwise correct query always triggers some kind of      * parse exception. Some specific objects do not cause any exception as they can hold arbitrary content; they can be      * declared by overriding {@link #getObjectsHoldingArbitraryContent()}.      */
DECL|method|testUnknownObjectException
specifier|public
specifier|final
name|void
name|testUnknownObjectException
parameter_list|()
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|candidates
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Adds the valid query to the list of queries to modify and test
name|candidates
operator|.
name|add
argument_list|(
name|createTestQueryBuilder
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Adds the alternates versions of the query too
name|candidates
operator|.
name|addAll
argument_list|(
name|getAlternateVersions
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|>
name|testQueries
init|=
name|alterateQueries
argument_list|(
name|candidates
argument_list|,
name|getObjectsHoldingArbitraryContent
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Tuple
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|testQuery
range|:
name|testQueries
control|)
block|{
name|boolean
name|expectedException
init|=
name|testQuery
operator|.
name|v2
argument_list|()
decl_stmt|;
try|try
block|{
name|parseQuery
argument_list|(
name|testQuery
operator|.
name|v1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedException
condition|)
block|{
name|fail
argument_list|(
literal|"some parsing exception expected for query: "
operator|+
name|testQuery
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|ParsingException
decl||
name|ElasticsearchParseException
name|e
parameter_list|)
block|{
comment|// different kinds of exception wordings depending on location
comment|// of mutation, so no simple asserts possible here
if|if
condition|(
name|expectedException
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unexpected exception when parsing query:\n"
operator|+
name|testQuery
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
if|if
condition|(
name|expectedException
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"unexpected exception when parsing query:\n"
operator|+
name|testQuery
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"unknown field [newField], parser not found"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Traverses the json tree of the valid query provided as argument and mutates it one or more times by adding one object within each      * object encountered.      *      * For instance given the following valid term query:      * {      *     "term" : {      *         "field" : {      *             "value" : "foo"      *         }      *     }      * }      *      * The following two mutations will be generated, and an exception is expected when trying to parse them:      * {      *     "term" : {      *         "newField" : {      *             "field" : {      *                 "value" : "foo"      *             }      *         }      *     }      * }      *      * {      *     "term" : {      *         "field" : {      *             "newField" : {      *                 "value" : "foo"      *             }      *         }      *     }      * }      *      * Every mutation is then added to the list of results with a boolean flag indicating if a parsing exception is expected or not      * for the mutation. Some specific objects do not cause any exception as they can hold arbitrary content; they are passed using the      * arbitraryMarkers parameter.      */
DECL|method|alterateQueries
specifier|static
name|List
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|>
name|alterateQueries
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|queries
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|arbitraryMarkers
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Indicate if a part of the query can hold any arbitrary content
name|boolean
name|hasArbitraryContent
init|=
operator|(
name|arbitraryMarkers
operator|!=
literal|null
operator|&&
name|arbitraryMarkers
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
operator|)
decl_stmt|;
for|for
control|(
name|String
name|query
range|:
name|queries
control|)
block|{
comment|// Track the number of query mutations
name|int
name|mutation
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|boolean
name|expectException
init|=
literal|true
decl_stmt|;
name|BytesStreamOutput
name|out
init|=
operator|new
name|BytesStreamOutput
argument_list|()
decl_stmt|;
try|try
init|(
name|XContentGenerator
name|generator
init|=
name|XContentType
operator|.
name|JSON
operator|.
name|xContent
argument_list|()
operator|.
name|createGenerator
argument_list|(
name|out
argument_list|)
init|;
name|XContentParser
name|parser
operator|=
name|XContentHelper
operator|.
name|createParser
argument_list|(
operator|new
name|BytesArray
argument_list|(
name|query
argument_list|)
argument_list|)
init|;
init|)
block|{
name|int
name|objectIndex
init|=
operator|-
literal|1
decl_stmt|;
name|Deque
argument_list|<
name|String
argument_list|>
name|levels
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Parse the valid query and inserts a new object level called "newField"
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
name|objectIndex
operator|++
expr_stmt|;
name|levels
operator|.
name|addLast
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|objectIndex
operator|==
name|mutation
condition|)
block|{
comment|// We reached the place in the object tree where we want to insert a new object level
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeFieldName
argument_list|(
literal|"newField"
argument_list|)
expr_stmt|;
name|XContentHelper
operator|.
name|copyCurrentStructure
argument_list|(
name|generator
argument_list|,
name|parser
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
if|if
condition|(
name|hasArbitraryContent
condition|)
block|{
comment|// The query has one or more fields that hold arbitrary content. If the current
comment|// field is one (or a child) of those, no exception is expected when parsing the mutated query.
for|for
control|(
name|String
name|marker
range|:
name|arbitraryMarkers
control|)
block|{
if|if
condition|(
name|levels
operator|.
name|contains
argument_list|(
name|marker
argument_list|)
condition|)
block|{
name|expectException
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|// Jump to next token
continue|continue;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
name|levels
operator|.
name|removeLast
argument_list|()
expr_stmt|;
block|}
comment|// We are walking through the object tree, so we can safely copy the current node
name|XContentHelper
operator|.
name|copyCurrentEvent
argument_list|(
name|generator
argument_list|,
name|parser
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|objectIndex
operator|<
name|mutation
condition|)
block|{
comment|// We did not reach the insertion point, there's no more mutations to try
break|break;
block|}
else|else
block|{
comment|// We reached the expected insertion point, so next time we'll try one step further
name|mutation
operator|++
expr_stmt|;
block|}
block|}
name|results
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|out
operator|.
name|bytes
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|expectException
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
comment|/**      * Returns a set of object names that won't trigger any exception (uncluding their children) when testing that unknown      * objects cause parse exceptions through {@link #testUnknownObjectException()}. Default is an empty set. Can be overridden      * by subclasses that test queries which contain objects that get parsed on the data nodes (e.g. score functions) or objects      * that can contain arbitrary content (e.g. documents for percolate or more like this query, params for scripts). In such      * cases no exception would get thrown.      */
DECL|method|getObjectsHoldingArbitraryContent
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|getObjectsHoldingArbitraryContent
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
comment|/**      * Test that wraps the randomly generated query into an array as follows: { "query_name" : [{}]}      * This causes unexpected situations in parser code that may not be handled properly.      */
DECL|method|testQueryWrappedInArray
specifier|public
specifier|final
name|void
name|testQueryWrappedInArray
parameter_list|()
throws|throws
name|IOException
block|{
name|QB
name|queryBuilder
init|=
name|createTestQueryBuilder
argument_list|()
decl_stmt|;
name|String
name|queryName
init|=
name|queryBuilder
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|validQuery
init|=
name|queryBuilder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|queryWrappedInArrayTest
argument_list|(
name|queryName
argument_list|,
name|validQuery
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|query
range|:
name|getAlternateVersions
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|queryWrappedInArrayTest
argument_list|(
name|queryName
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|queryWrappedInArrayTest
specifier|private
name|void
name|queryWrappedInArrayTest
parameter_list|(
name|String
name|queryName
parameter_list|,
name|String
name|validQuery
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|i
init|=
name|validQuery
operator|.
name|indexOf
argument_list|(
literal|"\""
operator|+
name|queryName
operator|+
literal|"\""
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|i
argument_list|,
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|insertionPosition
decl_stmt|;
for|for
control|(
name|insertionPosition
operator|=
name|i
init|;
name|insertionPosition
operator|<
name|validQuery
operator|.
name|length
argument_list|()
condition|;
name|insertionPosition
operator|++
control|)
block|{
if|if
condition|(
name|validQuery
operator|.
name|charAt
argument_list|(
name|insertionPosition
argument_list|)
operator|==
literal|':'
condition|)
block|{
break|break;
block|}
block|}
name|insertionPosition
operator|++
expr_stmt|;
name|int
name|endArrayPosition
decl_stmt|;
for|for
control|(
name|endArrayPosition
operator|=
name|validQuery
operator|.
name|length
argument_list|()
operator|-
literal|1
init|;
name|endArrayPosition
operator|>=
literal|0
condition|;
name|endArrayPosition
operator|--
control|)
block|{
if|if
condition|(
name|validQuery
operator|.
name|charAt
argument_list|(
name|endArrayPosition
argument_list|)
operator|==
literal|'}'
condition|)
block|{
break|break;
block|}
block|}
name|String
name|testQuery
init|=
name|validQuery
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|insertionPosition
argument_list|)
operator|+
literal|"["
operator|+
name|validQuery
operator|.
name|substring
argument_list|(
name|insertionPosition
argument_list|,
name|endArrayPosition
argument_list|)
operator|+
literal|"]"
operator|+
name|validQuery
operator|.
name|substring
argument_list|(
name|endArrayPosition
argument_list|,
name|validQuery
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|ParsingException
name|e
init|=
name|expectThrows
argument_list|(
name|ParsingException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|parseQuery
argument_list|(
name|testQuery
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"["
operator|+
name|queryName
operator|+
literal|"] query malformed, no start_object after query name"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns alternate string representation of the query that need to be tested as they are never used as output      * of {@link QueryBuilder#toXContent(XContentBuilder, ToXContent.Params)}. By default there are no alternate versions.      */
DECL|method|getAlternateVersions
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|QB
argument_list|>
name|getAlternateVersions
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
comment|/**      * Parses the query provided as string argument and compares it with the expected result provided as argument as a {@link QueryBuilder}      */
DECL|method|assertParsedQuery
specifier|protected
specifier|static
name|void
name|assertParsedQuery
parameter_list|(
name|String
name|queryAsString
parameter_list|,
name|QueryBuilder
name|expectedQuery
parameter_list|)
throws|throws
name|IOException
block|{
name|assertParsedQuery
argument_list|(
name|queryAsString
argument_list|,
name|expectedQuery
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
block|}
DECL|method|assertParsedQuery
specifier|protected
specifier|static
name|void
name|assertParsedQuery
parameter_list|(
name|String
name|queryAsString
parameter_list|,
name|QueryBuilder
name|expectedQuery
parameter_list|,
name|ParseFieldMatcher
name|matcher
parameter_list|)
throws|throws
name|IOException
block|{
name|QueryBuilder
name|newQuery
init|=
name|parseQuery
argument_list|(
name|queryAsString
argument_list|,
name|matcher
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|newQuery
argument_list|,
name|expectedQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedQuery
argument_list|,
name|newQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedQuery
operator|.
name|hashCode
argument_list|()
argument_list|,
name|newQuery
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Parses the query provided as bytes argument and compares it with the expected result provided as argument as a {@link QueryBuilder}      */
DECL|method|assertParsedQuery
specifier|private
specifier|static
name|void
name|assertParsedQuery
parameter_list|(
name|BytesReference
name|queryAsBytes
parameter_list|,
name|QueryBuilder
name|expectedQuery
parameter_list|)
throws|throws
name|IOException
block|{
name|assertParsedQuery
argument_list|(
name|queryAsBytes
argument_list|,
name|expectedQuery
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
expr_stmt|;
block|}
DECL|method|assertParsedQuery
specifier|private
specifier|static
name|void
name|assertParsedQuery
parameter_list|(
name|BytesReference
name|queryAsBytes
parameter_list|,
name|QueryBuilder
name|expectedQuery
parameter_list|,
name|ParseFieldMatcher
name|matcher
parameter_list|)
throws|throws
name|IOException
block|{
name|QueryBuilder
name|newQuery
init|=
name|parseQuery
argument_list|(
name|queryAsBytes
argument_list|,
name|matcher
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|newQuery
argument_list|,
name|expectedQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedQuery
argument_list|,
name|newQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedQuery
operator|.
name|hashCode
argument_list|()
argument_list|,
name|newQuery
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|parseQuery
specifier|protected
specifier|static
name|QueryBuilder
name|parseQuery
parameter_list|(
name|String
name|queryAsString
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|parseQuery
argument_list|(
name|queryAsString
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
return|;
block|}
DECL|method|parseQuery
specifier|protected
specifier|static
name|QueryBuilder
name|parseQuery
parameter_list|(
name|String
name|queryAsString
parameter_list|,
name|ParseFieldMatcher
name|matcher
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|queryAsString
argument_list|)
operator|.
name|createParser
argument_list|(
name|queryAsString
argument_list|)
decl_stmt|;
return|return
name|parseQuery
argument_list|(
name|parser
argument_list|,
name|matcher
argument_list|)
return|;
block|}
DECL|method|parseQuery
specifier|protected
specifier|static
name|QueryBuilder
name|parseQuery
parameter_list|(
name|BytesReference
name|queryAsBytes
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|parseQuery
argument_list|(
name|queryAsBytes
argument_list|,
name|ParseFieldMatcher
operator|.
name|STRICT
argument_list|)
return|;
block|}
DECL|method|parseQuery
specifier|protected
specifier|static
name|QueryBuilder
name|parseQuery
parameter_list|(
name|BytesReference
name|queryAsBytes
parameter_list|,
name|ParseFieldMatcher
name|matcher
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|queryAsBytes
argument_list|)
operator|.
name|createParser
argument_list|(
name|queryAsBytes
argument_list|)
decl_stmt|;
return|return
name|parseQuery
argument_list|(
name|parser
argument_list|,
name|matcher
argument_list|)
return|;
block|}
DECL|method|parseQuery
specifier|private
specifier|static
name|QueryBuilder
name|parseQuery
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|ParseFieldMatcher
name|matcher
parameter_list|)
throws|throws
name|IOException
block|{
name|QueryParseContext
name|context
init|=
name|createParseContext
argument_list|(
name|parser
argument_list|,
name|matcher
argument_list|)
decl_stmt|;
name|QueryBuilder
name|parseInnerQueryBuilder
init|=
name|context
operator|.
name|parseInnerQueryBuilder
argument_list|()
operator|.
name|orElseThrow
argument_list|(
parameter_list|()
lambda|->
operator|new
name|IllegalArgumentException
argument_list|(
literal|"inner query body cannot be empty"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|parser
operator|.
name|nextToken
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|parseInnerQueryBuilder
return|;
block|}
comment|/**      * Test creates the {@link Query} from the {@link QueryBuilder} under test and delegates the      * assertions being made on the result to the implementing subclass.      */
DECL|method|testToQuery
specifier|public
name|void
name|testToQuery
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|runs
init|=
literal|0
init|;
name|runs
operator|<
name|NUMBER_OF_TESTQUERIES
condition|;
name|runs
operator|++
control|)
block|{
name|QueryShardContext
name|context
init|=
name|createShardContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setAllowUnmappedFields
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QB
name|firstQuery
init|=
name|createTestQueryBuilder
argument_list|()
decl_stmt|;
name|QB
name|controlQuery
init|=
name|copyQuery
argument_list|(
name|firstQuery
argument_list|)
decl_stmt|;
name|setSearchContext
argument_list|(
name|randomTypes
argument_list|,
name|context
argument_list|)
expr_stmt|;
comment|// only set search context for toQuery to be more realistic
name|Query
name|firstLuceneQuery
init|=
name|rewriteQuery
argument_list|(
name|firstQuery
argument_list|,
name|context
argument_list|)
operator|.
name|toQuery
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"toQuery should not return null"
argument_list|,
name|firstLuceneQuery
argument_list|)
expr_stmt|;
name|assertLuceneQuery
argument_list|(
name|firstQuery
argument_list|,
name|firstLuceneQuery
argument_list|,
name|context
argument_list|)
expr_stmt|;
comment|//remove after assertLuceneQuery since the assertLuceneQuery impl might access the context as well
name|SearchContext
operator|.
name|removeCurrent
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"query is not equal to its copy after calling toQuery, firstQuery: "
operator|+
name|firstQuery
operator|+
literal|", secondQuery: "
operator|+
name|controlQuery
argument_list|,
name|firstQuery
operator|.
name|equals
argument_list|(
name|controlQuery
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"equals is not symmetric after calling toQuery, firstQuery: "
operator|+
name|firstQuery
operator|+
literal|", secondQuery: "
operator|+
name|controlQuery
argument_list|,
name|controlQuery
operator|.
name|equals
argument_list|(
name|firstQuery
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"query copy's hashcode is different from original hashcode after calling toQuery, firstQuery: "
operator|+
name|firstQuery
operator|+
literal|", secondQuery: "
operator|+
name|controlQuery
argument_list|,
name|controlQuery
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|firstQuery
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QB
name|secondQuery
init|=
name|copyQuery
argument_list|(
name|firstQuery
argument_list|)
decl_stmt|;
comment|// query _name never should affect the result of toQuery, we randomly set it to make sure
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|secondQuery
operator|.
name|queryName
argument_list|(
name|secondQuery
operator|.
name|queryName
argument_list|()
operator|==
literal|null
condition|?
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|30
argument_list|)
else|:
name|secondQuery
operator|.
name|queryName
argument_list|()
operator|+
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setSearchContext
argument_list|(
name|randomTypes
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|Query
name|secondLuceneQuery
init|=
name|rewriteQuery
argument_list|(
name|secondQuery
argument_list|,
name|context
argument_list|)
operator|.
name|toQuery
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"toQuery should not return null"
argument_list|,
name|secondLuceneQuery
argument_list|)
expr_stmt|;
name|assertLuceneQuery
argument_list|(
name|secondQuery
argument_list|,
name|secondLuceneQuery
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|SearchContext
operator|.
name|removeCurrent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"two equivalent query builders lead to different lucene queries"
argument_list|,
name|rewrite
argument_list|(
name|secondLuceneQuery
argument_list|)
argument_list|,
name|rewrite
argument_list|(
name|firstLuceneQuery
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|supportsBoostAndQueryName
argument_list|()
condition|)
block|{
name|secondQuery
operator|.
name|boost
argument_list|(
name|firstQuery
operator|.
name|boost
argument_list|()
operator|+
literal|1f
operator|+
name|randomFloat
argument_list|()
argument_list|)
expr_stmt|;
name|setSearchContext
argument_list|(
name|randomTypes
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|Query
name|thirdLuceneQuery
init|=
name|rewriteQuery
argument_list|(
name|secondQuery
argument_list|,
name|context
argument_list|)
operator|.
name|toQuery
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|SearchContext
operator|.
name|removeCurrent
argument_list|()
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|"modifying the boost doesn't affect the corresponding lucene query"
argument_list|,
name|rewrite
argument_list|(
name|firstLuceneQuery
argument_list|)
argument_list|,
name|rewrite
argument_list|(
name|thirdLuceneQuery
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// check that context#isFilter is not changed by invoking toQuery/rewrite
name|boolean
name|filterFlag
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|context
operator|.
name|setIsFilter
argument_list|(
name|filterFlag
argument_list|)
expr_stmt|;
name|rewriteQuery
argument_list|(
name|firstQuery
argument_list|,
name|context
argument_list|)
operator|.
name|toQuery
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"isFilter should be unchanged"
argument_list|,
name|filterFlag
argument_list|,
name|context
operator|.
name|isFilter
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|rewriteQuery
specifier|private
name|QueryBuilder
name|rewriteQuery
parameter_list|(
name|QB
name|queryBuilder
parameter_list|,
name|QueryRewriteContext
name|rewriteContext
parameter_list|)
throws|throws
name|IOException
block|{
name|QueryBuilder
name|rewritten
init|=
name|QueryBuilder
operator|.
name|rewriteQuery
argument_list|(
name|queryBuilder
argument_list|,
name|rewriteContext
argument_list|)
decl_stmt|;
comment|// extra safety to fail fast - serialize the rewritten version to ensure it's serializable.
name|assertSerialization
argument_list|(
name|rewritten
argument_list|)
expr_stmt|;
return|return
name|rewritten
return|;
block|}
comment|/**      * Few queries allow you to set the boost and queryName on the java api, although the corresponding parser      * doesn't parse them as they are not supported. This method allows to disable boost and queryName related tests for those queries.      * Those queries are easy to identify: their parsers don't parse `boost` and `_name` as they don't apply to the specific query:      * wrapper query and match_none      */
DECL|method|supportsBoostAndQueryName
specifier|protected
name|boolean
name|supportsBoostAndQueryName
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * Checks the result of {@link QueryBuilder#toQuery(QueryShardContext)} given the original {@link QueryBuilder}      * and {@link QueryShardContext}. Verifies that named queries and boost are properly handled and delegates to      * {@link #doAssertLuceneQuery(AbstractQueryBuilder, Query, QueryShardContext)} for query specific checks.      */
DECL|method|assertLuceneQuery
specifier|private
name|void
name|assertLuceneQuery
parameter_list|(
name|QB
name|queryBuilder
parameter_list|,
name|Query
name|query
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|queryBuilder
operator|.
name|queryName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Query
name|namedQuery
init|=
name|context
operator|.
name|copyNamedQueries
argument_list|()
operator|.
name|get
argument_list|(
name|queryBuilder
operator|.
name|queryName
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|namedQuery
argument_list|,
name|equalTo
argument_list|(
name|query
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|queryBuilder
operator|.
name|boost
argument_list|()
operator|!=
name|AbstractQueryBuilder
operator|.
name|DEFAULT_BOOST
condition|)
block|{
name|assertThat
argument_list|(
name|query
argument_list|,
name|either
argument_list|(
name|instanceOf
argument_list|(
name|BoostQuery
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|or
argument_list|(
name|instanceOf
argument_list|(
name|SpanBoostQuery
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|query
operator|instanceof
name|SpanBoostQuery
condition|)
block|{
name|SpanBoostQuery
name|spanBoostQuery
init|=
operator|(
name|SpanBoostQuery
operator|)
name|query
decl_stmt|;
name|assertThat
argument_list|(
name|spanBoostQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|queryBuilder
operator|.
name|boost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|=
name|spanBoostQuery
operator|.
name|getQuery
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|BoostQuery
name|boostQuery
init|=
operator|(
name|BoostQuery
operator|)
name|query
decl_stmt|;
name|assertThat
argument_list|(
name|boostQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|queryBuilder
operator|.
name|boost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|=
name|boostQuery
operator|.
name|getQuery
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|doAssertLuceneQuery
argument_list|(
name|queryBuilder
argument_list|,
name|query
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**      * Checks the result of {@link QueryBuilder#toQuery(QueryShardContext)} given the original {@link QueryBuilder}      * and {@link QueryShardContext}. Contains the query specific checks to be implemented by subclasses.      */
DECL|method|doAssertLuceneQuery
specifier|protected
specifier|abstract
name|void
name|doAssertLuceneQuery
parameter_list|(
name|QB
name|queryBuilder
parameter_list|,
name|Query
name|query
parameter_list|,
name|QueryShardContext
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|assertTermOrBoostQuery
specifier|protected
specifier|static
name|void
name|assertTermOrBoostQuery
parameter_list|(
name|Query
name|query
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|value
parameter_list|,
name|float
name|fieldBoost
parameter_list|)
block|{
if|if
condition|(
name|fieldBoost
operator|!=
name|AbstractQueryBuilder
operator|.
name|DEFAULT_BOOST
condition|)
block|{
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|BoostQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|BoostQuery
name|boostQuery
init|=
operator|(
name|BoostQuery
operator|)
name|query
decl_stmt|;
name|assertThat
argument_list|(
name|boostQuery
operator|.
name|getBoost
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|fieldBoost
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|=
name|boostQuery
operator|.
name|getQuery
argument_list|()
expr_stmt|;
block|}
name|assertTermQuery
argument_list|(
name|query
argument_list|,
name|field
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTermQuery
specifier|protected
specifier|static
name|void
name|assertTermQuery
parameter_list|(
name|Query
name|query
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|assertThat
argument_list|(
name|query
argument_list|,
name|instanceOf
argument_list|(
name|TermQuery
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|TermQuery
name|termQuery
init|=
operator|(
name|TermQuery
operator|)
name|query
decl_stmt|;
name|assertThat
argument_list|(
name|termQuery
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|termQuery
operator|.
name|getTerm
argument_list|()
operator|.
name|text
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|value
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Test serialization and deserialization of the test query.      */
DECL|method|testSerialization
specifier|public
name|void
name|testSerialization
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|runs
init|=
literal|0
init|;
name|runs
operator|<
name|NUMBER_OF_TESTQUERIES
condition|;
name|runs
operator|++
control|)
block|{
name|QB
name|testQuery
init|=
name|createTestQueryBuilder
argument_list|()
decl_stmt|;
name|assertSerialization
argument_list|(
name|testQuery
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Serialize the given query builder and asserts that both are equal      */
DECL|method|assertSerialization
specifier|protected
specifier|static
name|QueryBuilder
name|assertSerialization
parameter_list|(
name|QueryBuilder
name|testQuery
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|output
operator|.
name|writeNamedWriteable
argument_list|(
name|testQuery
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
operator|new
name|NamedWriteableAwareStreamInput
argument_list|(
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
argument_list|,
name|serviceHolder
operator|.
name|namedWriteableRegistry
argument_list|)
init|)
block|{
name|QueryBuilder
name|deserializedQuery
init|=
name|in
operator|.
name|readNamedWriteable
argument_list|(
name|QueryBuilder
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testQuery
argument_list|,
name|deserializedQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testQuery
operator|.
name|hashCode
argument_list|()
argument_list|,
name|deserializedQuery
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|testQuery
argument_list|,
name|deserializedQuery
argument_list|)
expr_stmt|;
return|return
name|deserializedQuery
return|;
block|}
block|}
block|}
DECL|method|testEqualsAndHashcode
specifier|public
name|void
name|testEqualsAndHashcode
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|runs
init|=
literal|0
init|;
name|runs
operator|<
name|NUMBER_OF_TESTQUERIES
condition|;
name|runs
operator|++
control|)
block|{
name|QB
name|firstQuery
init|=
name|createTestQueryBuilder
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"query is equal to null"
argument_list|,
name|firstQuery
operator|.
name|equals
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"query is equal to incompatible type"
argument_list|,
name|firstQuery
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"query is not equal to self"
argument_list|,
name|firstQuery
operator|.
name|equals
argument_list|(
name|firstQuery
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"same query's hashcode returns different values if called multiple times"
argument_list|,
name|firstQuery
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|firstQuery
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QB
name|secondQuery
init|=
name|copyQuery
argument_list|(
name|firstQuery
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"query is not equal to self"
argument_list|,
name|secondQuery
operator|.
name|equals
argument_list|(
name|secondQuery
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"query is not equal to its copy"
argument_list|,
name|firstQuery
operator|.
name|equals
argument_list|(
name|secondQuery
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"equals is not symmetric"
argument_list|,
name|secondQuery
operator|.
name|equals
argument_list|(
name|firstQuery
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"query copy's hashcode is different from original hashcode"
argument_list|,
name|secondQuery
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|firstQuery
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QB
name|thirdQuery
init|=
name|copyQuery
argument_list|(
name|secondQuery
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"query is not equal to self"
argument_list|,
name|thirdQuery
operator|.
name|equals
argument_list|(
name|thirdQuery
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"query is not equal to its copy"
argument_list|,
name|secondQuery
operator|.
name|equals
argument_list|(
name|thirdQuery
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"query copy's hashcode is different from original hashcode"
argument_list|,
name|secondQuery
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|thirdQuery
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"equals is not transitive"
argument_list|,
name|firstQuery
operator|.
name|equals
argument_list|(
name|thirdQuery
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"query copy's hashcode is different from original hashcode"
argument_list|,
name|firstQuery
operator|.
name|hashCode
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|thirdQuery
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"equals is not symmetric"
argument_list|,
name|thirdQuery
operator|.
name|equals
argument_list|(
name|secondQuery
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"equals is not symmetric"
argument_list|,
name|thirdQuery
operator|.
name|equals
argument_list|(
name|firstQuery
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|secondQuery
operator|.
name|queryName
argument_list|(
name|secondQuery
operator|.
name|queryName
argument_list|()
operator|==
literal|null
condition|?
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|30
argument_list|)
else|:
name|secondQuery
operator|.
name|queryName
argument_list|()
operator|+
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|secondQuery
operator|.
name|boost
argument_list|(
name|firstQuery
operator|.
name|boost
argument_list|()
operator|+
literal|1f
operator|+
name|randomFloat
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
literal|"different queries should not be equal"
argument_list|,
name|secondQuery
argument_list|,
name|not
argument_list|(
name|equalTo
argument_list|(
name|firstQuery
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//we use the streaming infra to create a copy of the query provided as argument
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|copyQuery
specifier|private
name|QB
name|copyQuery
parameter_list|(
name|QB
name|query
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|output
operator|.
name|writeNamedWriteable
argument_list|(
name|query
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
operator|new
name|NamedWriteableAwareStreamInput
argument_list|(
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
argument_list|,
name|serviceHolder
operator|.
name|namedWriteableRegistry
argument_list|)
init|)
block|{
return|return
operator|(
name|QB
operator|)
name|in
operator|.
name|readNamedWriteable
argument_list|(
name|QueryBuilder
operator|.
name|class
argument_list|)
return|;
block|}
block|}
block|}
comment|/**      * @return a new {@link QueryShardContext} based on the base test index and queryParserService      */
DECL|method|createShardContext
specifier|protected
specifier|static
name|QueryShardContext
name|createShardContext
parameter_list|()
block|{
return|return
name|serviceHolder
operator|.
name|createShardContext
argument_list|()
return|;
block|}
comment|/**      * @return a new {@link QueryParseContext} based on the base test index and queryParserService      */
DECL|method|createParseContext
specifier|protected
specifier|static
name|QueryParseContext
name|createParseContext
parameter_list|(
name|XContentParser
name|parser
parameter_list|,
name|ParseFieldMatcher
name|matcher
parameter_list|)
block|{
return|return
operator|new
name|QueryParseContext
argument_list|(
name|serviceHolder
operator|.
name|indicesQueriesRegistry
argument_list|,
name|parser
argument_list|,
name|matcher
argument_list|)
return|;
block|}
comment|/**      * create a random value for either {@link AbstractQueryTestCase#BOOLEAN_FIELD_NAME}, {@link AbstractQueryTestCase#INT_FIELD_NAME},      * {@link AbstractQueryTestCase#DOUBLE_FIELD_NAME}, {@link AbstractQueryTestCase#STRING_FIELD_NAME} or      * {@link AbstractQueryTestCase#DATE_FIELD_NAME}, or a String value by default      */
DECL|method|getRandomValueForFieldName
specifier|protected
specifier|static
name|Object
name|getRandomValueForFieldName
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|Object
name|value
decl_stmt|;
switch|switch
condition|(
name|fieldName
condition|)
block|{
case|case
name|STRING_FIELD_NAME
case|:
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
comment|// unicode in 10% cases
name|JsonStringEncoder
name|encoder
init|=
name|JsonStringEncoder
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|value
operator|=
operator|new
name|String
argument_list|(
name|encoder
operator|.
name|quoteAsString
argument_list|(
name|randomUnicodeOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INT_FIELD_NAME
case|:
name|value
operator|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE_FIELD_NAME
case|:
name|value
operator|=
name|randomDouble
argument_list|()
operator|*
literal|10
expr_stmt|;
break|break;
case|case
name|BOOLEAN_FIELD_NAME
case|:
name|value
operator|=
name|randomBoolean
argument_list|()
expr_stmt|;
break|break;
case|case
name|DATE_FIELD_NAME
case|:
name|value
operator|=
operator|new
name|DateTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
default|default:
name|value
operator|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
DECL|method|getRandomQueryText
specifier|protected
specifier|static
name|String
name|getRandomQueryText
parameter_list|()
block|{
name|int
name|terms
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
return|;
block|}
comment|/**      * Helper method to return a mapped or a random field      */
DECL|method|getRandomFieldName
specifier|protected
specifier|static
name|String
name|getRandomFieldName
parameter_list|()
block|{
comment|// if no type is set then return a random field name
if|if
condition|(
name|currentTypes
operator|.
name|length
operator|==
literal|0
operator|||
name|randomBoolean
argument_list|()
condition|)
block|{
return|return
name|randomAsciiOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
return|;
block|}
return|return
name|randomFrom
argument_list|(
name|MAPPED_LEAF_FIELD_NAMES
argument_list|)
return|;
block|}
comment|/**      * Helper method to return a random rewrite method      */
DECL|method|getRandomRewriteMethod
specifier|protected
specifier|static
name|String
name|getRandomRewriteMethod
parameter_list|()
block|{
name|String
name|rewrite
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|rewrite
operator|=
name|randomFrom
argument_list|(
name|QueryParsers
operator|.
name|CONSTANT_SCORE
argument_list|,
name|QueryParsers
operator|.
name|SCORING_BOOLEAN
argument_list|,
name|QueryParsers
operator|.
name|CONSTANT_SCORE_BOOLEAN
argument_list|)
operator|.
name|getPreferredName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rewrite
operator|=
name|randomFrom
argument_list|(
name|QueryParsers
operator|.
name|TOP_TERMS
argument_list|,
name|QueryParsers
operator|.
name|TOP_TERMS_BOOST
argument_list|,
name|QueryParsers
operator|.
name|TOP_TERMS_BLENDED_FREQS
argument_list|)
operator|.
name|getPreferredName
argument_list|()
operator|+
literal|"1"
expr_stmt|;
block|}
return|return
name|rewrite
return|;
block|}
DECL|method|getRandomTypes
specifier|private
specifier|static
name|String
index|[]
name|getRandomTypes
parameter_list|()
block|{
name|String
index|[]
name|types
decl_stmt|;
if|if
condition|(
name|currentTypes
operator|.
name|length
operator|>
literal|0
operator|&&
name|randomBoolean
argument_list|()
condition|)
block|{
name|int
name|numberOfQueryTypes
init|=
name|randomIntBetween
argument_list|(
literal|1
argument_list|,
name|currentTypes
operator|.
name|length
argument_list|)
decl_stmt|;
name|types
operator|=
operator|new
name|String
index|[
name|numberOfQueryTypes
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfQueryTypes
condition|;
name|i
operator|++
control|)
block|{
name|types
index|[
name|i
index|]
operator|=
name|randomFrom
argument_list|(
name|currentTypes
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|types
operator|=
operator|new
name|String
index|[]
block|{
name|MetaData
operator|.
name|ALL
block|}
expr_stmt|;
block|}
else|else
block|{
name|types
operator|=
operator|new
name|String
index|[
literal|0
index|]
expr_stmt|;
block|}
block|}
return|return
name|types
return|;
block|}
DECL|method|getRandomType
specifier|protected
specifier|static
name|String
name|getRandomType
parameter_list|()
block|{
return|return
operator|(
name|currentTypes
operator|.
name|length
operator|==
literal|0
operator|)
condition|?
name|MetaData
operator|.
name|ALL
else|:
name|randomFrom
argument_list|(
name|currentTypes
argument_list|)
return|;
block|}
DECL|method|randomFuzziness
specifier|protected
specifier|static
name|Fuzziness
name|randomFuzziness
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
switch|switch
condition|(
name|fieldName
condition|)
block|{
case|case
name|INT_FIELD_NAME
case|:
return|return
name|Fuzziness
operator|.
name|build
argument_list|(
name|randomIntBetween
argument_list|(
literal|3
argument_list|,
literal|100
argument_list|)
argument_list|)
return|;
case|case
name|DOUBLE_FIELD_NAME
case|:
return|return
name|Fuzziness
operator|.
name|build
argument_list|(
literal|1
operator|+
name|randomFloat
argument_list|()
operator|*
literal|10
argument_list|)
return|;
case|case
name|DATE_FIELD_NAME
case|:
return|return
name|Fuzziness
operator|.
name|build
argument_list|(
name|randomTimeValue
argument_list|()
argument_list|)
return|;
default|default:
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
return|return
name|Fuzziness
operator|.
name|fromEdits
argument_list|(
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
return|;
block|}
return|return
name|Fuzziness
operator|.
name|AUTO
return|;
block|}
block|}
DECL|method|randomAnalyzer
specifier|protected
specifier|static
name|String
name|randomAnalyzer
parameter_list|()
block|{
return|return
name|randomFrom
argument_list|(
literal|"simple"
argument_list|,
literal|"standard"
argument_list|,
literal|"keyword"
argument_list|,
literal|"whitespace"
argument_list|)
return|;
block|}
DECL|method|randomMinimumShouldMatch
specifier|protected
specifier|static
name|String
name|randomMinimumShouldMatch
parameter_list|()
block|{
return|return
name|randomFrom
argument_list|(
literal|"1"
argument_list|,
literal|"-1"
argument_list|,
literal|"75%"
argument_list|,
literal|"-25%"
argument_list|,
literal|"2<75%"
argument_list|,
literal|"2<-25%"
argument_list|)
return|;
block|}
DECL|class|ClientInvocationHandler
specifier|private
specifier|static
class|class
name|ClientInvocationHandler
implements|implements
name|InvocationHandler
block|{
DECL|field|delegate
name|AbstractQueryTestCase
argument_list|<
name|?
argument_list|>
name|delegate
decl_stmt|;
annotation|@
name|Override
DECL|method|invoke
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|method
operator|.
name|equals
argument_list|(
name|Client
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"get"
argument_list|,
name|GetRequest
operator|.
name|class
argument_list|)
argument_list|)
condition|)
block|{
return|return
operator|new
name|PlainActionFuture
argument_list|<
name|GetResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|GetResponse
name|get
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
return|return
name|delegate
operator|.
name|executeGet
argument_list|(
operator|(
name|GetRequest
operator|)
name|args
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
return|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|equals
argument_list|(
name|Client
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"multiTermVectors"
argument_list|,
name|MultiTermVectorsRequest
operator|.
name|class
argument_list|)
argument_list|)
condition|)
block|{
return|return
operator|new
name|PlainActionFuture
argument_list|<
name|MultiTermVectorsResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|MultiTermVectorsResponse
name|get
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
return|return
name|delegate
operator|.
name|executeMultiTermVectors
argument_list|(
operator|(
name|MultiTermVectorsRequest
operator|)
name|args
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
return|;
block|}
elseif|else
if|if
condition|(
name|method
operator|.
name|equals
argument_list|(
name|Object
operator|.
name|class
operator|.
name|getMethod
argument_list|(
literal|"toString"
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|"MockClient"
return|;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"this test can't handle calls to: "
operator|+
name|method
argument_list|)
throw|;
block|}
block|}
comment|/**      * Override this to handle {@link Client#get(GetRequest)} calls from parsers / builders      */
DECL|method|executeGet
specifier|protected
name|GetResponse
name|executeGet
parameter_list|(
name|GetRequest
name|getRequest
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"this test can't handle GET requests"
argument_list|)
throw|;
block|}
comment|/**      * Override this to handle {@link Client#get(GetRequest)} calls from parsers / builders      */
DECL|method|executeMultiTermVectors
specifier|protected
name|MultiTermVectorsResponse
name|executeMultiTermVectors
parameter_list|(
name|MultiTermVectorsRequest
name|mtvRequest
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"this test can't handle MultiTermVector requests"
argument_list|)
throw|;
block|}
comment|/**      * Call this method to check a valid json string representing the query under test against      * it's generated json.      *      * Note: By the time of this writing (Nov 2015) all queries are taken from the query dsl      * reference docs mirroring examples there. Here's how the queries were generated:      *      *<ul>      *<li> Take a reference documentation example.      *<li> Stick it into the createParseableQueryJson method of the respective query test.      *<li> Manually check that what the QueryBuilder generates equals the input json ignoring default options.      *<li> Put the manual checks into the assertQueryParsedFromJson method.      *<li> Now copy the generated json including default options into createParseableQueryJson      *<li> By now the roundtrip check for the json should be happy.      *</ul>      **/
DECL|method|checkGeneratedJson
specifier|public
specifier|static
name|void
name|checkGeneratedJson
parameter_list|(
name|String
name|expected
parameter_list|,
name|QueryBuilder
name|source
parameter_list|)
throws|throws
name|IOException
block|{
comment|// now assert that we actually generate the same JSON
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|prettyPrint
argument_list|()
decl_stmt|;
name|source
operator|.
name|toXContent
argument_list|(
name|builder
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|(
name|expected
argument_list|,
name|builder
operator|.
name|string
argument_list|()
argument_list|)
argument_list|,
name|expected
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|builder
operator|.
name|string
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|msg
specifier|private
specifier|static
name|String
name|msg
parameter_list|(
name|String
name|left
parameter_list|,
name|String
name|right
parameter_list|)
block|{
name|int
name|size
init|=
name|Math
operator|.
name|min
argument_list|(
name|left
operator|.
name|length
argument_list|()
argument_list|,
name|right
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"size: "
operator|+
name|left
operator|.
name|length
argument_list|()
operator|+
literal|" vs. "
operator|+
name|right
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" content:<<"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|left
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
name|right
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|left
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
literal|">> "
argument_list|)
operator|.
name|append
argument_list|(
literal|"until offset: "
argument_list|)
operator|.
name|append
argument_list|(
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|" ["
argument_list|)
operator|.
name|append
argument_list|(
name|left
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" vs."
argument_list|)
operator|.
name|append
argument_list|(
name|right
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"] ["
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|int
operator|)
name|left
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" vs."
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|int
operator|)
name|right
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
if|if
condition|(
name|left
operator|.
name|length
argument_list|()
operator|!=
name|right
operator|.
name|length
argument_list|()
condition|)
block|{
name|int
name|leftEnd
init|=
name|Math
operator|.
name|max
argument_list|(
name|size
argument_list|,
name|left
operator|.
name|length
argument_list|()
argument_list|)
operator|-
literal|1
decl_stmt|;
name|int
name|rightEnd
init|=
name|Math
operator|.
name|max
argument_list|(
name|size
argument_list|,
name|right
operator|.
name|length
argument_list|()
argument_list|)
operator|-
literal|1
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|">> "
argument_list|)
operator|.
name|append
argument_list|(
literal|"until offset: "
argument_list|)
operator|.
name|append
argument_list|(
name|size
argument_list|)
operator|.
name|append
argument_list|(
literal|" ["
argument_list|)
operator|.
name|append
argument_list|(
name|left
operator|.
name|charAt
argument_list|(
name|leftEnd
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" vs."
argument_list|)
operator|.
name|append
argument_list|(
name|right
operator|.
name|charAt
argument_list|(
name|rightEnd
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"] ["
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|int
operator|)
name|left
operator|.
name|charAt
argument_list|(
name|leftEnd
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|" vs."
argument_list|)
operator|.
name|append
argument_list|(
operator|(
name|int
operator|)
name|right
operator|.
name|charAt
argument_list|(
name|rightEnd
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|""
return|;
block|}
comment|/**      * This test ensures that queries that need to be rewritten have dedicated tests.      * These queries must override this method accordingly.      */
DECL|method|testMustRewrite
specifier|public
name|void
name|testMustRewrite
parameter_list|()
throws|throws
name|IOException
block|{
name|QueryShardContext
name|context
init|=
name|createShardContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setAllowUnmappedFields
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QB
name|queryBuilder
init|=
name|createTestQueryBuilder
argument_list|()
decl_stmt|;
name|setSearchContext
argument_list|(
name|randomTypes
argument_list|,
name|context
argument_list|)
expr_stmt|;
comment|// only set search context for toQuery to be more realistic
name|queryBuilder
operator|.
name|toQuery
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|rewrite
specifier|protected
name|Query
name|rewrite
parameter_list|(
name|Query
name|query
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|query
return|;
block|}
DECL|class|ServiceHolder
specifier|private
specifier|static
class|class
name|ServiceHolder
implements|implements
name|Closeable
block|{
DECL|field|injector
specifier|private
specifier|final
name|Injector
name|injector
decl_stmt|;
DECL|field|indicesQueriesRegistry
specifier|private
specifier|final
name|IndicesQueriesRegistry
name|indicesQueriesRegistry
decl_stmt|;
DECL|field|indexFieldDataService
specifier|private
specifier|final
name|IndexFieldDataService
name|indexFieldDataService
decl_stmt|;
DECL|field|searchModule
specifier|private
specifier|final
name|SearchModule
name|searchModule
decl_stmt|;
DECL|field|namedWriteableRegistry
specifier|private
specifier|final
name|NamedWriteableRegistry
name|namedWriteableRegistry
decl_stmt|;
DECL|field|clientInvocationHandler
specifier|private
specifier|final
name|ClientInvocationHandler
name|clientInvocationHandler
init|=
operator|new
name|ClientInvocationHandler
argument_list|()
decl_stmt|;
DECL|field|idxSettings
specifier|private
specifier|final
name|IndexSettings
name|idxSettings
decl_stmt|;
DECL|field|similarityService
specifier|private
specifier|final
name|SimilarityService
name|similarityService
decl_stmt|;
DECL|field|mapperService
specifier|private
specifier|final
name|MapperService
name|mapperService
decl_stmt|;
DECL|field|bitsetFilterCache
specifier|private
specifier|final
name|BitsetFilterCache
name|bitsetFilterCache
decl_stmt|;
DECL|field|scriptService
specifier|private
specifier|final
name|ScriptService
name|scriptService
decl_stmt|;
DECL|method|ServiceHolder
name|ServiceHolder
parameter_list|(
name|Settings
name|nodeSettings
parameter_list|,
name|Settings
name|indexSettings
parameter_list|,
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|plugins
parameter_list|,
name|AbstractQueryTestCase
argument_list|<
name|?
argument_list|>
name|testCase
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ThreadPool
name|threadPool
init|=
operator|new
name|ThreadPool
argument_list|(
name|nodeSettings
argument_list|)
decl_stmt|;
name|ClusterService
name|clusterService
init|=
name|ClusterServiceUtils
operator|.
name|createClusterService
argument_list|(
name|threadPool
argument_list|)
decl_stmt|;
name|ClusterServiceUtils
operator|.
name|setState
argument_list|(
name|clusterService
argument_list|,
operator|new
name|ClusterState
operator|.
name|Builder
argument_list|(
name|clusterService
operator|.
name|state
argument_list|()
argument_list|)
operator|.
name|metaData
argument_list|(
operator|new
name|MetaData
operator|.
name|Builder
argument_list|()
operator|.
name|put
argument_list|(
operator|new
name|IndexMetaData
operator|.
name|Builder
argument_list|(
name|index
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|settings
argument_list|(
name|indexSettings
argument_list|)
operator|.
name|numberOfShards
argument_list|(
literal|1
argument_list|)
operator|.
name|numberOfReplicas
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Environment
name|env
init|=
name|InternalSettingsPreparer
operator|.
name|prepareEnvironment
argument_list|(
name|nodeSettings
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|PluginsService
name|pluginsService
init|=
operator|new
name|PluginsService
argument_list|(
name|nodeSettings
argument_list|,
name|env
operator|.
name|modulesFile
argument_list|()
argument_list|,
name|env
operator|.
name|pluginsFile
argument_list|()
argument_list|,
name|plugins
argument_list|)
decl_stmt|;
specifier|final
name|Client
name|proxy
init|=
operator|(
name|Client
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|Client
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|Client
operator|.
name|class
block|}
argument_list|,
name|clientInvocationHandler
argument_list|)
decl_stmt|;
name|ScriptModule
name|scriptModule
init|=
name|createScriptModule
argument_list|(
name|pluginsService
operator|.
name|filterPlugins
argument_list|(
name|ScriptPlugin
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Setting
argument_list|<
name|?
argument_list|>
argument_list|>
name|scriptSettings
init|=
name|scriptModule
operator|.
name|getSettings
argument_list|()
decl_stmt|;
name|scriptSettings
operator|.
name|addAll
argument_list|(
name|pluginsService
operator|.
name|getPluginSettings
argument_list|()
argument_list|)
expr_stmt|;
name|scriptSettings
operator|.
name|add
argument_list|(
name|InternalSettingsPlugin
operator|.
name|VERSION_CREATED
argument_list|)
expr_stmt|;
name|SettingsModule
name|settingsModule
init|=
operator|new
name|SettingsModule
argument_list|(
name|nodeSettings
argument_list|,
name|scriptSettings
argument_list|,
name|pluginsService
operator|.
name|getPluginSettingsFilter
argument_list|()
argument_list|)
decl_stmt|;
name|searchModule
operator|=
operator|new
name|SearchModule
argument_list|(
name|nodeSettings
argument_list|,
literal|false
argument_list|,
name|pluginsService
operator|.
name|filterPlugins
argument_list|(
name|SearchPlugin
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|IndicesModule
name|indicesModule
init|=
operator|new
name|IndicesModule
argument_list|(
name|pluginsService
operator|.
name|filterPlugins
argument_list|(
name|MapperPlugin
operator|.
name|class
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|()
block|{
comment|// skip services
name|bindMapperExtension
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|NamedWriteableRegistry
operator|.
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|entries
operator|.
name|addAll
argument_list|(
name|indicesModule
operator|.
name|getNamedWriteables
argument_list|()
argument_list|)
expr_stmt|;
name|entries
operator|.
name|addAll
argument_list|(
name|searchModule
operator|.
name|getNamedWriteables
argument_list|()
argument_list|)
expr_stmt|;
name|NamedWriteableRegistry
name|namedWriteableRegistry
init|=
operator|new
name|NamedWriteableRegistry
argument_list|(
name|entries
argument_list|)
decl_stmt|;
name|ModulesBuilder
name|modulesBuilder
init|=
operator|new
name|ModulesBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Module
name|pluginModule
range|:
name|pluginsService
operator|.
name|createGuiceModules
argument_list|()
control|)
block|{
name|modulesBuilder
operator|.
name|add
argument_list|(
name|pluginModule
argument_list|)
expr_stmt|;
block|}
name|modulesBuilder
operator|.
name|add
argument_list|(
name|b
lambda|->
block|{
name|b
operator|.
name|bind
argument_list|(
name|PluginsService
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|pluginsService
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|Environment
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
operator|new
name|Environment
argument_list|(
name|nodeSettings
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|ThreadPool
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|threadPool
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|Client
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|)
operator|.
name|toProvider
argument_list|(
name|Providers
operator|.
name|of
argument_list|(
name|clusterService
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|CircuitBreakerService
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|NoneCircuitBreakerService
operator|.
name|class
argument_list|)
expr_stmt|;
name|b
operator|.
name|bind
argument_list|(
name|NamedWriteableRegistry
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|namedWriteableRegistry
argument_list|)
expr_stmt|;
block|}
argument_list|,
name|settingsModule
argument_list|,
name|indicesModule
argument_list|,
name|searchModule
argument_list|,
operator|new
name|IndexSettingsModule
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
argument_list|)
expr_stmt|;
name|pluginsService
operator|.
name|processModules
argument_list|(
name|modulesBuilder
argument_list|)
expr_stmt|;
name|injector
operator|=
name|modulesBuilder
operator|.
name|createInjector
argument_list|()
expr_stmt|;
name|IndexScopedSettings
name|indexScopedSettings
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|IndexScopedSettings
operator|.
name|class
argument_list|)
decl_stmt|;
name|idxSettings
operator|=
name|IndexSettingsModule
operator|.
name|newIndexSettings
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|,
name|indexScopedSettings
argument_list|)
expr_stmt|;
name|AnalysisModule
name|analysisModule
init|=
operator|new
name|AnalysisModule
argument_list|(
operator|new
name|Environment
argument_list|(
name|nodeSettings
argument_list|)
argument_list|,
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|AnalysisService
name|analysisService
init|=
name|analysisModule
operator|.
name|getAnalysisRegistry
argument_list|()
operator|.
name|build
argument_list|(
name|idxSettings
argument_list|)
decl_stmt|;
name|scriptService
operator|=
name|scriptModule
operator|.
name|getScriptService
argument_list|()
expr_stmt|;
name|similarityService
operator|=
operator|new
name|SimilarityService
argument_list|(
name|idxSettings
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|MapperRegistry
name|mapperRegistry
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|MapperRegistry
operator|.
name|class
argument_list|)
decl_stmt|;
name|mapperService
operator|=
operator|new
name|MapperService
argument_list|(
name|idxSettings
argument_list|,
name|analysisService
argument_list|,
name|similarityService
argument_list|,
name|mapperRegistry
argument_list|,
name|this
operator|::
name|createShardContext
argument_list|)
expr_stmt|;
name|IndicesFieldDataCache
name|indicesFieldDataCache
init|=
operator|new
name|IndicesFieldDataCache
argument_list|(
name|nodeSettings
argument_list|,
operator|new
name|IndexFieldDataCache
operator|.
name|Listener
argument_list|()
block|{             }
argument_list|)
decl_stmt|;
name|indexFieldDataService
operator|=
operator|new
name|IndexFieldDataService
argument_list|(
name|idxSettings
argument_list|,
name|indicesFieldDataCache
argument_list|,
name|injector
operator|.
name|getInstance
argument_list|(
name|CircuitBreakerService
operator|.
name|class
argument_list|)
argument_list|,
name|mapperService
argument_list|)
expr_stmt|;
name|bitsetFilterCache
operator|=
operator|new
name|BitsetFilterCache
argument_list|(
name|idxSettings
argument_list|,
operator|new
name|BitsetFilterCache
operator|.
name|Listener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCache
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|Accountable
name|accountable
parameter_list|)
block|{                  }
annotation|@
name|Override
specifier|public
name|void
name|onRemoval
parameter_list|(
name|ShardId
name|shardId
parameter_list|,
name|Accountable
name|accountable
parameter_list|)
block|{                  }
block|}
argument_list|)
expr_stmt|;
name|indicesQueriesRegistry
operator|=
name|injector
operator|.
name|getInstance
argument_list|(
name|IndicesQueriesRegistry
operator|.
name|class
argument_list|)
expr_stmt|;
name|String
name|geoFieldMapping
init|=
operator|(
name|idxSettings
operator|.
name|getIndexVersionCreated
argument_list|()
operator|.
name|before
argument_list|(
name|Version
operator|.
name|V_5_0_0_alpha6
argument_list|)
operator|)
condition|?
name|LEGACY_GEO_POINT_FIELD_MAPPING
else|:
literal|"type=geo_point"
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
name|currentTypes
control|)
block|{
name|mapperService
operator|.
name|merge
argument_list|(
name|type
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
name|PutMappingRequest
operator|.
name|buildFromSimplifiedDef
argument_list|(
name|type
argument_list|,
name|STRING_FIELD_NAME
argument_list|,
literal|"type=text"
argument_list|,
name|STRING_FIELD_NAME_2
argument_list|,
literal|"type=keyword"
argument_list|,
name|INT_FIELD_NAME
argument_list|,
literal|"type=integer"
argument_list|,
name|DOUBLE_FIELD_NAME
argument_list|,
literal|"type=double"
argument_list|,
name|BOOLEAN_FIELD_NAME
argument_list|,
literal|"type=boolean"
argument_list|,
name|DATE_FIELD_NAME
argument_list|,
literal|"type=date"
argument_list|,
name|OBJECT_FIELD_NAME
argument_list|,
literal|"type=object"
argument_list|,
name|GEO_POINT_FIELD_NAME
argument_list|,
name|geoFieldMapping
argument_list|,
name|GEO_SHAPE_FIELD_NAME
argument_list|,
literal|"type=geo_shape"
argument_list|)
operator|.
name|string
argument_list|()
argument_list|)
argument_list|,
name|MapperService
operator|.
name|MergeReason
operator|.
name|MAPPING_UPDATE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// also add mappings for two inner field in the object field
name|mapperService
operator|.
name|merge
argument_list|(
name|type
argument_list|,
operator|new
name|CompressedXContent
argument_list|(
literal|"{\"properties\":{\""
operator|+
name|OBJECT_FIELD_NAME
operator|+
literal|"\":{\"type\":\"object\","
operator|+
literal|"\"properties\":{\""
operator|+
name|DATE_FIELD_NAME
operator|+
literal|"\":{\"type\":\"date\"},\""
operator|+
name|INT_FIELD_NAME
operator|+
literal|"\":{\"type\":\"integer\"}}}}}"
argument_list|)
argument_list|,
name|MapperService
operator|.
name|MergeReason
operator|.
name|MAPPING_UPDATE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|testCase
operator|.
name|initializeAdditionalMappings
argument_list|(
name|mapperService
argument_list|)
expr_stmt|;
name|this
operator|.
name|namedWriteableRegistry
operator|=
name|injector
operator|.
name|getInstance
argument_list|(
name|NamedWriteableRegistry
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|injector
operator|.
name|getInstance
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|terminate
argument_list|(
name|injector
operator|.
name|getInstance
argument_list|(
name|ThreadPool
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|IOUtils
operator|.
name|reThrow
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createShardContext
name|QueryShardContext
name|createShardContext
parameter_list|()
block|{
name|ClusterState
name|state
init|=
name|ClusterState
operator|.
name|builder
argument_list|(
operator|new
name|ClusterName
argument_list|(
literal|"_name"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Client
name|client
init|=
name|injector
operator|.
name|getInstance
argument_list|(
name|Client
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
operator|new
name|QueryShardContext
argument_list|(
name|idxSettings
argument_list|,
name|bitsetFilterCache
argument_list|,
name|indexFieldDataService
argument_list|,
name|mapperService
argument_list|,
name|similarityService
argument_list|,
name|scriptService
argument_list|,
name|indicesQueriesRegistry
argument_list|,
name|client
argument_list|,
literal|null
argument_list|,
name|state
argument_list|)
return|;
block|}
DECL|method|createScriptModule
name|ScriptModule
name|createScriptModule
parameter_list|(
name|List
argument_list|<
name|ScriptPlugin
argument_list|>
name|scriptPlugins
parameter_list|)
block|{
if|if
condition|(
name|scriptPlugins
operator|==
literal|null
operator|||
name|scriptPlugins
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|newTestScriptModule
argument_list|()
return|;
block|}
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
argument_list|)
comment|// no file watching, so we don't need a ResourceWatcherService
operator|.
name|put
argument_list|(
name|ScriptService
operator|.
name|SCRIPT_AUTO_RELOAD_ENABLED_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Environment
name|environment
init|=
operator|new
name|Environment
argument_list|(
name|settings
argument_list|)
decl_stmt|;
return|return
name|ScriptModule
operator|.
name|create
argument_list|(
name|settings
argument_list|,
name|environment
argument_list|,
literal|null
argument_list|,
name|scriptPlugins
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

