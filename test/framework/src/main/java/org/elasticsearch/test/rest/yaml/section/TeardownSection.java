begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.rest.yaml.section
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|yaml
operator|.
name|section
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|TeardownSection
specifier|public
class|class
name|TeardownSection
block|{
comment|/**      * Parse a {@link TeardownSection} if the next field is {@code skip}, otherwise returns {@link TeardownSection#EMPTY}.      */
DECL|method|parseIfNext
specifier|public
specifier|static
name|TeardownSection
name|parseIfNext
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|ParserUtils
operator|.
name|advanceToFieldName
argument_list|(
name|parser
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"teardown"
operator|.
name|equals
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
condition|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|TeardownSection
name|section
init|=
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
return|return
name|section
return|;
block|}
return|return
name|EMPTY
return|;
block|}
DECL|method|parse
specifier|public
specifier|static
name|TeardownSection
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|TeardownSection
name|teardownSection
init|=
operator|new
name|TeardownSection
argument_list|()
decl_stmt|;
name|teardownSection
operator|.
name|setSkipSection
argument_list|(
name|SkipSection
operator|.
name|parseIfNext
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|parser
operator|.
name|currentToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|ParserUtils
operator|.
name|advanceToFieldName
argument_list|(
name|parser
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|"do"
operator|.
name|equals
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"section ["
operator|+
name|parser
operator|.
name|currentName
argument_list|()
operator|+
literal|"] not supported within teardown section"
argument_list|)
throw|;
block|}
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|teardownSection
operator|.
name|addDoSection
argument_list|(
name|DoSection
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
return|return
name|teardownSection
return|;
block|}
DECL|field|EMPTY
specifier|public
specifier|static
specifier|final
name|TeardownSection
name|EMPTY
decl_stmt|;
static|static
block|{
name|EMPTY
operator|=
operator|new
name|TeardownSection
argument_list|()
expr_stmt|;
name|EMPTY
operator|.
name|setSkipSection
argument_list|(
name|SkipSection
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
DECL|field|skipSection
specifier|private
name|SkipSection
name|skipSection
decl_stmt|;
DECL|field|doSections
specifier|private
name|List
argument_list|<
name|DoSection
argument_list|>
name|doSections
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|getSkipSection
specifier|public
name|SkipSection
name|getSkipSection
parameter_list|()
block|{
return|return
name|skipSection
return|;
block|}
DECL|method|setSkipSection
specifier|public
name|void
name|setSkipSection
parameter_list|(
name|SkipSection
name|skipSection
parameter_list|)
block|{
name|this
operator|.
name|skipSection
operator|=
name|skipSection
expr_stmt|;
block|}
DECL|method|getDoSections
specifier|public
name|List
argument_list|<
name|DoSection
argument_list|>
name|getDoSections
parameter_list|()
block|{
return|return
name|doSections
return|;
block|}
DECL|method|addDoSection
specifier|public
name|void
name|addDoSection
parameter_list|(
name|DoSection
name|doSection
parameter_list|)
block|{
name|this
operator|.
name|doSections
operator|.
name|add
argument_list|(
name|doSection
argument_list|)
expr_stmt|;
block|}
DECL|method|isEmpty
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|EMPTY
operator|.
name|equals
argument_list|(
name|this
argument_list|)
return|;
block|}
block|}
end_class

end_unit

