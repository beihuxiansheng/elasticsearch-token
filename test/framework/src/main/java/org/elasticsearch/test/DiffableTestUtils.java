begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|Diff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|Diffable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableAwareStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|AbstractWireSerializingTestCase
operator|.
name|NUMBER_OF_TEST_RUNS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_comment
comment|/**  * Utilities that simplify testing of diffable classes  */
end_comment

begin_class
DECL|class|DiffableTestUtils
specifier|public
specifier|final
class|class
name|DiffableTestUtils
block|{
DECL|field|NUMBER_OF_DIFF_TEST_RUNS
specifier|protected
specifier|static
specifier|final
name|int
name|NUMBER_OF_DIFF_TEST_RUNS
init|=
name|NUMBER_OF_TEST_RUNS
decl_stmt|;
DECL|method|DiffableTestUtils
specifier|private
name|DiffableTestUtils
parameter_list|()
block|{      }
comment|/**      * Asserts that changes are applied correctly, i.e. that applying diffs to localInstance produces that object      * equal but not the same as the remoteChanges instance.      */
DECL|method|assertDiffApplication
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Diffable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|T
name|assertDiffApplication
parameter_list|(
name|T
name|remoteChanges
parameter_list|,
name|T
name|localInstance
parameter_list|,
name|Diff
argument_list|<
name|T
argument_list|>
name|diffs
parameter_list|)
block|{
name|T
name|localChanges
init|=
name|diffs
operator|.
name|apply
argument_list|(
name|localInstance
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|remoteChanges
argument_list|,
name|localChanges
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|remoteChanges
operator|.
name|hashCode
argument_list|()
argument_list|,
name|localChanges
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|remoteChanges
argument_list|,
name|localChanges
argument_list|)
expr_stmt|;
return|return
name|localChanges
return|;
block|}
comment|/**      * Simulates sending diffs over the wire      */
DECL|method|copyInstance
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Writeable
parameter_list|>
name|T
name|copyInstance
parameter_list|(
name|T
name|diffs
parameter_list|,
name|NamedWriteableRegistry
name|namedWriteableRegistry
parameter_list|,
name|Reader
argument_list|<
name|T
argument_list|>
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|diffs
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
operator|new
name|NamedWriteableAwareStreamInput
argument_list|(
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
argument_list|,
name|namedWriteableRegistry
argument_list|)
init|)
block|{
return|return
name|reader
operator|.
name|read
argument_list|(
name|in
argument_list|)
return|;
block|}
block|}
block|}
comment|/**      * Tests making random changes to an object, calculating diffs for these changes, sending this      * diffs over the wire and appling these diffs on the other side.      */
DECL|method|testDiffableSerialization
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Diffable
argument_list|<
name|T
argument_list|>
parameter_list|>
name|void
name|testDiffableSerialization
parameter_list|(
name|Supplier
argument_list|<
name|T
argument_list|>
name|testInstance
parameter_list|,
name|Function
argument_list|<
name|T
argument_list|,
name|T
argument_list|>
name|modifier
parameter_list|,
name|NamedWriteableRegistry
name|namedWriteableRegistry
parameter_list|,
name|Reader
argument_list|<
name|T
argument_list|>
name|reader
parameter_list|,
name|Reader
argument_list|<
name|Diff
argument_list|<
name|T
argument_list|>
argument_list|>
name|diffReader
parameter_list|)
throws|throws
name|IOException
block|{
name|T
name|remoteInstance
init|=
name|testInstance
operator|.
name|get
argument_list|()
decl_stmt|;
name|T
name|localInstance
init|=
name|assertSerialization
argument_list|(
name|remoteInstance
argument_list|,
name|namedWriteableRegistry
argument_list|,
name|reader
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|runs
init|=
literal|0
init|;
name|runs
operator|<
name|NUMBER_OF_DIFF_TEST_RUNS
condition|;
name|runs
operator|++
control|)
block|{
name|T
name|remoteChanges
init|=
name|modifier
operator|.
name|apply
argument_list|(
name|remoteInstance
argument_list|)
decl_stmt|;
name|Diff
argument_list|<
name|T
argument_list|>
name|remoteDiffs
init|=
name|remoteChanges
operator|.
name|diff
argument_list|(
name|remoteInstance
argument_list|)
decl_stmt|;
name|Diff
argument_list|<
name|T
argument_list|>
name|localDiffs
init|=
name|copyInstance
argument_list|(
name|remoteDiffs
argument_list|,
name|namedWriteableRegistry
argument_list|,
name|diffReader
argument_list|)
decl_stmt|;
name|localInstance
operator|=
name|assertDiffApplication
argument_list|(
name|remoteChanges
argument_list|,
name|localInstance
argument_list|,
name|localDiffs
argument_list|)
expr_stmt|;
name|remoteInstance
operator|=
name|remoteChanges
expr_stmt|;
block|}
block|}
comment|/**      * Asserts that testInstance can be correctly.      */
DECL|method|assertSerialization
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Writeable
parameter_list|>
name|T
name|assertSerialization
parameter_list|(
name|T
name|testInstance
parameter_list|,
name|NamedWriteableRegistry
name|namedWriteableRegistry
parameter_list|,
name|Reader
argument_list|<
name|T
argument_list|>
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|T
name|deserializedInstance
init|=
name|copyInstance
argument_list|(
name|testInstance
argument_list|,
name|namedWriteableRegistry
argument_list|,
name|reader
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testInstance
argument_list|,
name|deserializedInstance
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testInstance
operator|.
name|hashCode
argument_list|()
argument_list|,
name|deserializedInstance
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|testInstance
argument_list|,
name|deserializedInstance
argument_list|)
expr_stmt|;
return|return
name|deserializedInstance
return|;
block|}
block|}
end_class

end_unit

