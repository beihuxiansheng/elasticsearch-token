begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.disruption
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
operator|.
name|NetworkDisruption
operator|.
name|Bridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
operator|.
name|NetworkDisruption
operator|.
name|TwoPartitions
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|NetworkDisruptionTests
specifier|public
class|class
name|NetworkDisruptionTests
extends|extends
name|ESTestCase
block|{
DECL|method|testTwoPartitions
specifier|public
name|void
name|testTwoPartitions
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|partition1
init|=
name|generateRandomStringSet
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|partition2
init|=
name|generateRandomStringSet
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|TwoPartitions
name|topology
init|=
operator|new
name|TwoPartitions
argument_list|(
name|partition1
argument_list|,
name|partition2
argument_list|)
decl_stmt|;
name|checkTwoPartitions
argument_list|(
name|topology
argument_list|,
name|partition1
argument_list|,
name|partition2
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomTwoPartitions
specifier|public
name|void
name|testRandomTwoPartitions
parameter_list|()
block|{
name|TwoPartitions
name|topology
init|=
name|TwoPartitions
operator|.
name|random
argument_list|(
name|random
argument_list|()
argument_list|,
name|generateRandomStringSet
argument_list|(
literal|2
argument_list|,
literal|20
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|partition1
init|=
name|topology
operator|.
name|getNodesSideOne
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|partition2
init|=
name|topology
operator|.
name|getNodesSideTwo
argument_list|()
decl_stmt|;
name|checkTwoPartitions
argument_list|(
name|topology
argument_list|,
name|partition1
argument_list|,
name|partition2
argument_list|)
expr_stmt|;
block|}
DECL|method|checkTwoPartitions
specifier|private
name|void
name|checkTwoPartitions
parameter_list|(
name|TwoPartitions
name|topology
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|partition1
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|partition2
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|topology
operator|.
name|disrupt
argument_list|(
name|randomFrom
argument_list|(
name|partition1
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|partition2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|topology
operator|.
name|disrupt
argument_list|(
name|randomFrom
argument_list|(
name|partition2
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|partition1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|topology
operator|.
name|disrupt
argument_list|(
name|randomFrom
argument_list|(
name|partition1
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|partition1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|topology
operator|.
name|disrupt
argument_list|(
name|randomFrom
argument_list|(
name|partition2
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|partition2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|topology
operator|.
name|disrupt
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|partition1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|topology
operator|.
name|disrupt
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|partition2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|topology
operator|.
name|disrupt
argument_list|(
name|randomFrom
argument_list|(
name|partition1
argument_list|)
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|topology
operator|.
name|disrupt
argument_list|(
name|randomFrom
argument_list|(
name|partition2
argument_list|)
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|topology
operator|.
name|getMajoritySide
argument_list|()
operator|.
name|size
argument_list|()
operator|>=
name|topology
operator|.
name|getMinoritySide
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testIsolateAll
specifier|public
name|void
name|testIsolateAll
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|generateRandomStringSet
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|NetworkDisruption
operator|.
name|DisruptedLinks
name|topology
init|=
operator|new
name|NetworkDisruption
operator|.
name|IsolateAllNodes
argument_list|(
name|nodes
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|node1
init|=
name|randomFrom
argument_list|(
name|nodes
argument_list|)
decl_stmt|;
specifier|final
name|String
name|node2
init|=
name|randomFrom
argument_list|(
name|nodes
argument_list|)
decl_stmt|;
if|if
condition|(
name|node1
operator|.
name|equals
argument_list|(
name|node2
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|assertTrue
argument_list|(
name|topology
operator|.
name|nodes
argument_list|()
operator|.
name|contains
argument_list|(
name|node1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|topology
operator|.
name|nodes
argument_list|()
operator|.
name|contains
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|topology
operator|.
name|disrupt
argument_list|(
name|node1
argument_list|,
name|node2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBridge
specifier|public
name|void
name|testBridge
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|partition1
init|=
name|generateRandomStringSet
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|partition2
init|=
name|generateRandomStringSet
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|String
name|bridgeNode
init|=
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|Bridge
name|topology
init|=
operator|new
name|Bridge
argument_list|(
name|bridgeNode
argument_list|,
name|partition1
argument_list|,
name|partition2
argument_list|)
decl_stmt|;
name|checkBridge
argument_list|(
name|topology
argument_list|,
name|bridgeNode
argument_list|,
name|partition1
argument_list|,
name|partition2
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomBridge
specifier|public
name|void
name|testRandomBridge
parameter_list|()
block|{
name|Bridge
name|topology
init|=
name|Bridge
operator|.
name|random
argument_list|(
name|random
argument_list|()
argument_list|,
name|generateRandomStringSet
argument_list|(
literal|3
argument_list|,
literal|20
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|bridgeNode
init|=
name|topology
operator|.
name|getBridgeNode
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|partition1
init|=
name|topology
operator|.
name|getNodesSideOne
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|partition2
init|=
name|topology
operator|.
name|getNodesSideTwo
argument_list|()
decl_stmt|;
name|checkBridge
argument_list|(
name|topology
argument_list|,
name|bridgeNode
argument_list|,
name|partition1
argument_list|,
name|partition2
argument_list|)
expr_stmt|;
block|}
DECL|method|checkBridge
specifier|private
name|void
name|checkBridge
parameter_list|(
name|Bridge
name|topology
parameter_list|,
name|String
name|bridgeNode
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|partition1
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|partition2
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertTrue
argument_list|(
name|topology
operator|.
name|disrupt
argument_list|(
name|randomFrom
argument_list|(
name|partition1
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|partition2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|topology
operator|.
name|disrupt
argument_list|(
name|randomFrom
argument_list|(
name|partition2
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|partition1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|topology
operator|.
name|disrupt
argument_list|(
name|randomFrom
argument_list|(
name|partition1
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|partition1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|topology
operator|.
name|disrupt
argument_list|(
name|randomFrom
argument_list|(
name|partition1
argument_list|)
argument_list|,
name|bridgeNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|topology
operator|.
name|disrupt
argument_list|(
name|bridgeNode
argument_list|,
name|randomFrom
argument_list|(
name|partition1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|topology
operator|.
name|disrupt
argument_list|(
name|randomFrom
argument_list|(
name|partition2
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|partition2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|topology
operator|.
name|disrupt
argument_list|(
name|randomFrom
argument_list|(
name|partition2
argument_list|)
argument_list|,
name|bridgeNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|topology
operator|.
name|disrupt
argument_list|(
name|bridgeNode
argument_list|,
name|randomFrom
argument_list|(
name|partition2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|topology
operator|.
name|disrupt
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|partition1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|topology
operator|.
name|disrupt
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|randomFrom
argument_list|(
name|partition2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|topology
operator|.
name|disrupt
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|bridgeNode
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|topology
operator|.
name|disrupt
argument_list|(
name|randomFrom
argument_list|(
name|partition1
argument_list|)
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|topology
operator|.
name|disrupt
argument_list|(
name|randomFrom
argument_list|(
name|partition2
argument_list|)
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|topology
operator|.
name|disrupt
argument_list|(
name|bridgeNode
argument_list|,
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|generateRandomStringSet
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|generateRandomStringSet
parameter_list|(
name|int
name|minSize
parameter_list|,
name|int
name|maxSize
parameter_list|)
block|{
assert|assert
name|maxSize
operator|>=
name|minSize
assert|;
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|minSize
operator|+
name|randomInt
argument_list|(
name|maxSize
operator|-
name|minSize
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

