begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.rest.yaml.section
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|yaml
operator|.
name|section
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParsingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|yaml
operator|.
name|Features
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Represents a skip section that tells whether a specific test section or suite needs to be skipped  * based on:  * - the elasticsearch version the tests are running against  * - a specific test feature required that might not be implemented yet by the runner  */
end_comment

begin_class
DECL|class|SkipSection
specifier|public
class|class
name|SkipSection
block|{
comment|/**      * Parse a {@link SkipSection} if the next field is {@code skip}, otherwise returns {@link SkipSection#EMPTY}.      */
DECL|method|parseIfNext
specifier|public
specifier|static
name|SkipSection
name|parseIfNext
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|ParserUtils
operator|.
name|advanceToFieldName
argument_list|(
name|parser
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"skip"
operator|.
name|equals
argument_list|(
name|parser
operator|.
name|currentName
argument_list|()
argument_list|)
condition|)
block|{
name|SkipSection
name|section
init|=
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
return|return
name|section
return|;
block|}
return|return
name|EMPTY
return|;
block|}
DECL|method|parse
specifier|public
specifier|static
name|SkipSection
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Expected ["
operator|+
name|XContentParser
operator|.
name|Token
operator|.
name|START_OBJECT
operator|+
literal|", found ["
operator|+
name|parser
operator|.
name|currentToken
argument_list|()
operator|+
literal|"], the skip section is not properly indented"
argument_list|)
throw|;
block|}
name|String
name|currentFieldName
init|=
literal|null
decl_stmt|;
name|XContentParser
operator|.
name|Token
name|token
decl_stmt|;
name|String
name|version
init|=
literal|null
decl_stmt|;
name|String
name|reason
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|features
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|FIELD_NAME
condition|)
block|{
name|currentFieldName
operator|=
name|parser
operator|.
name|currentName
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|isValue
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"version"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|version
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"reason"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|reason
operator|=
name|parser
operator|.
name|text
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"features"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
name|features
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"field "
operator|+
name|currentFieldName
operator|+
literal|" not supported within skip section"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|token
operator|==
name|XContentParser
operator|.
name|Token
operator|.
name|START_ARRAY
condition|)
block|{
if|if
condition|(
literal|"features"
operator|.
name|equals
argument_list|(
name|currentFieldName
argument_list|)
condition|)
block|{
while|while
condition|(
name|parser
operator|.
name|nextToken
argument_list|()
operator|!=
name|XContentParser
operator|.
name|Token
operator|.
name|END_ARRAY
condition|)
block|{
name|features
operator|.
name|add
argument_list|(
name|parser
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|hasLength
argument_list|(
name|version
argument_list|)
operator|&&
name|features
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"version or features is mandatory within skip section"
argument_list|)
throw|;
block|}
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|version
argument_list|)
operator|&&
operator|!
name|Strings
operator|.
name|hasLength
argument_list|(
name|reason
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ParsingException
argument_list|(
name|parser
operator|.
name|getTokenLocation
argument_list|()
argument_list|,
literal|"reason is mandatory within skip version section"
argument_list|)
throw|;
block|}
return|return
operator|new
name|SkipSection
argument_list|(
name|version
argument_list|,
name|features
argument_list|,
name|reason
argument_list|)
return|;
block|}
DECL|field|EMPTY
specifier|public
specifier|static
specifier|final
name|SkipSection
name|EMPTY
init|=
operator|new
name|SkipSection
argument_list|()
decl_stmt|;
DECL|field|lowerVersion
specifier|private
specifier|final
name|Version
name|lowerVersion
decl_stmt|;
DECL|field|upperVersion
specifier|private
specifier|final
name|Version
name|upperVersion
decl_stmt|;
DECL|field|features
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|features
decl_stmt|;
DECL|field|reason
specifier|private
specifier|final
name|String
name|reason
decl_stmt|;
DECL|method|SkipSection
specifier|private
name|SkipSection
parameter_list|()
block|{
name|this
operator|.
name|lowerVersion
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|upperVersion
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|features
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|reason
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|SkipSection
specifier|public
name|SkipSection
parameter_list|(
name|String
name|versionRange
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|features
parameter_list|,
name|String
name|reason
parameter_list|)
block|{
assert|assert
name|features
operator|!=
literal|null
assert|;
name|Version
index|[]
name|versions
init|=
name|parseVersionRange
argument_list|(
name|versionRange
argument_list|)
decl_stmt|;
name|this
operator|.
name|lowerVersion
operator|=
name|versions
index|[
literal|0
index|]
expr_stmt|;
name|this
operator|.
name|upperVersion
operator|=
name|versions
index|[
literal|1
index|]
expr_stmt|;
name|this
operator|.
name|features
operator|=
name|features
expr_stmt|;
name|this
operator|.
name|reason
operator|=
name|reason
expr_stmt|;
block|}
DECL|method|getLowerVersion
specifier|public
name|Version
name|getLowerVersion
parameter_list|()
block|{
return|return
name|lowerVersion
return|;
block|}
DECL|method|getUpperVersion
specifier|public
name|Version
name|getUpperVersion
parameter_list|()
block|{
return|return
name|upperVersion
return|;
block|}
DECL|method|getFeatures
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getFeatures
parameter_list|()
block|{
return|return
name|features
return|;
block|}
DECL|method|getReason
specifier|public
name|String
name|getReason
parameter_list|()
block|{
return|return
name|reason
return|;
block|}
DECL|method|skip
specifier|public
name|boolean
name|skip
parameter_list|(
name|Version
name|currentVersion
parameter_list|)
block|{
if|if
condition|(
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|skip
init|=
name|lowerVersion
operator|!=
literal|null
operator|&&
name|upperVersion
operator|!=
literal|null
operator|&&
name|currentVersion
operator|.
name|onOrAfter
argument_list|(
name|lowerVersion
argument_list|)
operator|&&
name|currentVersion
operator|.
name|onOrBefore
argument_list|(
name|upperVersion
argument_list|)
decl_stmt|;
name|skip
operator||=
name|Features
operator|.
name|areAllSupported
argument_list|(
name|features
argument_list|)
operator|==
literal|false
expr_stmt|;
return|return
name|skip
return|;
block|}
DECL|method|isVersionCheck
specifier|public
name|boolean
name|isVersionCheck
parameter_list|()
block|{
return|return
name|features
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|isEmpty
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|EMPTY
operator|.
name|equals
argument_list|(
name|this
argument_list|)
return|;
block|}
DECL|method|parseVersionRange
specifier|private
name|Version
index|[]
name|parseVersionRange
parameter_list|(
name|String
name|versionRange
parameter_list|)
block|{
if|if
condition|(
name|versionRange
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|Version
index|[]
block|{
literal|null
block|,
literal|null
block|}
return|;
block|}
if|if
condition|(
name|versionRange
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|"all"
argument_list|)
condition|)
block|{
return|return
operator|new
name|Version
index|[]
block|{
name|VersionUtils
operator|.
name|getFirstVersion
argument_list|()
block|,
name|Version
operator|.
name|CURRENT
block|}
return|;
block|}
name|String
index|[]
name|skipVersions
init|=
name|versionRange
operator|.
name|split
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
if|if
condition|(
name|skipVersions
operator|.
name|length
operator|>
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"version range malformed: "
operator|+
name|versionRange
argument_list|)
throw|;
block|}
name|String
name|lower
init|=
name|skipVersions
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|upper
init|=
name|skipVersions
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
decl_stmt|;
return|return
operator|new
name|Version
index|[]
block|{
name|lower
operator|.
name|isEmpty
argument_list|()
condition|?
name|VersionUtils
operator|.
name|getFirstVersion
argument_list|()
else|:
name|Version
operator|.
name|fromString
argument_list|(
name|lower
argument_list|)
block|,
name|upper
operator|.
name|isEmpty
argument_list|()
condition|?
name|Version
operator|.
name|CURRENT
else|:
name|Version
operator|.
name|fromString
argument_list|(
name|upper
argument_list|)
block|}
return|;
block|}
DECL|method|getSkipMessage
specifier|public
name|String
name|getSkipMessage
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|StringBuilder
name|messageBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|messageBuilder
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
operator|.
name|append
argument_list|(
name|description
argument_list|)
operator|.
name|append
argument_list|(
literal|"] skipped,"
argument_list|)
expr_stmt|;
if|if
condition|(
name|reason
operator|!=
literal|null
condition|)
block|{
name|messageBuilder
operator|.
name|append
argument_list|(
literal|" reason: ["
argument_list|)
operator|.
name|append
argument_list|(
name|getReason
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|features
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|messageBuilder
operator|.
name|append
argument_list|(
literal|" unsupported features "
argument_list|)
operator|.
name|append
argument_list|(
name|getFeatures
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|messageBuilder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

