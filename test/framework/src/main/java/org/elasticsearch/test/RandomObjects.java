begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomStrings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationResponse
operator|.
name|ShardInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|replication
operator|.
name|ReplicationResponse
operator|.
name|ShardInfo
operator|.
name|Failure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|block
operator|.
name|ClusterBlockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|DiscoverySettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|IndexShardRecoveringException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|shard
operator|.
name|ShardNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomNumbers
operator|.
name|randomIntBetween
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomStrings
operator|.
name|randomAsciiOfLength
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomStrings
operator|.
name|randomUnicodeOfLengthBetween
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|INDEX_UUID_NA_VALUE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
operator|.
name|randomFrom
import|;
end_import

begin_class
DECL|class|RandomObjects
specifier|public
specifier|final
class|class
name|RandomObjects
block|{
DECL|method|RandomObjects
specifier|private
name|RandomObjects
parameter_list|()
block|{      }
comment|/**      * Returns a tuple containing random stored field values and their corresponding expected values once printed out      * via {@link org.elasticsearch.common.xcontent.ToXContent#toXContent(XContentBuilder, ToXContent.Params)} and parsed back via      * {@link org.elasticsearch.common.xcontent.XContentParser#objectText()}.      * Generates values based on what can get printed out. Stored fields values are retrieved from lucene and converted via      * {@link org.elasticsearch.index.mapper.MappedFieldType#valueForDisplay(Object)} to either strings, numbers or booleans.      *      * @param random Random generator      * @param xContentType the content type, used to determine what the expected values are for float numbers.      */
DECL|method|randomStoredFieldValues
specifier|public
specifier|static
name|Tuple
argument_list|<
name|List
argument_list|<
name|Object
argument_list|>
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|randomStoredFieldValues
parameter_list|(
name|Random
name|random
parameter_list|,
name|XContentType
name|xContentType
parameter_list|)
block|{
name|int
name|numValues
init|=
name|randomIntBetween
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|originalValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|expectedParsedValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|dataType
init|=
name|randomIntBetween
argument_list|(
name|random
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numValues
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|dataType
condition|)
block|{
case|case
literal|0
case|:
name|long
name|randomLong
init|=
name|random
operator|.
name|nextLong
argument_list|()
decl_stmt|;
name|originalValues
operator|.
name|add
argument_list|(
name|randomLong
argument_list|)
expr_stmt|;
name|expectedParsedValues
operator|.
name|add
argument_list|(
name|randomLong
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|int
name|randomInt
init|=
name|random
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|originalValues
operator|.
name|add
argument_list|(
name|randomInt
argument_list|)
expr_stmt|;
name|expectedParsedValues
operator|.
name|add
argument_list|(
name|randomInt
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|Short
name|randomShort
init|=
operator|(
name|short
operator|)
name|random
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|originalValues
operator|.
name|add
argument_list|(
name|randomShort
argument_list|)
expr_stmt|;
name|expectedParsedValues
operator|.
name|add
argument_list|(
name|randomShort
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|Byte
name|randomByte
init|=
operator|(
name|byte
operator|)
name|random
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|originalValues
operator|.
name|add
argument_list|(
name|randomByte
argument_list|)
expr_stmt|;
name|expectedParsedValues
operator|.
name|add
argument_list|(
name|randomByte
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|double
name|randomDouble
init|=
name|random
operator|.
name|nextDouble
argument_list|()
decl_stmt|;
name|originalValues
operator|.
name|add
argument_list|(
name|randomDouble
argument_list|)
expr_stmt|;
name|expectedParsedValues
operator|.
name|add
argument_list|(
name|randomDouble
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|Float
name|randomFloat
init|=
name|random
operator|.
name|nextFloat
argument_list|()
decl_stmt|;
name|originalValues
operator|.
name|add
argument_list|(
name|randomFloat
argument_list|)
expr_stmt|;
if|if
condition|(
name|xContentType
operator|==
name|XContentType
operator|.
name|CBOR
condition|)
block|{
comment|//with CBOR we get back a float
name|expectedParsedValues
operator|.
name|add
argument_list|(
name|randomFloat
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|xContentType
operator|==
name|XContentType
operator|.
name|SMILE
condition|)
block|{
comment|//with SMILE we get back a double
name|expectedParsedValues
operator|.
name|add
argument_list|(
name|randomFloat
operator|.
name|doubleValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//with JSON AND YAML we get back a double, but with float precision.
name|expectedParsedValues
operator|.
name|add
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|randomFloat
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
name|boolean
name|randomBoolean
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|originalValues
operator|.
name|add
argument_list|(
name|randomBoolean
argument_list|)
expr_stmt|;
name|expectedParsedValues
operator|.
name|add
argument_list|(
name|randomBoolean
argument_list|)
expr_stmt|;
break|break;
case|case
literal|7
case|:
name|String
name|randomString
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
name|RandomStrings
operator|.
name|randomAsciiOfLengthBetween
argument_list|(
name|random
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|)
else|:
name|randomUnicodeOfLengthBetween
argument_list|(
name|random
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|originalValues
operator|.
name|add
argument_list|(
name|randomString
argument_list|)
expr_stmt|;
name|expectedParsedValues
operator|.
name|add
argument_list|(
name|randomString
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
name|byte
index|[]
name|randomBytes
init|=
name|RandomStrings
operator|.
name|randomUnicodeOfLengthBetween
argument_list|(
name|random
argument_list|,
literal|10
argument_list|,
literal|50
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|BytesArray
name|randomBytesArray
init|=
operator|new
name|BytesArray
argument_list|(
name|randomBytes
argument_list|)
decl_stmt|;
name|originalValues
operator|.
name|add
argument_list|(
name|randomBytesArray
argument_list|)
expr_stmt|;
if|if
condition|(
name|xContentType
operator|==
name|XContentType
operator|.
name|JSON
operator|||
name|xContentType
operator|==
name|XContentType
operator|.
name|YAML
condition|)
block|{
comment|//JSON and YAML write the base64 format
name|expectedParsedValues
operator|.
name|add
argument_list|(
name|Base64
operator|.
name|getEncoder
argument_list|()
operator|.
name|encodeToString
argument_list|(
name|randomBytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//SMILE and CBOR write the original bytes as they support binary format
name|expectedParsedValues
operator|.
name|add
argument_list|(
name|randomBytesArray
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|return
name|Tuple
operator|.
name|tuple
argument_list|(
name|originalValues
argument_list|,
name|expectedParsedValues
argument_list|)
return|;
block|}
comment|/**      * Returns a random source containing a random number of fields, objects and array, with maximum depth 5.      *      * @param random Random generator      */
DECL|method|randomSource
specifier|public
specifier|static
name|BytesReference
name|randomSource
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
comment|//the source can be stored in any format and eventually converted when retrieved depending on the format of the response
return|return
name|randomSource
argument_list|(
name|random
argument_list|,
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|,
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns a random source in a given XContentType containing a random number of fields, objects and array, with maximum depth 5.      * The minimum number of fields per object is 1.      *      * @param random Random generator      */
DECL|method|randomSource
specifier|public
specifier|static
name|BytesReference
name|randomSource
parameter_list|(
name|Random
name|random
parameter_list|,
name|XContentType
name|xContentType
parameter_list|)
block|{
return|return
name|randomSource
argument_list|(
name|random
argument_list|,
name|xContentType
argument_list|,
literal|1
argument_list|)
return|;
block|}
comment|/**      * Returns a random source in a given XContentType containing a random number of fields, objects and array, with maximum depth 5.      * The minimum number of fields per object is provided as an argument.      *      * @param random Random generator      */
DECL|method|randomSource
specifier|public
specifier|static
name|BytesReference
name|randomSource
parameter_list|(
name|Random
name|random
parameter_list|,
name|XContentType
name|xContentType
parameter_list|,
name|int
name|minNumFields
parameter_list|)
block|{
try|try
init|(
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|xContentType
argument_list|)
init|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|addFields
argument_list|(
name|random
argument_list|,
name|builder
argument_list|,
name|minNumFields
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|bytes
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Randomly adds fields, objects, or arrays to the provided builder. The maximum depth is 5.      */
DECL|method|addFields
specifier|private
specifier|static
name|void
name|addFields
parameter_list|(
name|Random
name|random
parameter_list|,
name|XContentBuilder
name|builder
parameter_list|,
name|int
name|minNumFields
parameter_list|,
name|int
name|currentDepth
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numFields
init|=
name|randomIntBetween
argument_list|(
name|random
argument_list|,
name|minNumFields
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numFields
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|currentDepth
operator|<
literal|5
operator|&&
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|(
name|RandomStrings
operator|.
name|randomAsciiOfLengthBetween
argument_list|(
name|random
argument_list|,
literal|4
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|addFields
argument_list|(
name|random
argument_list|,
name|builder
argument_list|,
name|minNumFields
argument_list|,
name|currentDepth
operator|+
literal|1
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|startArray
argument_list|(
name|RandomStrings
operator|.
name|randomAsciiOfLengthBetween
argument_list|(
name|random
argument_list|,
literal|4
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|numElements
init|=
name|randomIntBetween
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|boolean
name|object
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|int
name|dataType
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|object
operator|==
literal|false
condition|)
block|{
name|dataType
operator|=
name|randomDataType
argument_list|(
name|random
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numElements
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|object
condition|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
name|addFields
argument_list|(
name|random
argument_list|,
name|builder
argument_list|,
name|minNumFields
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|value
argument_list|(
name|randomFieldValue
argument_list|(
name|random
argument_list|,
name|dataType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|builder
operator|.
name|field
argument_list|(
name|RandomStrings
operator|.
name|randomAsciiOfLengthBetween
argument_list|(
name|random
argument_list|,
literal|4
argument_list|,
literal|10
argument_list|)
argument_list|,
name|randomFieldValue
argument_list|(
name|random
argument_list|,
name|randomDataType
argument_list|(
name|random
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|randomDataType
specifier|private
specifier|static
name|int
name|randomDataType
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
return|return
name|randomIntBetween
argument_list|(
name|random
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
return|;
block|}
DECL|method|randomFieldValue
specifier|private
specifier|static
name|Object
name|randomFieldValue
parameter_list|(
name|Random
name|random
parameter_list|,
name|int
name|dataType
parameter_list|)
block|{
switch|switch
condition|(
name|dataType
condition|)
block|{
case|case
literal|0
case|:
return|return
name|RandomStrings
operator|.
name|randomAsciiOfLengthBetween
argument_list|(
name|random
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|RandomStrings
operator|.
name|randomAsciiOfLengthBetween
argument_list|(
name|random
argument_list|,
literal|3
argument_list|,
literal|10
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|random
operator|.
name|nextLong
argument_list|()
return|;
case|case
literal|3
case|:
return|return
name|random
operator|.
name|nextDouble
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
comment|/**      * Returns a tuple that contains a randomized {@link ShardInfo} value (left side) and its corresponding      * value (right side) after it has been printed out as a {@link ToXContent} and parsed back using a parsing      * method like {@link ShardInfo#fromXContent(XContentParser)}. The ShardInfo randomly contains shard failures.      *      * @param random Random generator      */
DECL|method|randomShardInfo
specifier|public
specifier|static
name|Tuple
argument_list|<
name|ShardInfo
argument_list|,
name|ShardInfo
argument_list|>
name|randomShardInfo
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
return|return
name|randomShardInfo
argument_list|(
name|random
argument_list|,
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns a tuple that contains a randomized {@link ShardInfo} value (left side) and its corresponding      * value (right side) after it has been printed out as a {@link ToXContent} and parsed back using a parsing      * method like {@link ShardInfo#fromXContent(XContentParser)}. A `withShardFailures` parameter indicates if      * the randomized ShardInfo must or must not contain shard failures.      *      * @param random            Random generator      * @param withShardFailures indicates if the generated ShardInfo must contain shard failures      */
DECL|method|randomShardInfo
specifier|public
specifier|static
name|Tuple
argument_list|<
name|ShardInfo
argument_list|,
name|ShardInfo
argument_list|>
name|randomShardInfo
parameter_list|(
name|Random
name|random
parameter_list|,
name|boolean
name|withShardFailures
parameter_list|)
block|{
name|int
name|total
init|=
name|randomIntBetween
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
if|if
condition|(
name|withShardFailures
operator|==
literal|false
condition|)
block|{
return|return
name|Tuple
operator|.
name|tuple
argument_list|(
operator|new
name|ShardInfo
argument_list|(
name|total
argument_list|,
name|total
argument_list|)
argument_list|,
operator|new
name|ShardInfo
argument_list|(
name|total
argument_list|,
name|total
argument_list|)
argument_list|)
return|;
block|}
name|int
name|successful
init|=
name|randomIntBetween
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
operator|(
name|total
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|failures
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
operator|(
name|total
operator|-
name|successful
operator|)
argument_list|)
decl_stmt|;
name|Failure
index|[]
name|actualFailures
init|=
operator|new
name|Failure
index|[
name|failures
index|]
decl_stmt|;
name|Failure
index|[]
name|expectedFailures
init|=
operator|new
name|Failure
index|[
name|failures
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|failures
condition|;
name|i
operator|++
control|)
block|{
name|Tuple
argument_list|<
name|Failure
argument_list|,
name|Failure
argument_list|>
name|failure
init|=
name|randomShardInfoFailure
argument_list|(
name|random
argument_list|)
decl_stmt|;
name|actualFailures
index|[
name|i
index|]
operator|=
name|failure
operator|.
name|v1
argument_list|()
expr_stmt|;
name|expectedFailures
index|[
name|i
index|]
operator|=
name|failure
operator|.
name|v2
argument_list|()
expr_stmt|;
block|}
return|return
name|Tuple
operator|.
name|tuple
argument_list|(
operator|new
name|ShardInfo
argument_list|(
name|total
argument_list|,
name|successful
argument_list|,
name|actualFailures
argument_list|)
argument_list|,
operator|new
name|ShardInfo
argument_list|(
name|total
argument_list|,
name|successful
argument_list|,
name|expectedFailures
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Returns a tuple that contains a randomized {@link Failure} value (left side) and its corresponding      * value (right side) after it has been printed out as a {@link ToXContent} and parsed back using a parsing      * method like {@link ShardInfo.Failure#fromXContent(XContentParser)}.      *      * @param random Random generator      */
DECL|method|randomShardInfoFailure
specifier|private
specifier|static
name|Tuple
argument_list|<
name|Failure
argument_list|,
name|Failure
argument_list|>
name|randomShardInfoFailure
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
name|String
name|index
init|=
name|randomAsciiOfLength
argument_list|(
name|random
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|String
name|indexUuid
init|=
name|randomAsciiOfLength
argument_list|(
name|random
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|int
name|shardId
init|=
name|randomIntBetween
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|String
name|nodeId
init|=
name|randomAsciiOfLength
argument_list|(
name|random
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|RestStatus
name|status
init|=
name|randomFrom
argument_list|(
name|random
argument_list|,
name|RestStatus
operator|.
name|INTERNAL_SERVER_ERROR
argument_list|,
name|RestStatus
operator|.
name|FORBIDDEN
argument_list|,
name|RestStatus
operator|.
name|NOT_FOUND
argument_list|)
decl_stmt|;
name|boolean
name|primary
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|ShardId
name|shard
init|=
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
name|indexUuid
argument_list|,
name|shardId
argument_list|)
decl_stmt|;
name|Exception
name|actualException
decl_stmt|;
name|ElasticsearchException
name|expectedException
decl_stmt|;
name|int
name|type
init|=
name|randomIntBetween
argument_list|(
name|random
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
literal|0
case|:
name|actualException
operator|=
operator|new
name|ClusterBlockException
argument_list|(
name|singleton
argument_list|(
name|DiscoverySettings
operator|.
name|NO_MASTER_BLOCK_WRITES
argument_list|)
argument_list|)
expr_stmt|;
name|expectedException
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=cluster_block_exception, "
operator|+
literal|"reason=blocked by: [SERVICE_UNAVAILABLE/2/no master];]"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|actualException
operator|=
operator|new
name|ShardNotFoundException
argument_list|(
name|shard
argument_list|)
expr_stmt|;
name|expectedException
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=shard_not_found_exception, "
operator|+
literal|"reason=no such shard]"
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|setShard
argument_list|(
name|shard
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|actualException
operator|=
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Closed resource"
argument_list|,
operator|new
name|RuntimeException
argument_list|(
literal|"Resource"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedException
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=illegal_argument_exception, "
operator|+
literal|"reason=Closed resource]"
argument_list|,
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=runtime_exception, reason=Resource]"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|actualException
operator|=
operator|new
name|IndexShardRecoveringException
argument_list|(
name|shard
argument_list|)
expr_stmt|;
name|expectedException
operator|=
operator|new
name|ElasticsearchException
argument_list|(
literal|"Elasticsearch exception [type=index_shard_recovering_exception, "
operator|+
literal|"reason=CurrentState[RECOVERING] Already recovering]"
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|setShard
argument_list|(
name|shard
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"No randomized exceptions generated for type ["
operator|+
name|type
operator|+
literal|"]"
argument_list|)
throw|;
block|}
name|Failure
name|actual
init|=
operator|new
name|Failure
argument_list|(
name|shard
argument_list|,
name|nodeId
argument_list|,
name|actualException
argument_list|,
name|status
argument_list|,
name|primary
argument_list|)
decl_stmt|;
name|Failure
name|expected
init|=
operator|new
name|Failure
argument_list|(
operator|new
name|ShardId
argument_list|(
name|index
argument_list|,
name|INDEX_UUID_NA_VALUE
argument_list|,
name|shardId
argument_list|)
argument_list|,
name|nodeId
argument_list|,
name|expectedException
argument_list|,
name|status
argument_list|,
name|primary
argument_list|)
decl_stmt|;
return|return
name|Tuple
operator|.
name|tuple
argument_list|(
name|actual
argument_list|,
name|expected
argument_list|)
return|;
block|}
block|}
end_class

end_unit

