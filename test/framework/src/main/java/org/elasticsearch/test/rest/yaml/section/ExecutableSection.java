begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.rest.yaml.section
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|yaml
operator|.
name|section
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|ParseField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|NamedXContentRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|yaml
operator|.
name|ClientYamlTestExecutionContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Represents a test fragment that can be executed (e.g. api call, assertion)  */
end_comment

begin_interface
DECL|interface|ExecutableSection
specifier|public
interface|interface
name|ExecutableSection
block|{
comment|/**      * {@link NamedXContentRegistry} needed in the {@link XContentParser} before calling {@link ExecutableSection#parse(XContentParser)}.      */
DECL|field|XCONTENT_REGISTRY
name|NamedXContentRegistry
name|XCONTENT_REGISTRY
init|=
operator|new
name|NamedXContentRegistry
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|NamedXContentRegistry
operator|.
name|Entry
argument_list|(
name|ExecutableSection
operator|.
name|class
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"do"
argument_list|)
argument_list|,
name|DoSection
operator|::
name|parse
argument_list|)
argument_list|,
operator|new
name|NamedXContentRegistry
operator|.
name|Entry
argument_list|(
name|ExecutableSection
operator|.
name|class
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"set"
argument_list|)
argument_list|,
name|SetSection
operator|::
name|parse
argument_list|)
argument_list|,
operator|new
name|NamedXContentRegistry
operator|.
name|Entry
argument_list|(
name|ExecutableSection
operator|.
name|class
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"match"
argument_list|)
argument_list|,
name|MatchAssertion
operator|::
name|parse
argument_list|)
argument_list|,
operator|new
name|NamedXContentRegistry
operator|.
name|Entry
argument_list|(
name|ExecutableSection
operator|.
name|class
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"is_true"
argument_list|)
argument_list|,
name|IsTrueAssertion
operator|::
name|parse
argument_list|)
argument_list|,
operator|new
name|NamedXContentRegistry
operator|.
name|Entry
argument_list|(
name|ExecutableSection
operator|.
name|class
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"is_false"
argument_list|)
argument_list|,
name|IsFalseAssertion
operator|::
name|parse
argument_list|)
argument_list|,
operator|new
name|NamedXContentRegistry
operator|.
name|Entry
argument_list|(
name|ExecutableSection
operator|.
name|class
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"gt"
argument_list|)
argument_list|,
name|GreaterThanAssertion
operator|::
name|parse
argument_list|)
argument_list|,
operator|new
name|NamedXContentRegistry
operator|.
name|Entry
argument_list|(
name|ExecutableSection
operator|.
name|class
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"gte"
argument_list|)
argument_list|,
name|GreaterThanEqualToAssertion
operator|::
name|parse
argument_list|)
argument_list|,
operator|new
name|NamedXContentRegistry
operator|.
name|Entry
argument_list|(
name|ExecutableSection
operator|.
name|class
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"lt"
argument_list|)
argument_list|,
name|LessThanAssertion
operator|::
name|parse
argument_list|)
argument_list|,
operator|new
name|NamedXContentRegistry
operator|.
name|Entry
argument_list|(
name|ExecutableSection
operator|.
name|class
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"lte"
argument_list|)
argument_list|,
name|LessThanOrEqualToAssertion
operator|::
name|parse
argument_list|)
argument_list|,
operator|new
name|NamedXContentRegistry
operator|.
name|Entry
argument_list|(
name|ExecutableSection
operator|.
name|class
argument_list|,
operator|new
name|ParseField
argument_list|(
literal|"length"
argument_list|)
argument_list|,
name|LengthAssertion
operator|::
name|parse
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
DECL|method|parse
specifier|static
name|ExecutableSection
name|parse
parameter_list|(
name|XContentParser
name|parser
parameter_list|)
throws|throws
name|IOException
block|{
name|ParserUtils
operator|.
name|advanceToFieldName
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|String
name|section
init|=
name|parser
operator|.
name|currentName
argument_list|()
decl_stmt|;
name|XContentLocation
name|location
init|=
name|parser
operator|.
name|getTokenLocation
argument_list|()
decl_stmt|;
try|try
block|{
name|ExecutableSection
name|executableSection
init|=
name|parser
operator|.
name|namedObject
argument_list|(
name|ExecutableSection
operator|.
name|class
argument_list|,
name|section
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
return|return
name|executableSection
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error parsing section starting at ["
operator|+
name|location
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Get the location in the test that this was defined.       */
DECL|method|getLocation
name|XContentLocation
name|getLocation
parameter_list|()
function_decl|;
comment|/**      * Executes the section passing in the execution context      */
DECL|method|execute
name|void
name|execute
parameter_list|(
name|ClientYamlTestExecutionContext
name|executionContext
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_interface

end_unit

