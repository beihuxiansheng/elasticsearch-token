begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|TestGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomInts
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ExceptionsHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|DocWriteResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ShardOperationFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
operator|.
name|NodeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|node
operator|.
name|info
operator|.
name|NodesInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|state
operator|.
name|ClusterStateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|cluster
operator|.
name|tasks
operator|.
name|PendingClusterTasksResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|create
operator|.
name|CreateIndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|exists
operator|.
name|indices
operator|.
name|IndicesExistsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|flush
operator|.
name|FlushResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|forcemerge
operator|.
name|ForceMergeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|get
operator|.
name|GetIndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|mapping
operator|.
name|get
operator|.
name|GetMappingsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|refresh
operator|.
name|RefreshResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|segments
operator|.
name|IndicesSegmentResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|admin
operator|.
name|indices
operator|.
name|template
operator|.
name|put
operator|.
name|PutIndexTemplateRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|bulk
operator|.
name|BulkResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|get
operator|.
name|GetResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexRequestBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|index
operator|.
name|IndexResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|ClearScrollResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|IndicesOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|AdminClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|RestClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|RestClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|health
operator|.
name|ClusterHealthStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MappingMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|MetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|IndexShardRoutingTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|ShardRouting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|UnassignedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|DiskThresholdSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|routing
operator|.
name|allocation
operator|.
name|decider
operator|.
name|EnableAllocationDecider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|service
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableOpenMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|network
operator|.
name|NetworkModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|regex
operator|.
name|Regex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Setting
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|ByteSizeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|EsRejectedExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|support
operator|.
name|XContentMapValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|Discovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ElectMasterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ZenDiscovery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|MergePolicyConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|MergeSchedulerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|MockEngineFactoryPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|codec
operator|.
name|CodecService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|DocumentMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|translog
operator|.
name|Translog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesQueryCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesRequestCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|store
operator|.
name|IndicesStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|node
operator|.
name|NodeMocksPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|rest
operator|.
name|RestStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|MockSearchService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchHit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|client
operator|.
name|RandomizingClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|discovery
operator|.
name|MockZenPing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
operator|.
name|ServiceDisruptionScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|store
operator|.
name|MockFSIndexStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
operator|.
name|MockTransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|AssertingTransportInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|MockTcpTransportPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|ElementType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Inherited
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Retention
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|RetentionPolicy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Target
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BooleanSupplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
operator|.
name|syncedFlushRequest
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_REPLICAS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
operator|.
name|SETTING_NUMBER_OF_SHARDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|CollectionUtils
operator|.
name|eagerPartition
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|matchAllQuery
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|XContentTestUtils
operator|.
name|convertToMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|XContentTestUtils
operator|.
name|differenceBetweenMapsIgnoringArrayOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertAcked
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertNoFailures
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertNoTimeout
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|emptyArray
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|emptyIterable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|startsWith
import|;
end_import

begin_comment
comment|/**  * {@link ESIntegTestCase} is an abstract base class to run integration  * tests against a JVM private Elasticsearch Cluster. The test class supports 2 different  * cluster scopes.  *<ul>  *<li>{@link Scope#TEST} - uses a new cluster for each individual test method.</li>  *<li>{@link Scope#SUITE} - uses a cluster shared across all test methods in the same suite</li>  *</ul>  *<p>  * The most common test scope is {@link Scope#SUITE} which shares a cluster per test suite.  *<p>  * If the test methods need specific node settings or change persistent and/or transient cluster settings {@link Scope#TEST}  * should be used. To configure a scope for the test cluster the {@link ClusterScope} annotation  * should be used, here is an example:  *<pre>  *  * {@literal @}NodeScope(scope=Scope.TEST) public class SomeIT extends ESIntegTestCase {  * public void testMethod() {}  * }  *</pre>  *<p>  * If no {@link ClusterScope} annotation is present on an integration test the default scope is {@link Scope#SUITE}  *<p>  * A test cluster creates a set of nodes in the background before the test starts. The number of nodes in the cluster is  * determined at random and can change across tests. The {@link ClusterScope} allows configuring the initial number of nodes  * that are created before the tests start.  *<pre>  * {@literal @}NodeScope(scope=Scope.SUITE, numDataNodes=3)  * public class SomeIT extends ESIntegTestCase {  * public void testMethod() {}  * }  *</pre>  *<p>  * Note, the {@link ESIntegTestCase} uses randomized settings on a cluster and index level. For instance  * each test might use different directory implementation for each test or will return a random client to one of the  * nodes in the cluster for each call to {@link #client()}. Test failures might only be reproducible if the correct  * system properties are passed to the test execution environment.  *<p>  * This class supports the following system properties (passed with -Dkey=value to the application)  *<ul>  *<li>-D{@value #TESTS_CLIENT_RATIO} - a double value in the interval [0..1] which defines the ration between node and transport clients used</li>  *<li>-D{@value #TESTS_ENABLE_MOCK_MODULES} - a boolean value to enable or disable mock modules. This is  * useful to test the system without asserting modules that to make sure they don't hide any bugs in production.</li>  *<li> - a random seed used to initialize the index random context.  *</ul>  */
end_comment

begin_class
annotation|@
name|LuceneTestCase
operator|.
name|SuppressFileSystems
argument_list|(
literal|"ExtrasFS"
argument_list|)
comment|// doesn't work with potential multi data path from test cluster yet
DECL|class|ESIntegTestCase
specifier|public
specifier|abstract
class|class
name|ESIntegTestCase
extends|extends
name|ESTestCase
block|{
comment|/**      * Property that controls whether ThirdParty Integration tests are run (not the default).      */
DECL|field|SYSPROP_THIRDPARTY
specifier|public
specifier|static
specifier|final
name|String
name|SYSPROP_THIRDPARTY
init|=
literal|"tests.thirdparty"
decl_stmt|;
comment|/**      * Annotation for third-party integration tests.      *<p>      * These are tests the require a third-party service in order to run. They      * may require the user to manually configure an external process (such as rabbitmq),      * or may additionally require some external configuration (e.g. AWS credentials)      * via the {@code tests.config} system property.      */
annotation|@
name|Inherited
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation|@
name|Target
argument_list|(
name|ElementType
operator|.
name|TYPE
argument_list|)
annotation|@
name|TestGroup
argument_list|(
name|enabled
operator|=
literal|false
argument_list|,
name|sysProperty
operator|=
name|ESIntegTestCase
operator|.
name|SYSPROP_THIRDPARTY
argument_list|)
DECL|interface|ThirdParty
specifier|public
annotation_defn|@interface
name|ThirdParty
block|{     }
comment|/** node names of the corresponding clusters will start with these prefixes */
DECL|field|SUITE_CLUSTER_NODE_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|SUITE_CLUSTER_NODE_PREFIX
init|=
literal|"node_s"
decl_stmt|;
DECL|field|TEST_CLUSTER_NODE_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|TEST_CLUSTER_NODE_PREFIX
init|=
literal|"node_t"
decl_stmt|;
comment|/**      * Key used to set the transport client ratio via the commandline -D{@value #TESTS_CLIENT_RATIO}      */
DECL|field|TESTS_CLIENT_RATIO
specifier|public
specifier|static
specifier|final
name|String
name|TESTS_CLIENT_RATIO
init|=
literal|"tests.client.ratio"
decl_stmt|;
comment|/**      * Key used to eventually switch to using an external cluster and provide its transport addresses      */
DECL|field|TESTS_CLUSTER
specifier|public
specifier|static
specifier|final
name|String
name|TESTS_CLUSTER
init|=
literal|"tests.cluster"
decl_stmt|;
comment|/**      * Key used to retrieve the index random seed from the index settings on a running node.      * The value of this seed can be used to initialize a random context for a specific index.      * It's set once per test via a generic index template.      */
DECL|field|INDEX_TEST_SEED_SETTING
specifier|public
specifier|static
specifier|final
name|Setting
argument_list|<
name|Long
argument_list|>
name|INDEX_TEST_SEED_SETTING
init|=
name|Setting
operator|.
name|longSetting
argument_list|(
literal|"index.tests.seed"
argument_list|,
literal|0
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|,
name|Property
operator|.
name|IndexScope
argument_list|)
decl_stmt|;
comment|/**      * A boolean value to enable or disable mock modules. This is useful to test the      * system without asserting modules that to make sure they don't hide any bugs in      * production.      *      * @see ESIntegTestCase      */
DECL|field|TESTS_ENABLE_MOCK_MODULES
specifier|public
specifier|static
specifier|final
name|String
name|TESTS_ENABLE_MOCK_MODULES
init|=
literal|"tests.enable_mock_modules"
decl_stmt|;
comment|/**      * Threshold at which indexing switches from frequently async to frequently bulk.      */
DECL|field|FREQUENT_BULK_THRESHOLD
specifier|private
specifier|static
specifier|final
name|int
name|FREQUENT_BULK_THRESHOLD
init|=
literal|300
decl_stmt|;
comment|/**      * Threshold at which bulk indexing will always be used.      */
DECL|field|ALWAYS_BULK_THRESHOLD
specifier|private
specifier|static
specifier|final
name|int
name|ALWAYS_BULK_THRESHOLD
init|=
literal|3000
decl_stmt|;
comment|/**      * Maximum number of async operations that indexRandom will kick off at one time.      */
DECL|field|MAX_IN_FLIGHT_ASYNC_INDEXES
specifier|private
specifier|static
specifier|final
name|int
name|MAX_IN_FLIGHT_ASYNC_INDEXES
init|=
literal|150
decl_stmt|;
comment|/**      * Maximum number of documents in a single bulk index request.      */
DECL|field|MAX_BULK_INDEX_REQUEST_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|MAX_BULK_INDEX_REQUEST_SIZE
init|=
literal|1000
decl_stmt|;
comment|/**      * Default minimum number of shards for an index      */
DECL|field|DEFAULT_MIN_NUM_SHARDS
specifier|protected
specifier|static
specifier|final
name|int
name|DEFAULT_MIN_NUM_SHARDS
init|=
literal|1
decl_stmt|;
comment|/**      * Default maximum number of shards for an index      */
DECL|field|DEFAULT_MAX_NUM_SHARDS
specifier|protected
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_NUM_SHARDS
init|=
literal|10
decl_stmt|;
comment|/**      * The current cluster depending on the configured {@link Scope}.      * By default if no {@link ClusterScope} is configured this will hold a reference to the suite cluster.      */
DECL|field|currentCluster
specifier|private
specifier|static
name|TestCluster
name|currentCluster
decl_stmt|;
DECL|field|restClient
specifier|private
specifier|static
name|RestClient
name|restClient
init|=
literal|null
decl_stmt|;
DECL|field|TRANSPORT_CLIENT_RATIO
specifier|private
specifier|static
specifier|final
name|double
name|TRANSPORT_CLIENT_RATIO
init|=
name|transportClientRatio
argument_list|()
decl_stmt|;
DECL|field|clusters
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|TestCluster
argument_list|>
name|clusters
init|=
operator|new
name|IdentityHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|INSTANCE
specifier|private
specifier|static
name|ESIntegTestCase
name|INSTANCE
init|=
literal|null
decl_stmt|;
comment|// see @SuiteScope
DECL|field|SUITE_SEED
specifier|private
specifier|static
name|Long
name|SUITE_SEED
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|SUITE_SEED
operator|=
name|randomLong
argument_list|()
expr_stmt|;
name|initializeSuiteScope
argument_list|()
expr_stmt|;
block|}
DECL|method|beforeInternal
specifier|protected
specifier|final
name|void
name|beforeInternal
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Scope
name|currentClusterScope
init|=
name|getCurrentClusterScope
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|currentClusterScope
condition|)
block|{
case|case
name|SUITE
case|:
assert|assert
name|SUITE_SEED
operator|!=
literal|null
operator|:
literal|"Suite seed was not initialized"
assert|;
name|currentCluster
operator|=
name|buildAndPutCluster
argument_list|(
name|currentClusterScope
argument_list|,
name|SUITE_SEED
argument_list|)
expr_stmt|;
break|break;
case|case
name|TEST
case|:
name|currentCluster
operator|=
name|buildAndPutCluster
argument_list|(
name|currentClusterScope
argument_list|,
name|randomLong
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|fail
argument_list|(
literal|"Unknown Scope: ["
operator|+
name|currentClusterScope
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|cluster
argument_list|()
operator|.
name|beforeTest
argument_list|(
name|random
argument_list|()
argument_list|,
name|getPerTestTransportClientRatio
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
argument_list|()
operator|.
name|wipe
argument_list|(
name|excludeTemplates
argument_list|()
argument_list|)
expr_stmt|;
name|randomIndexTemplate
argument_list|()
expr_stmt|;
block|}
DECL|method|printTestMessage
specifier|private
name|void
name|printTestMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|isSuiteScopedTest
argument_list|(
name|getClass
argument_list|()
argument_list|)
operator|&&
operator|(
name|getTestName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"<unknown>"
argument_list|)
operator|)
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"[{}]: {} suite"
argument_list|,
name|getTestClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"[{}#{}]: {} test"
argument_list|,
name|getTestClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|getTestName
argument_list|()
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates a randomized index template. This template is used to pass in randomized settings on a      * per index basis. Allows to enable/disable the randomization for number of shards and replicas      */
DECL|method|randomIndexTemplate
specifier|public
name|void
name|randomIndexTemplate
parameter_list|()
throws|throws
name|IOException
block|{
comment|// TODO move settings for random directory etc here into the index based randomized settings.
if|if
condition|(
name|cluster
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Settings
operator|.
name|Builder
name|randomSettingsBuilder
init|=
name|setRandomIndexSettings
argument_list|(
name|random
argument_list|()
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isInternalCluster
argument_list|()
condition|)
block|{
comment|// this is only used by mock plugins and if the cluster is not internal we just can't set it
name|randomSettingsBuilder
operator|.
name|put
argument_list|(
name|INDEX_TEST_SEED_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|randomSettingsBuilder
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
name|numberOfShards
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|numberOfReplicas
argument_list|()
argument_list|)
expr_stmt|;
comment|// if the test class is annotated with SuppressCodecs("*"), it means don't use lucene's codec randomization
comment|// otherwise, use it, it has assertions and so on that can find bugs.
name|SuppressCodecs
name|annotation
init|=
name|getClass
argument_list|()
operator|.
name|getAnnotation
argument_list|(
name|SuppressCodecs
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotation
operator|!=
literal|null
operator|&&
name|annotation
operator|.
name|value
argument_list|()
operator|.
name|length
operator|==
literal|1
operator|&&
literal|"*"
operator|.
name|equals
argument_list|(
name|annotation
operator|.
name|value
argument_list|()
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|randomSettingsBuilder
operator|.
name|put
argument_list|(
literal|"index.codec"
argument_list|,
name|randomFrom
argument_list|(
name|CodecService
operator|.
name|DEFAULT_CODEC
argument_list|,
name|CodecService
operator|.
name|BEST_COMPRESSION_CODEC
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|randomSettingsBuilder
operator|.
name|put
argument_list|(
literal|"index.codec"
argument_list|,
name|CodecService
operator|.
name|LUCENE_DEFAULT_CODEC
argument_list|)
expr_stmt|;
block|}
name|XContentBuilder
name|mappings
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|frequently
argument_list|()
operator|&&
name|randomDynamicTemplates
argument_list|()
condition|)
block|{
name|mappings
operator|=
name|XContentFactory
operator|.
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
operator|.
name|startObject
argument_list|(
literal|"_default_"
argument_list|)
operator|.
name|endObject
argument_list|()
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|setting
range|:
name|randomSettingsBuilder
operator|.
name|internalMap
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
literal|"non index. prefix setting set on index template, its a node setting..."
argument_list|,
name|setting
argument_list|,
name|startsWith
argument_list|(
literal|"index."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// always default delayed allocation to 0 to make sure we have tests are not delayed
name|randomSettingsBuilder
operator|.
name|put
argument_list|(
name|UnassignedInfo
operator|.
name|INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|randomSettingsBuilder
operator|.
name|put
argument_list|(
name|IndexModule
operator|.
name|INDEX_QUERY_CACHE_ENABLED_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|randomSettingsBuilder
operator|.
name|put
argument_list|(
name|IndexModule
operator|.
name|INDEX_QUERY_CACHE_EVERYTHING_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|PutIndexTemplateRequestBuilder
name|putTemplate
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|preparePutTemplate
argument_list|(
literal|"random_index_template"
argument_list|)
operator|.
name|setTemplate
argument_list|(
literal|"*"
argument_list|)
operator|.
name|setOrder
argument_list|(
literal|0
argument_list|)
operator|.
name|setSettings
argument_list|(
name|randomSettingsBuilder
argument_list|)
decl_stmt|;
if|if
condition|(
name|mappings
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"test using _default_ mappings: [{}]"
argument_list|,
name|mappings
operator|.
name|bytes
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|putTemplate
operator|.
name|addMapping
argument_list|(
literal|"_default_"
argument_list|,
name|mappings
argument_list|)
expr_stmt|;
block|}
name|assertAcked
argument_list|(
name|putTemplate
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setRandomIndexSettings
specifier|protected
name|Settings
operator|.
name|Builder
name|setRandomIndexSettings
parameter_list|(
name|Random
name|random
parameter_list|,
name|Settings
operator|.
name|Builder
name|builder
parameter_list|)
block|{
name|setRandomIndexMergeSettings
argument_list|(
name|random
argument_list|,
name|builder
argument_list|)
expr_stmt|;
name|setRandomIndexTranslogSettings
argument_list|(
name|random
argument_list|,
name|builder
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|MergeSchedulerConfig
operator|.
name|AUTO_THROTTLE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|IndicesRequestCache
operator|.
name|INDEX_CACHE_REQUEST_ENABLED_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|IndexSettings
operator|.
name|INDEX_CHECK_ON_STARTUP
operator|.
name|getKey
argument_list|()
argument_list|,
name|randomFrom
argument_list|(
literal|"false"
argument_list|,
literal|"checksum"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// keep this low so we don't stall tests
name|builder
operator|.
name|put
argument_list|(
name|UnassignedInfo
operator|.
name|INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|)
operator|+
literal|"ms"
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
DECL|method|setRandomIndexMergeSettings
specifier|private
specifier|static
name|Settings
operator|.
name|Builder
name|setRandomIndexMergeSettings
parameter_list|(
name|Random
name|random
parameter_list|,
name|Settings
operator|.
name|Builder
name|builder
parameter_list|)
block|{
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|MergePolicyConfig
operator|.
name|INDEX_COMPOUND_FORMAT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|random
operator|.
name|nextBoolean
argument_list|()
condition|?
name|random
operator|.
name|nextDouble
argument_list|()
else|:
name|random
operator|.
name|nextBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|random
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
condition|)
block|{
case|case
literal|3
case|:
specifier|final
name|int
name|maxThreadCount
init|=
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxMergeCount
init|=
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|,
name|maxThreadCount
argument_list|,
name|maxThreadCount
operator|+
literal|4
argument_list|)
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|MergeSchedulerConfig
operator|.
name|MAX_MERGE_COUNT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|maxMergeCount
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|MergeSchedulerConfig
operator|.
name|MAX_THREAD_COUNT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|maxThreadCount
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|builder
return|;
block|}
DECL|method|setRandomIndexTranslogSettings
specifier|private
specifier|static
name|Settings
operator|.
name|Builder
name|setRandomIndexTranslogSettings
parameter_list|(
name|Random
name|random
parameter_list|,
name|Settings
operator|.
name|Builder
name|builder
parameter_list|)
block|{
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|IndexSettings
operator|.
name|INDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|300
argument_list|)
argument_list|,
name|ByteSizeUnit
operator|.
name|MB
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|IndexSettings
operator|.
name|INDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|ByteSizeValue
argument_list|(
literal|1
argument_list|,
name|ByteSizeUnit
operator|.
name|PB
argument_list|)
argument_list|)
expr_stmt|;
comment|// just don't flush
block|}
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|IndexSettings
operator|.
name|INDEX_TRANSLOG_DURABILITY_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|,
name|Translog
operator|.
name|Durability
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|IndexSettings
operator|.
name|INDEX_TRANSLOG_SYNC_INTERVAL_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|RandomInts
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|,
literal|100
argument_list|,
literal|5000
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
DECL|method|buildWithPrivateContext
specifier|private
name|TestCluster
name|buildWithPrivateContext
parameter_list|(
specifier|final
name|Scope
name|scope
parameter_list|,
specifier|final
name|long
name|seed
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|RandomizedContext
operator|.
name|current
argument_list|()
operator|.
name|runWithPrivateRandomness
argument_list|(
operator|new
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|Randomness
argument_list|(
name|seed
argument_list|)
argument_list|,
operator|new
name|Callable
argument_list|<
name|TestCluster
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|TestCluster
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|buildTestCluster
argument_list|(
name|scope
argument_list|,
name|seed
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|buildAndPutCluster
specifier|private
name|TestCluster
name|buildAndPutCluster
parameter_list|(
name|Scope
name|currentClusterScope
parameter_list|,
name|long
name|seed
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|this
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|TestCluster
name|testCluster
init|=
name|clusters
operator|.
name|remove
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
comment|// remove this cluster first
name|clearClusters
argument_list|()
expr_stmt|;
comment|// all leftovers are gone by now... this is really just a double safety if we miss something somewhere
switch|switch
condition|(
name|currentClusterScope
condition|)
block|{
case|case
name|SUITE
case|:
if|if
condition|(
name|testCluster
operator|==
literal|null
condition|)
block|{
comment|// only build if it's not there yet
name|testCluster
operator|=
name|buildWithPrivateContext
argument_list|(
name|currentClusterScope
argument_list|,
name|seed
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TEST
case|:
comment|// close the previous one and create a new one
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|testCluster
argument_list|)
expr_stmt|;
name|testCluster
operator|=
name|buildTestCluster
argument_list|(
name|currentClusterScope
argument_list|,
name|seed
argument_list|)
expr_stmt|;
break|break;
block|}
name|clusters
operator|.
name|put
argument_list|(
name|clazz
argument_list|,
name|testCluster
argument_list|)
expr_stmt|;
return|return
name|testCluster
return|;
block|}
DECL|method|clearClusters
specifier|private
specifier|static
name|void
name|clearClusters
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|clusters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|clusters
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|clusters
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|restClient
operator|!=
literal|null
condition|)
block|{
name|restClient
operator|.
name|close
argument_list|()
expr_stmt|;
name|restClient
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|afterInternal
specifier|protected
specifier|final
name|void
name|afterInternal
parameter_list|(
name|boolean
name|afterClass
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
specifier|final
name|Scope
name|currentClusterScope
init|=
name|getCurrentClusterScope
argument_list|()
decl_stmt|;
name|clearDisruptionScheme
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|cluster
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|currentClusterScope
operator|!=
name|Scope
operator|.
name|TEST
condition|)
block|{
name|MetaData
name|metaData
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|getMetaData
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"test leaves persistent cluster metadata behind: "
operator|+
name|metaData
operator|.
name|persistentSettings
argument_list|()
operator|.
name|getAsMap
argument_list|()
argument_list|,
name|metaData
operator|.
name|persistentSettings
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"test leaves transient cluster metadata behind: "
operator|+
name|metaData
operator|.
name|transientSettings
argument_list|()
operator|.
name|getAsMap
argument_list|()
argument_list|,
name|metaData
operator|.
name|transientSettings
argument_list|()
operator|.
name|getAsMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ensureClusterSizeConsistency
argument_list|()
expr_stmt|;
name|ensureClusterStateConsistency
argument_list|()
expr_stmt|;
if|if
condition|(
name|isInternalCluster
argument_list|()
condition|)
block|{
comment|// check no pending cluster states are leaked
for|for
control|(
name|Discovery
name|discovery
range|:
name|internalCluster
argument_list|()
operator|.
name|getInstances
argument_list|(
name|Discovery
operator|.
name|class
argument_list|)
control|)
block|{
if|if
condition|(
name|discovery
operator|instanceof
name|ZenDiscovery
condition|)
block|{
specifier|final
name|ZenDiscovery
name|zenDiscovery
init|=
operator|(
name|ZenDiscovery
operator|)
name|discovery
decl_stmt|;
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|assertThat
argument_list|(
literal|"still having pending states: "
operator|+
name|Strings
operator|.
name|arrayToDelimitedString
argument_list|(
name|zenDiscovery
operator|.
name|pendingClusterStates
argument_list|()
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
name|zenDiscovery
operator|.
name|pendingClusterStates
argument_list|()
argument_list|,
name|emptyArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|beforeIndexDeletion
argument_list|()
expr_stmt|;
name|cluster
argument_list|()
operator|.
name|wipe
argument_list|(
name|excludeTemplates
argument_list|()
argument_list|)
expr_stmt|;
comment|// wipe after to make sure we fail in the test that didn't ack the delete
if|if
condition|(
name|afterClass
operator|||
name|currentClusterScope
operator|==
name|Scope
operator|.
name|TEST
condition|)
block|{
name|cluster
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|cluster
argument_list|()
operator|.
name|assertAfterTest
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|currentClusterScope
operator|==
name|Scope
operator|.
name|TEST
condition|)
block|{
name|clearClusters
argument_list|()
expr_stmt|;
comment|// it is ok to leave persistent / transient cluster state behind if scope is TEST
block|}
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
comment|// if we failed here that means that something broke horribly so we should clear all clusters
comment|// TODO: just let the exception happen, WTF is all this horseshit
comment|// afterTestRule.forceFailure();
block|}
block|}
block|}
comment|/**      * @return An exclude set of index templates that will not be removed in between tests.      */
DECL|method|excludeTemplates
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|excludeTemplates
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
DECL|method|beforeIndexDeletion
specifier|protected
name|void
name|beforeIndexDeletion
parameter_list|()
block|{
name|cluster
argument_list|()
operator|.
name|beforeIndexDeletion
argument_list|()
expr_stmt|;
block|}
DECL|method|cluster
specifier|public
specifier|static
name|TestCluster
name|cluster
parameter_list|()
block|{
return|return
name|currentCluster
return|;
block|}
DECL|method|isInternalCluster
specifier|public
specifier|static
name|boolean
name|isInternalCluster
parameter_list|()
block|{
return|return
operator|(
name|currentCluster
operator|instanceof
name|InternalTestCluster
operator|)
return|;
block|}
DECL|method|internalCluster
specifier|public
specifier|static
name|InternalTestCluster
name|internalCluster
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isInternalCluster
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"current test cluster is immutable"
argument_list|)
throw|;
block|}
return|return
operator|(
name|InternalTestCluster
operator|)
name|currentCluster
return|;
block|}
DECL|method|clusterService
specifier|public
name|ClusterService
name|clusterService
parameter_list|()
block|{
return|return
name|internalCluster
argument_list|()
operator|.
name|clusterService
argument_list|()
return|;
block|}
DECL|method|client
specifier|public
specifier|static
name|Client
name|client
parameter_list|()
block|{
return|return
name|client
argument_list|(
literal|null
argument_list|)
return|;
block|}
DECL|method|client
specifier|public
specifier|static
name|Client
name|client
parameter_list|(
annotation|@
name|Nullable
name|String
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
return|return
name|internalCluster
argument_list|()
operator|.
name|client
argument_list|(
name|node
argument_list|)
return|;
block|}
name|Client
name|client
init|=
name|cluster
argument_list|()
operator|.
name|client
argument_list|()
decl_stmt|;
if|if
condition|(
name|frequently
argument_list|()
condition|)
block|{
name|client
operator|=
operator|new
name|RandomizingClient
argument_list|(
name|client
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|client
return|;
block|}
DECL|method|dataNodeClient
specifier|public
specifier|static
name|Client
name|dataNodeClient
parameter_list|()
block|{
name|Client
name|client
init|=
name|internalCluster
argument_list|()
operator|.
name|dataNodeClient
argument_list|()
decl_stmt|;
if|if
condition|(
name|frequently
argument_list|()
condition|)
block|{
name|client
operator|=
operator|new
name|RandomizingClient
argument_list|(
name|client
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|client
return|;
block|}
DECL|method|clients
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Client
argument_list|>
name|clients
parameter_list|()
block|{
return|return
name|cluster
argument_list|()
operator|.
name|getClients
argument_list|()
return|;
block|}
DECL|method|minimumNumberOfShards
specifier|protected
name|int
name|minimumNumberOfShards
parameter_list|()
block|{
return|return
name|DEFAULT_MIN_NUM_SHARDS
return|;
block|}
DECL|method|maximumNumberOfShards
specifier|protected
name|int
name|maximumNumberOfShards
parameter_list|()
block|{
return|return
name|DEFAULT_MAX_NUM_SHARDS
return|;
block|}
DECL|method|numberOfShards
specifier|protected
name|int
name|numberOfShards
parameter_list|()
block|{
return|return
name|between
argument_list|(
name|minimumNumberOfShards
argument_list|()
argument_list|,
name|maximumNumberOfShards
argument_list|()
argument_list|)
return|;
block|}
DECL|method|minimumNumberOfReplicas
specifier|protected
name|int
name|minimumNumberOfReplicas
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
DECL|method|maximumNumberOfReplicas
specifier|protected
name|int
name|maximumNumberOfReplicas
parameter_list|()
block|{
comment|//use either 0 or 1 replica, yet a higher amount when possible, but only rarely
name|int
name|maxNumReplicas
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|cluster
argument_list|()
operator|.
name|numDataNodes
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
return|return
name|frequently
argument_list|()
condition|?
name|Math
operator|.
name|min
argument_list|(
literal|1
argument_list|,
name|maxNumReplicas
argument_list|)
else|:
name|maxNumReplicas
return|;
block|}
DECL|method|numberOfReplicas
specifier|protected
name|int
name|numberOfReplicas
parameter_list|()
block|{
return|return
name|between
argument_list|(
name|minimumNumberOfReplicas
argument_list|()
argument_list|,
name|maximumNumberOfReplicas
argument_list|()
argument_list|)
return|;
block|}
DECL|method|setDisruptionScheme
specifier|public
name|void
name|setDisruptionScheme
parameter_list|(
name|ServiceDisruptionScheme
name|scheme
parameter_list|)
block|{
name|internalCluster
argument_list|()
operator|.
name|setDisruptionScheme
argument_list|(
name|scheme
argument_list|)
expr_stmt|;
block|}
DECL|method|clearDisruptionScheme
specifier|public
name|void
name|clearDisruptionScheme
parameter_list|()
block|{
if|if
condition|(
name|isInternalCluster
argument_list|()
condition|)
block|{
name|internalCluster
argument_list|()
operator|.
name|clearDisruptionScheme
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Returns a settings object used in {@link #createIndex(String...)} and {@link #prepareCreate(String)} and friends.      * This method can be overwritten by subclasses to set defaults for the indices that are created by the test.      * By default it returns a settings object that sets a random number of shards. Number of shards and replicas      * can be controlled through specific methods.      */
DECL|method|indexSettings
specifier|public
name|Settings
name|indexSettings
parameter_list|()
block|{
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
name|int
name|numberOfShards
init|=
name|numberOfShards
argument_list|()
decl_stmt|;
if|if
condition|(
name|numberOfShards
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|,
name|numberOfShards
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|int
name|numberOfReplicas
init|=
name|numberOfReplicas
argument_list|()
decl_stmt|;
if|if
condition|(
name|numberOfReplicas
operator|>=
literal|0
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|,
name|numberOfReplicas
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
comment|// 30% of the time
if|if
condition|(
name|randomInt
argument_list|(
literal|9
argument_list|)
operator|<
literal|3
condition|)
block|{
specifier|final
name|String
name|dataPath
init|=
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"using custom data_path for index: [{}]"
argument_list|,
name|dataPath
argument_list|)
expr_stmt|;
name|builder
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_DATA_PATH
argument_list|,
name|dataPath
argument_list|)
expr_stmt|;
block|}
comment|// always default delayed allocation to 0 to make sure we have tests are not delayed
name|builder
operator|.
name|put
argument_list|(
name|UnassignedInfo
operator|.
name|INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Creates one or more indices and asserts that the indices are acknowledged. If one of the indices      * already exists this method will fail and wipe all the indices created so far.      */
DECL|method|createIndex
specifier|public
specifier|final
name|void
name|createIndex
parameter_list|(
name|String
modifier|...
name|names
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|created
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|assertAcked
argument_list|(
name|prepareCreate
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|created
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
operator|&&
operator|!
name|created
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cluster
argument_list|()
operator|.
name|wipeIndices
argument_list|(
name|created
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|created
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Creates a new {@link CreateIndexRequestBuilder} with the settings obtained from {@link #indexSettings()}.      */
DECL|method|prepareCreate
specifier|public
specifier|final
name|CreateIndexRequestBuilder
name|prepareCreate
parameter_list|(
name|String
name|index
parameter_list|)
block|{
return|return
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|index
argument_list|)
operator|.
name|setSettings
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Creates a new {@link CreateIndexRequestBuilder} with the settings obtained from {@link #indexSettings()}.      * The index that is created with this builder will only be allowed to allocate on the number of nodes passed to this      * method.      *<p>      * This method uses allocation deciders to filter out certain nodes to allocate the created index on. It defines allocation      * rules based on<code>index.routing.allocation.exclude._name</code>.      *</p>      */
DECL|method|prepareCreate
specifier|public
specifier|final
name|CreateIndexRequestBuilder
name|prepareCreate
parameter_list|(
name|String
name|index
parameter_list|,
name|int
name|numNodes
parameter_list|)
block|{
return|return
name|prepareCreate
argument_list|(
name|index
argument_list|,
name|numNodes
argument_list|,
name|Settings
operator|.
name|builder
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Creates a new {@link CreateIndexRequestBuilder} with the settings obtained from {@link #indexSettings()}.      * The index that is created with this builder will only be allowed to allocate on the number of nodes passed to this      * method.      *<p>      * This method uses allocation deciders to filter out certain nodes to allocate the created index on. It defines allocation      * rules based on<code>index.routing.allocation.exclude._name</code>.      *</p>      */
DECL|method|prepareCreate
specifier|public
name|CreateIndexRequestBuilder
name|prepareCreate
parameter_list|(
name|String
name|index
parameter_list|,
name|int
name|numNodes
parameter_list|,
name|Settings
operator|.
name|Builder
name|settingsBuilder
parameter_list|)
block|{
name|internalCluster
argument_list|()
operator|.
name|ensureAtLeastNumDataNodes
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|indexSettings
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|settingsBuilder
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|numNodes
operator|>
literal|0
condition|)
block|{
name|getExcludeSettings
argument_list|(
name|index
argument_list|,
name|numNodes
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
return|return
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareCreate
argument_list|(
name|index
argument_list|)
operator|.
name|setSettings
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getExcludeSettings
specifier|private
name|Settings
operator|.
name|Builder
name|getExcludeSettings
parameter_list|(
name|String
name|index
parameter_list|,
name|int
name|num
parameter_list|,
name|Settings
operator|.
name|Builder
name|builder
parameter_list|)
block|{
name|String
name|exclude
init|=
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|internalCluster
argument_list|()
operator|.
name|allDataNodesButN
argument_list|(
name|num
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|put
argument_list|(
literal|"index.routing.allocation.exclude._name"
argument_list|,
name|exclude
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
comment|/**      * Waits until all nodes have no pending tasks.      */
DECL|method|waitNoPendingTasksOnAll
specifier|public
name|void
name|waitNoPendingTasksOnAll
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNoTimeout
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertBusy
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|Client
name|client
range|:
name|clients
argument_list|()
control|)
block|{
name|ClusterHealthResponse
name|clusterHealth
init|=
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setLocal
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"client "
operator|+
name|client
operator|+
literal|" still has in flight fetch"
argument_list|,
name|clusterHealth
operator|.
name|getNumberOfInFlightFetch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|PendingClusterTasksResponse
name|pendingTasks
init|=
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePendingClusterTasks
argument_list|()
operator|.
name|setLocal
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
literal|"client "
operator|+
name|client
operator|+
literal|" still has pending tasks "
operator|+
name|pendingTasks
operator|.
name|prettyPrint
argument_list|()
argument_list|,
name|pendingTasks
argument_list|,
name|Matchers
operator|.
name|emptyIterable
argument_list|()
argument_list|)
expr_stmt|;
name|clusterHealth
operator|=
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setLocal
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
name|assertThat
argument_list|(
literal|"client "
operator|+
name|client
operator|+
literal|" still has in flight fetch"
argument_list|,
name|clusterHealth
operator|.
name|getNumberOfInFlightFetch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|assertNoTimeout
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Waits till a (pattern) field name mappings concretely exists on all nodes. Note, this waits for the current      * started shards and checks for concrete mappings.      */
DECL|method|assertConcreteMappingsOnAll
specifier|public
name|void
name|assertConcreteMappingsOnAll
parameter_list|(
specifier|final
name|String
name|index
parameter_list|,
specifier|final
name|String
name|type
parameter_list|,
specifier|final
name|String
modifier|...
name|fieldNames
parameter_list|)
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|internalCluster
argument_list|()
operator|.
name|nodesInclude
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|nodes
argument_list|,
name|Matchers
operator|.
name|not
argument_list|(
name|Matchers
operator|.
name|emptyIterable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|IndicesService
name|indicesService
init|=
name|internalCluster
argument_list|()
operator|.
name|getInstance
argument_list|(
name|IndicesService
operator|.
name|class
argument_list|,
name|node
argument_list|)
decl_stmt|;
name|IndexService
name|indexService
init|=
name|indicesService
operator|.
name|indexService
argument_list|(
name|resolveIndex
argument_list|(
name|index
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"index service doesn't exists on "
operator|+
name|node
argument_list|,
name|indexService
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|DocumentMapper
name|documentMapper
init|=
name|indexService
operator|.
name|mapperService
argument_list|()
operator|.
name|documentMapper
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"document mapper doesn't exists on "
operator|+
name|node
argument_list|,
name|documentMapper
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|fieldNames
control|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|matches
init|=
name|documentMapper
operator|.
name|mappers
argument_list|()
operator|.
name|simpleMatchToFullName
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"field "
operator|+
name|fieldName
operator|+
literal|" doesn't exists on "
operator|+
name|node
argument_list|,
name|matches
argument_list|,
name|Matchers
operator|.
name|not
argument_list|(
name|emptyIterable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertMappingOnMaster
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|fieldNames
argument_list|)
expr_stmt|;
block|}
comment|/**      * Waits for the given mapping type to exists on the master node.      */
DECL|method|assertMappingOnMaster
specifier|public
name|void
name|assertMappingOnMaster
parameter_list|(
specifier|final
name|String
name|index
parameter_list|,
specifier|final
name|String
name|type
parameter_list|,
specifier|final
name|String
modifier|...
name|fieldNames
parameter_list|)
throws|throws
name|Exception
block|{
name|GetMappingsResponse
name|response
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetMappings
argument_list|(
name|index
argument_list|)
operator|.
name|setTypes
argument_list|(
name|type
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|ImmutableOpenMap
argument_list|<
name|String
argument_list|,
name|MappingMetaData
argument_list|>
name|mappings
init|=
name|response
operator|.
name|getMappings
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|mappings
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|MappingMetaData
name|mappingMetaData
init|=
name|mappings
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|mappingMetaData
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|mappingSource
init|=
name|mappingMetaData
operator|.
name|getSourceAsMap
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|mappingSource
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mappingSource
operator|.
name|containsKey
argument_list|(
literal|"properties"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|fieldNames
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|mappingProperties
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|mappingSource
operator|.
name|get
argument_list|(
literal|"properties"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|fieldName
operator|=
name|fieldName
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|".properties."
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
literal|"field "
operator|+
name|fieldName
operator|+
literal|" doesn't exists in mapping "
operator|+
name|mappingMetaData
operator|.
name|source
argument_list|()
operator|.
name|string
argument_list|()
argument_list|,
name|XContentMapValues
operator|.
name|extractValue
argument_list|(
name|fieldName
argument_list|,
name|mappingProperties
argument_list|)
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Ensures the result counts are as expected, and logs the results if different */
DECL|method|assertResultsAndLogOnFailure
specifier|public
name|void
name|assertResultsAndLogOnFailure
parameter_list|(
name|long
name|expectedResults
parameter_list|,
name|SearchResponse
name|searchResponse
parameter_list|)
block|{
if|if
condition|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
operator|!=
name|expectedResults
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"search result contains ["
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getTotalHits
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"] results. expected ["
argument_list|)
operator|.
name|append
argument_list|(
name|expectedResults
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|String
name|failMsg
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
for|for
control|(
name|SearchHit
name|hit
range|:
name|searchResponse
operator|.
name|getHits
argument_list|()
operator|.
name|getHits
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n-> _index: ["
argument_list|)
operator|.
name|append
argument_list|(
name|hit
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"] type ["
argument_list|)
operator|.
name|append
argument_list|(
name|hit
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"] id ["
argument_list|)
operator|.
name|append
argument_list|(
name|hit
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|warn
argument_list|(
literal|"{}"
argument_list|,
name|sb
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|failMsg
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Restricts the given index to be allocated on<code>n</code> nodes using the allocation deciders.      * Yet if the shards can't be allocated on any other node shards for this index will remain allocated on      * more than<code>n</code> nodes.      */
DECL|method|allowNodes
specifier|public
name|void
name|allowNodes
parameter_list|(
name|String
name|index
parameter_list|,
name|int
name|n
parameter_list|)
block|{
assert|assert
name|index
operator|!=
literal|null
assert|;
name|internalCluster
argument_list|()
operator|.
name|ensureAtLeastNumDataNodes
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|>
literal|0
condition|)
block|{
name|getExcludeSettings
argument_list|(
name|index
argument_list|,
name|n
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
name|Settings
name|build
init|=
name|builder
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|build
operator|.
name|getAsMap
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"allowNodes: updating [{}]'s setting to [{}]"
argument_list|,
name|index
argument_list|,
name|build
operator|.
name|toDelimitedString
argument_list|(
literal|';'
argument_list|)
argument_list|)
expr_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
name|index
argument_list|)
operator|.
name|setSettings
argument_list|(
name|build
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Ensures the cluster has a green state via the cluster health API. This method will also wait for relocations.      * It is useful to ensure that all action on the cluster have finished and all shards that were currently relocating      * are now allocated and started.      */
DECL|method|ensureGreen
specifier|public
name|ClusterHealthStatus
name|ensureGreen
parameter_list|(
name|String
modifier|...
name|indices
parameter_list|)
block|{
return|return
name|ensureGreen
argument_list|(
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|30
argument_list|)
argument_list|,
name|indices
argument_list|)
return|;
block|}
comment|/**      * Ensures the cluster has a green state via the cluster health API. This method will also wait for relocations.      * It is useful to ensure that all action on the cluster have finished and all shards that were currently relocating      * are now allocated and started.      *      * @param timeout time out value to set on {@link org.elasticsearch.action.admin.cluster.health.ClusterHealthRequest}      */
DECL|method|ensureGreen
specifier|public
name|ClusterHealthStatus
name|ensureGreen
parameter_list|(
name|TimeValue
name|timeout
parameter_list|,
name|String
modifier|...
name|indices
parameter_list|)
block|{
name|ClusterHealthResponse
name|actionGet
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|Requests
operator|.
name|clusterHealthRequest
argument_list|(
name|indices
argument_list|)
operator|.
name|timeout
argument_list|(
name|timeout
argument_list|)
operator|.
name|waitForGreenStatus
argument_list|()
operator|.
name|waitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|waitForNoRelocatingShards
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|actionGet
operator|.
name|isTimedOut
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"ensureGreen timed out, cluster state:\n{}\n{}"
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePendingClusterTasks
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"timed out waiting for green state"
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|actionGet
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|ClusterHealthStatus
operator|.
name|GREEN
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"indices {} are green"
argument_list|,
name|indices
operator|.
name|length
operator|==
literal|0
condition|?
literal|"[_all]"
else|:
name|indices
argument_list|)
expr_stmt|;
return|return
name|actionGet
operator|.
name|getStatus
argument_list|()
return|;
block|}
comment|/**      * Waits for all relocating shards to become active using the cluster health API.      */
DECL|method|waitForRelocation
specifier|public
name|ClusterHealthStatus
name|waitForRelocation
parameter_list|()
block|{
return|return
name|waitForRelocation
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/**      * Waits for all relocating shards to become active and the cluster has reached the given health status      * using the cluster health API.      */
DECL|method|waitForRelocation
specifier|public
name|ClusterHealthStatus
name|waitForRelocation
parameter_list|(
name|ClusterHealthStatus
name|status
parameter_list|)
block|{
name|ClusterHealthRequest
name|request
init|=
name|Requests
operator|.
name|clusterHealthRequest
argument_list|()
operator|.
name|waitForNoRelocatingShards
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|waitForStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
name|ClusterHealthResponse
name|actionGet
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|request
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|actionGet
operator|.
name|isTimedOut
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"waitForRelocation timed out (status={}), cluster state:\n{}\n{}"
argument_list|,
name|status
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePendingClusterTasks
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"timed out waiting for relocation"
argument_list|,
name|actionGet
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
name|assertThat
argument_list|(
name|actionGet
operator|.
name|getStatus
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|actionGet
operator|.
name|getStatus
argument_list|()
return|;
block|}
comment|/**      * Waits until at least a give number of document is visible for searchers      *      * @param numDocs number of documents to wait for.      * @return the actual number of docs seen.      */
DECL|method|waitForDocs
specifier|public
name|long
name|waitForDocs
parameter_list|(
specifier|final
name|long
name|numDocs
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|waitForDocs
argument_list|(
name|numDocs
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Waits until at least a give number of document is visible for searchers      *      * @param numDocs number of documents to wait for      * @param indexer a {@link org.elasticsearch.test.BackgroundIndexer}. If supplied it will be first checked for documents indexed.      *                This saves on unneeded searches.      * @return the actual number of docs seen.      */
DECL|method|waitForDocs
specifier|public
name|long
name|waitForDocs
parameter_list|(
specifier|final
name|long
name|numDocs
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|BackgroundIndexer
name|indexer
parameter_list|)
throws|throws
name|InterruptedException
block|{
comment|// indexing threads can wait for up to ~1m before retrying when they first try to index into a shard which is not STARTED.
return|return
name|waitForDocs
argument_list|(
name|numDocs
argument_list|,
literal|90
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
name|indexer
argument_list|)
return|;
block|}
comment|/**      * Waits until at least a give number of document is visible for searchers      *      * @param numDocs         number of documents to wait for      * @param maxWaitTime     if not progress have been made during this time, fail the test      * @param maxWaitTimeUnit the unit in which maxWaitTime is specified      * @param indexer         a {@link org.elasticsearch.test.BackgroundIndexer}. If supplied it will be first checked for documents indexed.      *                        This saves on unneeded searches.      * @return the actual number of docs seen.      */
DECL|method|waitForDocs
specifier|public
name|long
name|waitForDocs
parameter_list|(
specifier|final
name|long
name|numDocs
parameter_list|,
name|int
name|maxWaitTime
parameter_list|,
name|TimeUnit
name|maxWaitTimeUnit
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|BackgroundIndexer
name|indexer
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|AtomicLong
name|lastKnownCount
init|=
operator|new
name|AtomicLong
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
name|long
name|lastStartCount
init|=
operator|-
literal|1
decl_stmt|;
name|BooleanSupplier
name|testDocs
init|=
parameter_list|()
lambda|->
block|{
if|if
condition|(
name|indexer
operator|!=
literal|null
condition|)
block|{
name|lastKnownCount
operator|.
name|set
argument_list|(
name|indexer
operator|.
name|totalIndexedDocs
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lastKnownCount
operator|.
name|get
argument_list|()
operator|>=
name|numDocs
condition|)
block|{
try|try
block|{
name|long
name|count
init|=
name|client
argument_list|()
operator|.
name|prepareSearch
argument_list|()
operator|.
name|setSize
argument_list|(
literal|0
argument_list|)
operator|.
name|setQuery
argument_list|(
name|matchAllQuery
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getHits
argument_list|()
operator|.
name|totalHits
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|==
name|lastKnownCount
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// no progress - try to refresh for the next time
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|lastKnownCount
operator|.
name|set
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// count now acts like search and barfs if all shards failed...
name|logger
operator|.
name|debug
argument_list|(
literal|"failed to executed count"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] docs visible for search. waiting for [{}]"
argument_list|,
name|lastKnownCount
operator|.
name|get
argument_list|()
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"[{}] docs indexed. waiting for [{}]"
argument_list|,
name|lastKnownCount
operator|.
name|get
argument_list|()
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
block|}
return|return
name|lastKnownCount
operator|.
name|get
argument_list|()
operator|>=
name|numDocs
return|;
block|}
decl_stmt|;
while|while
condition|(
operator|!
name|awaitBusy
argument_list|(
name|testDocs
argument_list|,
name|maxWaitTime
argument_list|,
name|maxWaitTimeUnit
argument_list|)
condition|)
block|{
if|if
condition|(
name|lastStartCount
operator|==
name|lastKnownCount
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// we didn't make any progress
name|fail
argument_list|(
literal|"failed to reach "
operator|+
name|numDocs
operator|+
literal|"docs"
argument_list|)
expr_stmt|;
block|}
name|lastStartCount
operator|=
name|lastKnownCount
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return
name|lastKnownCount
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**      * Sets the cluster's minimum master node and make sure the response is acknowledge.      * Note: this doesn't guarantee that the new setting has taken effect, just that it has been received by all nodes.      */
DECL|method|setMinimumMasterNodes
specifier|public
name|void
name|setMinimumMasterNodes
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|()
operator|.
name|setTransientSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|ElectMasterService
operator|.
name|DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|n
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isAcknowledged
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Ensures the cluster has a yellow state via the cluster health API.      */
DECL|method|ensureYellow
specifier|public
name|ClusterHealthStatus
name|ensureYellow
parameter_list|(
name|String
modifier|...
name|indices
parameter_list|)
block|{
name|ClusterHealthResponse
name|actionGet
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|health
argument_list|(
name|Requests
operator|.
name|clusterHealthRequest
argument_list|(
name|indices
argument_list|)
operator|.
name|waitForNoRelocatingShards
argument_list|(
literal|true
argument_list|)
operator|.
name|waitForYellowStatus
argument_list|()
operator|.
name|waitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
argument_list|)
operator|.
name|actionGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|actionGet
operator|.
name|isTimedOut
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"ensureYellow timed out, cluster state:\n{}\n{}"
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePendingClusterTasks
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"timed out waiting for yellow"
argument_list|,
name|actionGet
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"indices {} are yellow"
argument_list|,
name|indices
operator|.
name|length
operator|==
literal|0
condition|?
literal|"[_all]"
else|:
name|indices
argument_list|)
expr_stmt|;
return|return
name|actionGet
operator|.
name|getStatus
argument_list|()
return|;
block|}
comment|/**      * Prints the current cluster state as debug logging.      */
DECL|method|logClusterState
specifier|public
name|void
name|logClusterState
parameter_list|()
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"cluster state:\n{}\n{}"
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|,
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|preparePendingClusterTasks
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Prints the segments info for the given indices as debug logging.      */
DECL|method|logSegmentsState
specifier|public
name|void
name|logSegmentsState
parameter_list|(
name|String
modifier|...
name|indices
parameter_list|)
throws|throws
name|Exception
block|{
name|IndicesSegmentResponse
name|segsRsp
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareSegments
argument_list|(
name|indices
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"segments {} state: \n{}"
argument_list|,
name|indices
operator|.
name|length
operator|==
literal|0
condition|?
literal|"[_all]"
else|:
name|indices
argument_list|,
name|segsRsp
operator|.
name|toXContent
argument_list|(
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|,
name|ToXContent
operator|.
name|EMPTY_PARAMS
argument_list|)
operator|.
name|string
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Prints current memory stats as info logging.      */
DECL|method|logMemoryStats
specifier|public
name|void
name|logMemoryStats
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"memory: {}"
argument_list|,
name|XContentHelper
operator|.
name|toString
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareNodesStats
argument_list|()
operator|.
name|clear
argument_list|()
operator|.
name|setJvm
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|ensureClusterSizeConsistency
specifier|protected
name|void
name|ensureClusterSizeConsistency
parameter_list|()
block|{
if|if
condition|(
name|cluster
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// if static init fails the cluster can be null
name|logger
operator|.
name|trace
argument_list|(
literal|"Check consistency for [{}] nodes"
argument_list|,
name|cluster
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNoTimeout
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|cluster
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Verifies that all nodes that have the same version of the cluster state as master have same cluster state      */
DECL|method|ensureClusterStateConsistency
specifier|protected
name|void
name|ensureClusterStateConsistency
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cluster
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ClusterState
name|masterClusterState
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|all
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|byte
index|[]
name|masterClusterStateBytes
init|=
name|ClusterState
operator|.
name|Builder
operator|.
name|toBytes
argument_list|(
name|masterClusterState
argument_list|)
decl_stmt|;
comment|// remove local node reference
name|masterClusterState
operator|=
name|ClusterState
operator|.
name|Builder
operator|.
name|fromBytes
argument_list|(
name|masterClusterStateBytes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|masterStateMap
init|=
name|convertToMap
argument_list|(
name|masterClusterState
argument_list|)
decl_stmt|;
name|int
name|masterClusterStateSize
init|=
name|ClusterState
operator|.
name|Builder
operator|.
name|toBytes
argument_list|(
name|masterClusterState
argument_list|)
operator|.
name|length
decl_stmt|;
name|String
name|masterId
init|=
name|masterClusterState
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNodeId
argument_list|()
decl_stmt|;
for|for
control|(
name|Client
name|client
range|:
name|cluster
argument_list|()
operator|.
name|getClients
argument_list|()
control|)
block|{
name|ClusterState
name|localClusterState
init|=
name|client
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|all
argument_list|()
operator|.
name|setLocal
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
name|byte
index|[]
name|localClusterStateBytes
init|=
name|ClusterState
operator|.
name|Builder
operator|.
name|toBytes
argument_list|(
name|localClusterState
argument_list|)
decl_stmt|;
comment|// remove local node reference
name|localClusterState
operator|=
name|ClusterState
operator|.
name|Builder
operator|.
name|fromBytes
argument_list|(
name|localClusterStateBytes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|localStateMap
init|=
name|convertToMap
argument_list|(
name|localClusterState
argument_list|)
decl_stmt|;
specifier|final
name|int
name|localClusterStateSize
init|=
name|ClusterState
operator|.
name|Builder
operator|.
name|toBytes
argument_list|(
name|localClusterState
argument_list|)
operator|.
name|length
decl_stmt|;
comment|// Check that the non-master node has the same version of the cluster state as the master and
comment|// that the master node matches the master (otherwise there is no requirement for the cluster state to match)
if|if
condition|(
name|masterClusterState
operator|.
name|version
argument_list|()
operator|==
name|localClusterState
operator|.
name|version
argument_list|()
operator|&&
name|masterId
operator|.
name|equals
argument_list|(
name|localClusterState
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNodeId
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|assertEquals
argument_list|(
literal|"clusterstate UUID does not match"
argument_list|,
name|masterClusterState
operator|.
name|stateUUID
argument_list|()
argument_list|,
name|localClusterState
operator|.
name|stateUUID
argument_list|()
argument_list|)
expr_stmt|;
comment|// We cannot compare serialization bytes since serialization order of maps is not guaranteed
comment|// but we can compare serialization sizes - they should be the same
name|assertEquals
argument_list|(
literal|"clusterstate size does not match"
argument_list|,
name|masterClusterStateSize
argument_list|,
name|localClusterStateSize
argument_list|)
expr_stmt|;
comment|// Compare JSON serialization
name|assertNull
argument_list|(
literal|"clusterstate JSON serialization does not match"
argument_list|,
name|differenceBetweenMapsIgnoringArrayOrder
argument_list|(
name|masterStateMap
argument_list|,
name|localStateMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|error
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Cluster state from master:\n{}\nLocal cluster state:\n{}"
argument_list|,
name|masterClusterState
operator|.
name|toString
argument_list|()
argument_list|,
name|localClusterState
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|error
throw|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * Ensures the cluster is in a searchable state for the given indices. This means a searchable copy of each      * shard is available on the cluster.      */
DECL|method|ensureSearchable
specifier|protected
name|ClusterHealthStatus
name|ensureSearchable
parameter_list|(
name|String
modifier|...
name|indices
parameter_list|)
block|{
comment|// this is just a temporary thing but it's easier to change if it is encapsulated.
return|return
name|ensureGreen
argument_list|(
name|indices
argument_list|)
return|;
block|}
DECL|method|ensureStableCluster
specifier|protected
name|void
name|ensureStableCluster
parameter_list|(
name|int
name|nodeCount
parameter_list|)
block|{
name|ensureStableCluster
argument_list|(
name|nodeCount
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|30
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|ensureStableCluster
specifier|protected
name|void
name|ensureStableCluster
parameter_list|(
name|int
name|nodeCount
parameter_list|,
name|TimeValue
name|timeValue
parameter_list|)
block|{
name|ensureStableCluster
argument_list|(
name|nodeCount
argument_list|,
name|timeValue
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|ensureStableCluster
specifier|protected
name|void
name|ensureStableCluster
parameter_list|(
name|int
name|nodeCount
parameter_list|,
annotation|@
name|Nullable
name|String
name|viaNode
parameter_list|)
block|{
name|ensureStableCluster
argument_list|(
name|nodeCount
argument_list|,
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|30
argument_list|)
argument_list|,
literal|false
argument_list|,
name|viaNode
argument_list|)
expr_stmt|;
block|}
DECL|method|ensureStableCluster
specifier|protected
name|void
name|ensureStableCluster
parameter_list|(
name|int
name|nodeCount
parameter_list|,
name|TimeValue
name|timeValue
parameter_list|,
name|boolean
name|local
parameter_list|,
annotation|@
name|Nullable
name|String
name|viaNode
parameter_list|)
block|{
if|if
condition|(
name|viaNode
operator|==
literal|null
condition|)
block|{
name|viaNode
operator|=
name|randomFrom
argument_list|(
name|internalCluster
argument_list|()
operator|.
name|getNodeNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"ensuring cluster is stable with [{}] nodes. access node: [{}]. timeout: [{}]"
argument_list|,
name|nodeCount
argument_list|,
name|viaNode
argument_list|,
name|timeValue
argument_list|)
expr_stmt|;
name|ClusterHealthResponse
name|clusterHealthResponse
init|=
name|client
argument_list|(
name|viaNode
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForEvents
argument_list|(
name|Priority
operator|.
name|LANGUID
argument_list|)
operator|.
name|setWaitForNodes
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|nodeCount
argument_list|)
argument_list|)
operator|.
name|setTimeout
argument_list|(
name|timeValue
argument_list|)
operator|.
name|setLocal
argument_list|(
name|local
argument_list|)
operator|.
name|setWaitForNoRelocatingShards
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|clusterHealthResponse
operator|.
name|isTimedOut
argument_list|()
condition|)
block|{
name|ClusterStateResponse
name|stateResponse
init|=
name|client
argument_list|(
name|viaNode
argument_list|)
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|fail
argument_list|(
literal|"failed to reach a stable cluster of ["
operator|+
name|nodeCount
operator|+
literal|"] nodes. Tried via ["
operator|+
name|viaNode
operator|+
literal|"]. last cluster state:\n"
operator|+
name|stateResponse
operator|.
name|getState
argument_list|()
operator|.
name|prettyPrint
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|clusterHealthResponse
operator|.
name|isTimedOut
argument_list|()
argument_list|,
name|is
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Syntactic sugar for:      *<pre>      *   client().prepareIndex(index, type).setSource(source).execute().actionGet();      *</pre>      */
DECL|method|index
specifier|protected
specifier|final
name|IndexResponse
name|index
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|XContentBuilder
name|source
parameter_list|)
block|{
return|return
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
return|;
block|}
comment|/**      * Syntactic sugar for:      *<pre>      *   client().prepareIndex(index, type).setSource(source).execute().actionGet();      *</pre>      */
DECL|method|index
specifier|protected
specifier|final
name|IndexResponse
name|index
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
parameter_list|)
block|{
return|return
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
return|;
block|}
comment|/**      * Syntactic sugar for:      *<pre>      *   client().prepareGet(index, type, id).execute().actionGet();      *</pre>      */
DECL|method|get
specifier|protected
specifier|final
name|GetResponse
name|get
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|)
block|{
return|return
name|client
argument_list|()
operator|.
name|prepareGet
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
return|;
block|}
comment|/**      * Syntactic sugar for:      *<pre>      *   return client().prepareIndex(index, type, id).setSource(source).execute().actionGet();      *</pre>      */
DECL|method|index
specifier|protected
specifier|final
name|IndexResponse
name|index
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|XContentBuilder
name|source
parameter_list|)
block|{
return|return
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
return|;
block|}
comment|/**      * Syntactic sugar for:      *<pre>      *   return client().prepareIndex(index, type, id).setSource(source).execute().actionGet();      *</pre>      */
DECL|method|index
specifier|protected
specifier|final
name|IndexResponse
name|index
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|Object
modifier|...
name|source
parameter_list|)
block|{
return|return
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
return|;
block|}
comment|/**      * Syntactic sugar for:      *<pre>      *   return client().prepareIndex(index, type, id).setSource(source).execute().actionGet();      *</pre>      *<p>      * where source is a String.      */
DECL|method|index
specifier|protected
specifier|final
name|IndexResponse
name|index
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|source
parameter_list|)
block|{
return|return
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|type
argument_list|,
name|id
argument_list|)
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
return|;
block|}
comment|/**      * Waits for relocations and refreshes all indices in the cluster.      *      * @see #waitForRelocation()      */
DECL|method|refresh
specifier|protected
specifier|final
name|RefreshResponse
name|refresh
parameter_list|(
name|String
modifier|...
name|indices
parameter_list|)
block|{
name|waitForRelocation
argument_list|()
expr_stmt|;
comment|// TODO RANDOMIZE with flush?
name|RefreshResponse
name|actionGet
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
name|indices
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|actionGet
argument_list|)
expr_stmt|;
return|return
name|actionGet
return|;
block|}
comment|/**      * Flushes and refreshes all indices in the cluster      */
DECL|method|flushAndRefresh
specifier|protected
specifier|final
name|void
name|flushAndRefresh
parameter_list|(
name|String
modifier|...
name|indices
parameter_list|)
block|{
name|flush
argument_list|(
name|indices
argument_list|)
expr_stmt|;
name|refresh
argument_list|(
name|indices
argument_list|)
expr_stmt|;
block|}
comment|/**      * Flush some or all indices in the cluster.      */
DECL|method|flush
specifier|protected
specifier|final
name|FlushResponse
name|flush
parameter_list|(
name|String
modifier|...
name|indices
parameter_list|)
block|{
name|waitForRelocation
argument_list|()
expr_stmt|;
name|FlushResponse
name|actionGet
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareFlush
argument_list|(
name|indices
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardOperationFailedException
name|failure
range|:
name|actionGet
operator|.
name|getShardFailures
argument_list|()
control|)
block|{
name|assertThat
argument_list|(
literal|"unexpected flush failure "
operator|+
name|failure
operator|.
name|reason
argument_list|()
argument_list|,
name|failure
operator|.
name|status
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|RestStatus
operator|.
name|SERVICE_UNAVAILABLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|actionGet
return|;
block|}
comment|/**      * Waits for all relocations and force merge all indices in the cluster to 1 segment.      */
DECL|method|forceMerge
specifier|protected
name|ForceMergeResponse
name|forceMerge
parameter_list|()
block|{
name|waitForRelocation
argument_list|()
expr_stmt|;
name|ForceMergeResponse
name|actionGet
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareForceMerge
argument_list|()
operator|.
name|setMaxNumSegments
argument_list|(
literal|1
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertNoFailures
argument_list|(
name|actionGet
argument_list|)
expr_stmt|;
return|return
name|actionGet
return|;
block|}
comment|/**      * Returns<code>true</code> iff the given index exists otherwise<code>false</code>      */
DECL|method|indexExists
specifier|protected
name|boolean
name|indexExists
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|IndicesExistsResponse
name|actionGet
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareExists
argument_list|(
name|index
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
return|return
name|actionGet
operator|.
name|isExists
argument_list|()
return|;
block|}
comment|/**      * Syntactic sugar for enabling allocation for<code>indices</code>      */
DECL|method|enableAllocation
specifier|protected
specifier|final
name|void
name|enableAllocation
parameter_list|(
name|String
modifier|...
name|indices
parameter_list|)
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
name|indices
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|EnableAllocationDecider
operator|.
name|INDEX_ROUTING_ALLOCATION_ENABLE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"all"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|/**      * Syntactic sugar for disabling allocation for<code>indices</code>      */
DECL|method|disableAllocation
specifier|protected
specifier|final
name|void
name|disableAllocation
parameter_list|(
name|String
modifier|...
name|indices
parameter_list|)
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
name|indices
argument_list|)
operator|.
name|setSettings
argument_list|(
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|EnableAllocationDecider
operator|.
name|INDEX_ROUTING_ALLOCATION_ENABLE_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"none"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns a random admin client. This client can either be a node or a transport client pointing to any of      * the nodes in the cluster.      */
DECL|method|admin
specifier|protected
name|AdminClient
name|admin
parameter_list|()
block|{
return|return
name|client
argument_list|()
operator|.
name|admin
argument_list|()
return|;
block|}
comment|/**      * Convenience method that forwards to {@link #indexRandom(boolean, List)}.      */
DECL|method|indexRandom
specifier|public
name|void
name|indexRandom
parameter_list|(
name|boolean
name|forceRefresh
parameter_list|,
name|IndexRequestBuilder
modifier|...
name|builders
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|indexRandom
argument_list|(
name|forceRefresh
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|builders
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|indexRandom
specifier|public
name|void
name|indexRandom
parameter_list|(
name|boolean
name|forceRefresh
parameter_list|,
name|boolean
name|dummyDocuments
parameter_list|,
name|IndexRequestBuilder
modifier|...
name|builders
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|indexRandom
argument_list|(
name|forceRefresh
argument_list|,
name|dummyDocuments
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|builders
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|field|RANDOM_BOGUS_TYPE
specifier|private
specifier|static
specifier|final
name|String
name|RANDOM_BOGUS_TYPE
init|=
literal|"RANDOM_BOGUS_TYPE______"
decl_stmt|;
comment|/**      * Indexes the given {@link IndexRequestBuilder} instances randomly. It shuffles the given builders and either      * indexes them in a blocking or async fashion. This is very useful to catch problems that relate to internal document      * ids or index segment creations. Some features might have bug when a given document is the first or the last in a      * segment or if only one document is in a segment etc. This method prevents issues like this by randomizing the index      * layout.      *      * @param forceRefresh if<tt>true</tt> all involved indices are refreshed once the documents are indexed. Additionally if<tt>true</tt>      *                     some empty dummy documents are may be randomly inserted into the document list and deleted once all documents are indexed.      *                     This is useful to produce deleted documents on the server side.      * @param builders     the documents to index.      * @see #indexRandom(boolean, boolean, java.util.List)      */
DECL|method|indexRandom
specifier|public
name|void
name|indexRandom
parameter_list|(
name|boolean
name|forceRefresh
parameter_list|,
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|indexRandom
argument_list|(
name|forceRefresh
argument_list|,
name|forceRefresh
argument_list|,
name|builders
argument_list|)
expr_stmt|;
block|}
comment|/**      * Indexes the given {@link IndexRequestBuilder} instances randomly. It shuffles the given builders and either      * indexes they in a blocking or async fashion. This is very useful to catch problems that relate to internal document      * ids or index segment creations. Some features might have bug when a given document is the first or the last in a      * segment or if only one document is in a segment etc. This method prevents issues like this by randomizing the index      * layout.      *      * @param forceRefresh   if<tt>true</tt> all involved indices are refreshed once the documents are indexed.      * @param dummyDocuments if<tt>true</tt> some empty dummy documents may be randomly inserted into the document list and deleted once      *                       all documents are indexed. This is useful to produce deleted documents on the server side.      * @param builders       the documents to index.      */
DECL|method|indexRandom
specifier|public
name|void
name|indexRandom
parameter_list|(
name|boolean
name|forceRefresh
parameter_list|,
name|boolean
name|dummyDocuments
parameter_list|,
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|indexRandom
argument_list|(
name|forceRefresh
argument_list|,
name|dummyDocuments
argument_list|,
literal|true
argument_list|,
name|builders
argument_list|)
expr_stmt|;
block|}
comment|/**      * Indexes the given {@link IndexRequestBuilder} instances randomly. It shuffles the given builders and either      * indexes they in a blocking or async fashion. This is very useful to catch problems that relate to internal document      * ids or index segment creations. Some features might have bug when a given document is the first or the last in a      * segment or if only one document is in a segment etc. This method prevents issues like this by randomizing the index      * layout.      *      * @param forceRefresh   if<tt>true</tt> all involved indices are refreshed once the documents are indexed.      * @param dummyDocuments if<tt>true</tt> some empty dummy documents may be randomly inserted into the document list and deleted once      *                       all documents are indexed. This is useful to produce deleted documents on the server side.      * @param maybeFlush     if<tt>true</tt> this method may randomly execute full flushes after index operations.      * @param builders       the documents to index.      */
DECL|method|indexRandom
specifier|public
name|void
name|indexRandom
parameter_list|(
name|boolean
name|forceRefresh
parameter_list|,
name|boolean
name|dummyDocuments
parameter_list|,
name|boolean
name|maybeFlush
parameter_list|,
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|builders
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|indicesSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexRequestBuilder
name|builder
range|:
name|builders
control|)
block|{
name|indicesSet
operator|.
name|add
argument_list|(
name|builder
operator|.
name|request
argument_list|()
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|bogusIds
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
operator|&&
operator|!
name|builders
operator|.
name|isEmpty
argument_list|()
operator|&&
name|dummyDocuments
condition|)
block|{
name|builders
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|builders
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|indices
init|=
name|indicesSet
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|indicesSet
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
comment|// inject some bogus docs
specifier|final
name|int
name|numBogusDocs
init|=
name|scaledRandomIntBetween
argument_list|(
literal|1
argument_list|,
name|builders
operator|.
name|size
argument_list|()
operator|*
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|int
name|unicodeLen
init|=
name|between
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numBogusDocs
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|randomRealisticUnicodeOfLength
argument_list|(
name|unicodeLen
argument_list|)
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|dummmyDocIdGenerator
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|index
init|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|,
name|indices
argument_list|)
decl_stmt|;
name|bogusIds
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|index
argument_list|,
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|builders
operator|.
name|add
argument_list|(
name|client
argument_list|()
operator|.
name|prepareIndex
argument_list|(
name|index
argument_list|,
name|RANDOM_BOGUS_TYPE
argument_list|,
name|id
argument_list|)
operator|.
name|setSource
argument_list|(
literal|"{}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|String
index|[]
name|indices
init|=
name|indicesSet
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|indicesSet
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|builders
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|Tuple
argument_list|<
name|IndexRequestBuilder
argument_list|,
name|Exception
argument_list|>
argument_list|>
name|errors
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CountDownLatch
argument_list|>
name|inFlightAsyncOperations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// If you are indexing just a few documents then frequently do it one at a time.  If many then frequently in bulk.
if|if
condition|(
name|builders
operator|.
name|size
argument_list|()
operator|<
name|FREQUENT_BULK_THRESHOLD
condition|?
name|frequently
argument_list|()
else|:
name|builders
operator|.
name|size
argument_list|()
operator|<
name|ALWAYS_BULK_THRESHOLD
condition|?
name|rarely
argument_list|()
else|:
literal|false
condition|)
block|{
if|if
condition|(
name|frequently
argument_list|()
condition|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Index [{}] docs async: [{}] bulk: [{}]"
argument_list|,
name|builders
operator|.
name|size
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexRequestBuilder
name|indexRequestBuilder
range|:
name|builders
control|)
block|{
name|indexRequestBuilder
operator|.
name|execute
argument_list|(
operator|new
name|PayloadLatchedActionListener
argument_list|<
name|IndexResponse
argument_list|,
name|IndexRequestBuilder
argument_list|>
argument_list|(
name|indexRequestBuilder
argument_list|,
name|newLatch
argument_list|(
name|inFlightAsyncOperations
argument_list|)
argument_list|,
name|errors
argument_list|)
argument_list|)
expr_stmt|;
name|postIndexAsyncActions
argument_list|(
name|indices
argument_list|,
name|inFlightAsyncOperations
argument_list|,
name|maybeFlush
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Index [{}] docs async: [{}] bulk: [{}]"
argument_list|,
name|builders
operator|.
name|size
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|IndexRequestBuilder
name|indexRequestBuilder
range|:
name|builders
control|)
block|{
name|indexRequestBuilder
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
name|postIndexAsyncActions
argument_list|(
name|indices
argument_list|,
name|inFlightAsyncOperations
argument_list|,
name|maybeFlush
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
argument_list|>
name|partition
init|=
name|eagerPartition
argument_list|(
name|builders
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|MAX_BULK_INDEX_REQUEST_SIZE
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
call|(
name|int
call|)
argument_list|(
name|builders
operator|.
name|size
argument_list|()
operator|*
name|randomDouble
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Index [{}] docs async: [{}] bulk: [{}] partitions [{}]"
argument_list|,
name|builders
operator|.
name|size
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|partition
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|IndexRequestBuilder
argument_list|>
name|segmented
range|:
name|partition
control|)
block|{
name|BulkRequestBuilder
name|bulkBuilder
init|=
name|client
argument_list|()
operator|.
name|prepareBulk
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexRequestBuilder
name|indexRequestBuilder
range|:
name|segmented
control|)
block|{
name|bulkBuilder
operator|.
name|add
argument_list|(
name|indexRequestBuilder
argument_list|)
expr_stmt|;
block|}
name|BulkResponse
name|actionGet
init|=
name|bulkBuilder
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|actionGet
operator|.
name|hasFailures
argument_list|()
condition|?
name|actionGet
operator|.
name|buildFailureMessage
argument_list|()
else|:
literal|""
argument_list|,
name|actionGet
operator|.
name|hasFailures
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|CountDownLatch
name|operation
range|:
name|inFlightAsyncOperations
control|)
block|{
name|operation
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|Exception
argument_list|>
name|actualErrors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Tuple
argument_list|<
name|IndexRequestBuilder
argument_list|,
name|Exception
argument_list|>
name|tuple
range|:
name|errors
control|)
block|{
if|if
condition|(
name|ExceptionsHelper
operator|.
name|unwrapCause
argument_list|(
name|tuple
operator|.
name|v2
argument_list|()
argument_list|)
operator|instanceof
name|EsRejectedExecutionException
condition|)
block|{
name|tuple
operator|.
name|v1
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
expr_stmt|;
comment|// re-index if rejected
block|}
else|else
block|{
name|actualErrors
operator|.
name|add
argument_list|(
name|tuple
operator|.
name|v2
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertThat
argument_list|(
name|actualErrors
argument_list|,
name|emptyIterable
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bogusIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// delete the bogus types again - it might trigger merges or at least holes in the segments and enforces deleted docs!
for|for
control|(
name|Tuple
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|doc
range|:
name|bogusIds
control|)
block|{
name|assertEquals
argument_list|(
literal|"failed to delete a dummy doc ["
operator|+
name|doc
operator|.
name|v1
argument_list|()
operator|+
literal|"]["
operator|+
name|doc
operator|.
name|v2
argument_list|()
operator|+
literal|"]"
argument_list|,
name|DocWriteResponse
operator|.
name|Result
operator|.
name|DELETED
argument_list|,
name|client
argument_list|()
operator|.
name|prepareDelete
argument_list|(
name|doc
operator|.
name|v1
argument_list|()
argument_list|,
name|RANDOM_BOGUS_TYPE
argument_list|,
name|doc
operator|.
name|v2
argument_list|()
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|forceRefresh
condition|)
block|{
name|assertNoFailures
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
name|indices
argument_list|)
operator|.
name|setIndicesOptions
argument_list|(
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|dummmyDocIdGenerator
specifier|private
name|AtomicInteger
name|dummmyDocIdGenerator
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
comment|/** Disables an index block for the specified index */
DECL|method|disableIndexBlock
specifier|public
specifier|static
name|void
name|disableIndexBlock
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|block
parameter_list|)
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|block
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
name|index
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|/** Enables an index block for the specified index */
DECL|method|enableIndexBlock
specifier|public
specifier|static
name|void
name|enableIndexBlock
parameter_list|(
name|String
name|index
parameter_list|,
name|String
name|block
parameter_list|)
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|block
argument_list|,
literal|true
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|(
name|index
argument_list|)
operator|.
name|setSettings
argument_list|(
name|settings
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|/** Sets or unsets the cluster read_only mode **/
DECL|method|setClusterReadOnly
specifier|public
specifier|static
name|void
name|setClusterReadOnly
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|MetaData
operator|.
name|SETTING_READ_ONLY_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertAcked
argument_list|(
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareUpdateSettings
argument_list|()
operator|.
name|setTransientSettings
argument_list|(
name|settings
argument_list|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|newLatch
specifier|private
specifier|static
name|CountDownLatch
name|newLatch
parameter_list|(
name|List
argument_list|<
name|CountDownLatch
argument_list|>
name|latches
parameter_list|)
block|{
name|CountDownLatch
name|l
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|latches
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
return|return
name|l
return|;
block|}
comment|/**      * Maybe refresh, force merge, or flush then always make sure there aren't too many in flight async operations.      */
DECL|method|postIndexAsyncActions
specifier|private
name|void
name|postIndexAsyncActions
parameter_list|(
name|String
index|[]
name|indices
parameter_list|,
name|List
argument_list|<
name|CountDownLatch
argument_list|>
name|inFlightAsyncOperations
parameter_list|,
name|boolean
name|maybeFlush
parameter_list|)
throws|throws
name|InterruptedException
block|{
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareRefresh
argument_list|(
name|indices
argument_list|)
operator|.
name|setIndicesOptions
argument_list|(
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|LatchedActionListener
argument_list|<>
argument_list|(
name|newLatch
argument_list|(
name|inFlightAsyncOperations
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|maybeFlush
operator|&&
name|rarely
argument_list|()
condition|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareFlush
argument_list|(
name|indices
argument_list|)
operator|.
name|setIndicesOptions
argument_list|(
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|LatchedActionListener
argument_list|<>
argument_list|(
name|newLatch
argument_list|(
name|inFlightAsyncOperations
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|syncedFlush
argument_list|(
name|syncedFlushRequest
argument_list|(
name|indices
argument_list|)
operator|.
name|indicesOptions
argument_list|(
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|)
argument_list|,
operator|new
name|LatchedActionListener
argument_list|<>
argument_list|(
name|newLatch
argument_list|(
name|inFlightAsyncOperations
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareForceMerge
argument_list|(
name|indices
argument_list|)
operator|.
name|setIndicesOptions
argument_list|(
name|IndicesOptions
operator|.
name|lenientExpandOpen
argument_list|()
argument_list|)
operator|.
name|setMaxNumSegments
argument_list|(
name|between
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
operator|.
name|setFlush
argument_list|(
name|maybeFlush
operator|&&
name|randomBoolean
argument_list|()
argument_list|)
operator|.
name|execute
argument_list|(
operator|new
name|LatchedActionListener
argument_list|<>
argument_list|(
name|newLatch
argument_list|(
name|inFlightAsyncOperations
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
while|while
condition|(
name|inFlightAsyncOperations
operator|.
name|size
argument_list|()
operator|>
name|MAX_IN_FLIGHT_ASYNC_INDEXES
condition|)
block|{
name|int
name|waitFor
init|=
name|between
argument_list|(
literal|0
argument_list|,
name|inFlightAsyncOperations
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|inFlightAsyncOperations
operator|.
name|remove
argument_list|(
name|waitFor
argument_list|)
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * The scope of a test cluster used together with      * {@link ESIntegTestCase.ClusterScope} annotations on {@link ESIntegTestCase} subclasses.      */
DECL|enum|Scope
specifier|public
enum|enum
name|Scope
block|{
comment|/**          * A cluster shared across all method in a single test suite          */
DECL|enum constant|SUITE
name|SUITE
block|,
comment|/**          * A test exclusive test cluster          */
DECL|enum constant|TEST
name|TEST
block|}
comment|/**      * Defines a cluster scope for a {@link ESIntegTestCase} subclass.      * By default if no {@link ClusterScope} annotation is present {@link ESIntegTestCase.Scope#SUITE} is used      * together with randomly chosen settings like number of nodes etc.      */
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation|@
name|Target
argument_list|(
block|{
name|ElementType
operator|.
name|TYPE
block|}
argument_list|)
DECL|interface|ClusterScope
specifier|public
annotation_defn|@interface
name|ClusterScope
block|{
comment|/**          * Returns the scope. {@link ESIntegTestCase.Scope#SUITE} is default.          */
DECL|field|Scope.SUITE
name|Scope
name|scope
parameter_list|()
default|default
name|Scope
operator|.
name|SUITE
function_decl|;
comment|/**          * Returns the number of nodes in the cluster. Default is<tt>-1</tt> which means          * a random number of nodes is used, where the minimum and maximum number of nodes          * are either the specified ones or the default ones if not specified.          */
name|int
name|numDataNodes
parameter_list|()
default|default
operator|-
literal|1
function_decl|;
comment|/**          * Returns the minimum number of data nodes in the cluster. Default is<tt>-1</tt>.          * Ignored when {@link ClusterScope#numDataNodes()} is set.          */
name|int
name|minNumDataNodes
parameter_list|()
default|default
operator|-
literal|1
function_decl|;
comment|/**          * Returns the maximum number of data nodes in the cluster.  Default is<tt>-1</tt>.          * Ignored when {@link ClusterScope#numDataNodes()} is set.          */
name|int
name|maxNumDataNodes
parameter_list|()
default|default
operator|-
literal|1
function_decl|;
comment|/**          * Indicates whether the cluster can have dedicated master nodes. If<tt>false</tt> means data nodes will serve as master nodes          * and there will be no dedicated master (and data) nodes. Default is<tt>true</tt> which means          * dedicated master nodes will be randomly used.          */
DECL|field|true
name|boolean
name|supportsDedicatedMasters
parameter_list|()
default|default
literal|true
function_decl|;
comment|/**          * Returns the number of client nodes in the cluster. Default is {@link InternalTestCluster#DEFAULT_NUM_CLIENT_NODES}, a          * negative value means that the number of client nodes will be randomized.          */
DECL|field|InternalTestCluster.DEFAULT_NUM_CLIENT_NODES
name|int
name|numClientNodes
parameter_list|()
default|default
name|InternalTestCluster
operator|.
name|DEFAULT_NUM_CLIENT_NODES
function_decl|;
comment|/**          * Returns the transport client ratio. By default this returns<code>-1</code> which means a random          * ratio in the interval<code>[0..1]</code> is used.          */
name|double
name|transportClientRatio
parameter_list|()
default|default
operator|-
literal|1
function_decl|;
comment|/**          * Return whether or not to enable dynamic templates for the mappings.          */
DECL|field|true
name|boolean
name|randomDynamicTemplates
parameter_list|()
default|default
literal|true
function_decl|;
block|}
DECL|class|LatchedActionListener
specifier|private
class|class
name|LatchedActionListener
parameter_list|<
name|Response
parameter_list|>
implements|implements
name|ActionListener
argument_list|<
name|Response
argument_list|>
block|{
DECL|field|latch
specifier|private
specifier|final
name|CountDownLatch
name|latch
decl_stmt|;
DECL|method|LatchedActionListener
specifier|public
name|LatchedActionListener
parameter_list|(
name|CountDownLatch
name|latch
parameter_list|)
block|{
name|this
operator|.
name|latch
operator|=
name|latch
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onResponse
specifier|public
specifier|final
name|void
name|onResponse
parameter_list|(
name|Response
name|response
parameter_list|)
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure
specifier|public
specifier|final
name|void
name|onFailure
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
try|try
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Action Failed"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|addError
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|addError
specifier|protected
name|void
name|addError
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{         }
block|}
DECL|class|PayloadLatchedActionListener
specifier|private
class|class
name|PayloadLatchedActionListener
parameter_list|<
name|Response
parameter_list|,
name|T
parameter_list|>
extends|extends
name|LatchedActionListener
argument_list|<
name|Response
argument_list|>
block|{
DECL|field|errors
specifier|private
specifier|final
name|CopyOnWriteArrayList
argument_list|<
name|Tuple
argument_list|<
name|T
argument_list|,
name|Exception
argument_list|>
argument_list|>
name|errors
decl_stmt|;
DECL|field|builder
specifier|private
specifier|final
name|T
name|builder
decl_stmt|;
DECL|method|PayloadLatchedActionListener
specifier|public
name|PayloadLatchedActionListener
parameter_list|(
name|T
name|builder
parameter_list|,
name|CountDownLatch
name|latch
parameter_list|,
name|CopyOnWriteArrayList
argument_list|<
name|Tuple
argument_list|<
name|T
argument_list|,
name|Exception
argument_list|>
argument_list|>
name|errors
parameter_list|)
block|{
name|super
argument_list|(
name|latch
argument_list|)
expr_stmt|;
name|this
operator|.
name|errors
operator|=
name|errors
expr_stmt|;
name|this
operator|.
name|builder
operator|=
name|builder
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addError
specifier|protected
name|void
name|addError
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|errors
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|<>
argument_list|(
name|builder
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Clears the given scroll Ids      */
DECL|method|clearScroll
specifier|public
name|void
name|clearScroll
parameter_list|(
name|String
modifier|...
name|scrollIds
parameter_list|)
block|{
name|ClearScrollResponse
name|clearResponse
init|=
name|client
argument_list|()
operator|.
name|prepareClearScroll
argument_list|()
operator|.
name|setScrollIds
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|scrollIds
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|clearResponse
operator|.
name|isSucceeded
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getAnnotation
specifier|private
specifier|static
parameter_list|<
name|A
extends|extends
name|Annotation
parameter_list|>
name|A
name|getAnnotation
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|,
name|Class
argument_list|<
name|A
argument_list|>
name|annotationClass
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|==
name|Object
operator|.
name|class
operator|||
name|clazz
operator|==
name|ESIntegTestCase
operator|.
name|class
condition|)
block|{
return|return
literal|null
return|;
block|}
name|A
name|annotation
init|=
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|annotationClass
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotation
operator|!=
literal|null
condition|)
block|{
return|return
name|annotation
return|;
block|}
return|return
name|getAnnotation
argument_list|(
name|clazz
operator|.
name|getSuperclass
argument_list|()
argument_list|,
name|annotationClass
argument_list|)
return|;
block|}
DECL|method|getCurrentClusterScope
specifier|private
name|Scope
name|getCurrentClusterScope
parameter_list|()
block|{
return|return
name|getCurrentClusterScope
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getCurrentClusterScope
specifier|private
specifier|static
name|Scope
name|getCurrentClusterScope
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|ClusterScope
name|annotation
init|=
name|getAnnotation
argument_list|(
name|clazz
argument_list|,
name|ClusterScope
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// if we are not annotated assume suite!
return|return
name|annotation
operator|==
literal|null
condition|?
name|Scope
operator|.
name|SUITE
else|:
name|annotation
operator|.
name|scope
argument_list|()
return|;
block|}
DECL|method|getSupportsDedicatedMasters
specifier|private
name|boolean
name|getSupportsDedicatedMasters
parameter_list|()
block|{
name|ClusterScope
name|annotation
init|=
name|getAnnotation
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
name|ClusterScope
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|annotation
operator|==
literal|null
condition|?
literal|true
else|:
name|annotation
operator|.
name|supportsDedicatedMasters
argument_list|()
return|;
block|}
DECL|method|getNumDataNodes
specifier|private
name|int
name|getNumDataNodes
parameter_list|()
block|{
name|ClusterScope
name|annotation
init|=
name|getAnnotation
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
name|ClusterScope
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|annotation
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|annotation
operator|.
name|numDataNodes
argument_list|()
return|;
block|}
DECL|method|getMinNumDataNodes
specifier|private
name|int
name|getMinNumDataNodes
parameter_list|()
block|{
name|ClusterScope
name|annotation
init|=
name|getAnnotation
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
name|ClusterScope
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|annotation
operator|==
literal|null
operator|||
name|annotation
operator|.
name|minNumDataNodes
argument_list|()
operator|==
operator|-
literal|1
condition|?
name|InternalTestCluster
operator|.
name|DEFAULT_MIN_NUM_DATA_NODES
else|:
name|annotation
operator|.
name|minNumDataNodes
argument_list|()
return|;
block|}
DECL|method|getMaxNumDataNodes
specifier|private
name|int
name|getMaxNumDataNodes
parameter_list|()
block|{
name|ClusterScope
name|annotation
init|=
name|getAnnotation
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
name|ClusterScope
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|annotation
operator|==
literal|null
operator|||
name|annotation
operator|.
name|maxNumDataNodes
argument_list|()
operator|==
operator|-
literal|1
condition|?
name|InternalTestCluster
operator|.
name|DEFAULT_MAX_NUM_DATA_NODES
else|:
name|annotation
operator|.
name|maxNumDataNodes
argument_list|()
return|;
block|}
DECL|method|getNumClientNodes
specifier|private
name|int
name|getNumClientNodes
parameter_list|()
block|{
name|ClusterScope
name|annotation
init|=
name|getAnnotation
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
name|ClusterScope
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|annotation
operator|==
literal|null
condition|?
name|InternalTestCluster
operator|.
name|DEFAULT_NUM_CLIENT_NODES
else|:
name|annotation
operator|.
name|numClientNodes
argument_list|()
return|;
block|}
DECL|method|randomDynamicTemplates
specifier|private
name|boolean
name|randomDynamicTemplates
parameter_list|()
block|{
name|ClusterScope
name|annotation
init|=
name|getAnnotation
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
name|ClusterScope
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|annotation
operator|==
literal|null
operator|||
name|annotation
operator|.
name|randomDynamicTemplates
argument_list|()
return|;
block|}
comment|/**      * This method is used to obtain settings for the<tt>Nth</tt> node in the cluster.      * Nodes in this cluster are associated with an ordinal number such that nodes can      * be started with specific configurations. This method might be called multiple      * times with the same ordinal and is expected to return the same value for each invocation.      * In other words subclasses must ensure this method is idempotent.      */
DECL|method|nodeSettings
specifier|protected
name|Settings
name|nodeSettings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|NodeEnvironment
operator|.
name|MAX_LOCAL_STORAGE_NODES_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
comment|// Default the watermarks to absurdly low to prevent the tests
comment|// from failing on nodes without enough disk space
operator|.
name|put
argument_list|(
name|DiskThresholdSettings
operator|.
name|CLUSTER_ROUTING_ALLOCATION_LOW_DISK_WATERMARK_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"1b"
argument_list|)
operator|.
name|put
argument_list|(
name|DiskThresholdSettings
operator|.
name|CLUSTER_ROUTING_ALLOCATION_HIGH_DISK_WATERMARK_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"1b"
argument_list|)
operator|.
name|put
argument_list|(
name|ScriptService
operator|.
name|SCRIPT_MAX_COMPILATIONS_PER_MINUTE
operator|.
name|getKey
argument_list|()
argument_list|,
literal|1000
argument_list|)
operator|.
name|put
argument_list|(
literal|"script.stored"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|put
argument_list|(
literal|"script.inline"
argument_list|,
literal|"true"
argument_list|)
comment|// by default we never cache below 10k docs in a segment,
comment|// bypass this limit so that caching gets some testing in
comment|// integration tests that usually create few documents
operator|.
name|put
argument_list|(
name|IndicesQueryCache
operator|.
name|INDICES_QUERIES_CACHE_ALL_SEGMENTS_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|nodeOrdinal
operator|%
literal|2
operator|==
literal|0
argument_list|)
comment|// wait short time for other active shards before actually deleting, default 30s not needed in tests
operator|.
name|put
argument_list|(
name|IndicesStore
operator|.
name|INDICES_STORE_DELETE_SHARD_TIMEOUT
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|TimeValue
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Returns a collection of plugins that should be loaded on each node.      */
DECL|method|nodePlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|/**      * Returns a collection of plugins that should be loaded when creating a transport client.      */
DECL|method|transportClientPlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|transportClientPlugins
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|/**      * This method is used to obtain additional settings for clients created by the internal cluster.      * These settings will be applied on the client in addition to some randomized settings defined in      * the cluster. These settings will also override any other settings the internal cluster might      * add by default.      */
DECL|method|transportClientSettings
specifier|protected
name|Settings
name|transportClientSettings
parameter_list|()
block|{
return|return
name|Settings
operator|.
name|EMPTY
return|;
block|}
DECL|method|buildExternalCluster
specifier|private
name|ExternalTestCluster
name|buildExternalCluster
parameter_list|(
name|String
name|clusterAddresses
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|stringAddresses
init|=
name|clusterAddresses
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|TransportAddress
index|[]
name|transportAddresses
init|=
operator|new
name|TransportAddress
index|[
name|stringAddresses
operator|.
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|stringAddress
range|:
name|stringAddresses
control|)
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"http://"
operator|+
name|stringAddress
argument_list|)
decl_stmt|;
name|InetAddress
name|inetAddress
init|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|url
operator|.
name|getHost
argument_list|()
argument_list|)
decl_stmt|;
name|transportAddresses
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|TransportAddress
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|inetAddress
argument_list|,
name|url
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ExternalTestCluster
argument_list|(
name|createTempDir
argument_list|()
argument_list|,
name|externalClusterClientSettings
argument_list|()
argument_list|,
name|transportClientPlugins
argument_list|()
argument_list|,
name|transportAddresses
argument_list|)
return|;
block|}
DECL|method|externalClusterClientSettings
specifier|protected
name|Settings
name|externalClusterClientSettings
parameter_list|()
block|{
return|return
name|Settings
operator|.
name|EMPTY
return|;
block|}
DECL|method|ignoreExternalCluster
specifier|protected
name|boolean
name|ignoreExternalCluster
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|buildTestCluster
specifier|protected
name|TestCluster
name|buildTestCluster
parameter_list|(
name|Scope
name|scope
parameter_list|,
name|long
name|seed
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|clusterAddresses
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|TESTS_CLUSTER
argument_list|)
decl_stmt|;
if|if
condition|(
name|Strings
operator|.
name|hasLength
argument_list|(
name|clusterAddresses
argument_list|)
operator|&&
name|ignoreExternalCluster
argument_list|()
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|scope
operator|==
name|Scope
operator|.
name|TEST
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot run TEST scope test with "
operator|+
name|TESTS_CLUSTER
argument_list|)
throw|;
block|}
return|return
name|buildExternalCluster
argument_list|(
name|clusterAddresses
argument_list|)
return|;
block|}
specifier|final
name|String
name|nodePrefix
decl_stmt|;
switch|switch
condition|(
name|scope
condition|)
block|{
case|case
name|TEST
case|:
name|nodePrefix
operator|=
name|TEST_CLUSTER_NODE_PREFIX
expr_stmt|;
break|break;
case|case
name|SUITE
case|:
name|nodePrefix
operator|=
name|SUITE_CLUSTER_NODE_PREFIX
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"Scope not supported: "
operator|+
name|scope
argument_list|)
throw|;
block|}
name|boolean
name|supportsDedicatedMasters
init|=
name|getSupportsDedicatedMasters
argument_list|()
decl_stmt|;
name|int
name|numDataNodes
init|=
name|getNumDataNodes
argument_list|()
decl_stmt|;
name|int
name|minNumDataNodes
decl_stmt|;
name|int
name|maxNumDataNodes
decl_stmt|;
if|if
condition|(
name|numDataNodes
operator|>=
literal|0
condition|)
block|{
name|minNumDataNodes
operator|=
name|maxNumDataNodes
operator|=
name|numDataNodes
expr_stmt|;
block|}
else|else
block|{
name|minNumDataNodes
operator|=
name|getMinNumDataNodes
argument_list|()
expr_stmt|;
name|maxNumDataNodes
operator|=
name|getMaxNumDataNodes
argument_list|()
expr_stmt|;
block|}
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|mockPlugins
init|=
name|getMockPlugins
argument_list|()
decl_stmt|;
specifier|final
name|NodeConfigurationSource
name|nodeConfigurationSource
init|=
name|getNodeConfigSource
argument_list|()
decl_stmt|;
if|if
condition|(
name|addMockTransportService
argument_list|()
condition|)
block|{
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|mocks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|mockPlugins
argument_list|)
decl_stmt|;
comment|// add both mock plugins - local and tcp if they are not there
comment|// we do this in case somebody overrides getMockPlugins and misses to call super
if|if
condition|(
name|mockPlugins
operator|.
name|contains
argument_list|(
name|MockTcpTransportPlugin
operator|.
name|class
argument_list|)
operator|==
literal|false
condition|)
block|{
name|mocks
operator|.
name|add
argument_list|(
name|MockTcpTransportPlugin
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|mockPlugins
operator|=
name|mocks
expr_stmt|;
block|}
return|return
operator|new
name|InternalTestCluster
argument_list|(
name|seed
argument_list|,
name|createTempDir
argument_list|()
argument_list|,
name|supportsDedicatedMasters
argument_list|,
name|minNumDataNodes
argument_list|,
name|maxNumDataNodes
argument_list|,
name|InternalTestCluster
operator|.
name|clusterName
argument_list|(
name|scope
operator|.
name|name
argument_list|()
argument_list|,
name|seed
argument_list|)
operator|+
literal|"-cluster"
argument_list|,
name|nodeConfigurationSource
argument_list|,
name|getNumClientNodes
argument_list|()
argument_list|,
name|InternalTestCluster
operator|.
name|DEFAULT_ENABLE_HTTP_PIPELINING
argument_list|,
name|nodePrefix
argument_list|,
name|mockPlugins
argument_list|,
name|getClientWrapper
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getNodeConfigSource
specifier|protected
name|NodeConfigurationSource
name|getNodeConfigSource
parameter_list|()
block|{
name|Settings
operator|.
name|Builder
name|networkSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|addMockTransportService
argument_list|()
condition|)
block|{
name|networkSettings
operator|.
name|put
argument_list|(
name|NetworkModule
operator|.
name|TRANSPORT_TYPE_KEY
argument_list|,
name|MockTcpTransportPlugin
operator|.
name|MOCK_TCP_TRANSPORT_NAME
argument_list|)
expr_stmt|;
block|}
name|NodeConfigurationSource
name|nodeConfigurationSource
init|=
operator|new
name|NodeConfigurationSource
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Settings
name|nodeSettings
parameter_list|(
name|int
name|nodeOrdinal
parameter_list|)
block|{
return|return
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|NetworkModule
operator|.
name|HTTP_ENABLED
operator|.
name|getKey
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|put
argument_list|(
name|networkSettings
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ESIntegTestCase
operator|.
name|this
operator|.
name|nodeSettings
argument_list|(
name|nodeOrdinal
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|nodePlugins
parameter_list|()
block|{
return|return
name|ESIntegTestCase
operator|.
name|this
operator|.
name|nodePlugins
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Settings
name|transportClientSettings
parameter_list|()
block|{
return|return
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|networkSettings
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|ESIntegTestCase
operator|.
name|this
operator|.
name|transportClientSettings
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|transportClientPlugins
parameter_list|()
block|{
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|plugins
init|=
name|ESIntegTestCase
operator|.
name|this
operator|.
name|transportClientPlugins
argument_list|()
decl_stmt|;
if|if
condition|(
name|plugins
operator|.
name|contains
argument_list|(
name|MockTcpTransportPlugin
operator|.
name|class
argument_list|)
operator|==
literal|false
condition|)
block|{
name|plugins
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|plugins
argument_list|)
expr_stmt|;
name|plugins
operator|.
name|add
argument_list|(
name|MockTcpTransportPlugin
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableCollection
argument_list|(
name|plugins
argument_list|)
return|;
block|}
block|}
decl_stmt|;
return|return
name|nodeConfigurationSource
return|;
block|}
comment|/**      * Iff this returns true mock transport implementations are used for the test runs. Otherwise not mock transport impls are used.      * The defautl is<tt>true</tt>      */
DECL|method|addMockTransportService
specifier|protected
name|boolean
name|addMockTransportService
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
DECL|method|addMockZenPings
specifier|protected
name|boolean
name|addMockZenPings
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/**      * Returns a function that allows to wrap / filter all clients that are exposed by the test cluster. This is useful      * for debugging or request / response pre and post processing. It also allows to intercept all calls done by the test      * framework. By default this method returns an identity function {@link Function#identity()}.      */
DECL|method|getClientWrapper
specifier|protected
name|Function
argument_list|<
name|Client
argument_list|,
name|Client
argument_list|>
name|getClientWrapper
parameter_list|()
block|{
return|return
name|Function
operator|.
name|identity
argument_list|()
return|;
block|}
comment|/** Return the mock plugins the cluster should use */
DECL|method|getMockPlugins
specifier|protected
name|Collection
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|getMockPlugins
parameter_list|()
block|{
specifier|final
name|ArrayList
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|mocks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
comment|// sometimes run without those completely
if|if
condition|(
name|randomBoolean
argument_list|()
operator|&&
name|addMockTransportService
argument_list|()
condition|)
block|{
name|mocks
operator|.
name|add
argument_list|(
name|MockTransportService
operator|.
name|TestPlugin
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|mocks
operator|.
name|add
argument_list|(
name|MockFSIndexStore
operator|.
name|TestPlugin
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|mocks
operator|.
name|add
argument_list|(
name|NodeMocksPlugin
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|mocks
operator|.
name|add
argument_list|(
name|MockEngineFactoryPlugin
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|mocks
operator|.
name|add
argument_list|(
name|MockSearchService
operator|.
name|TestPlugin
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|mocks
operator|.
name|add
argument_list|(
name|AssertingTransportInterceptor
operator|.
name|TestPlugin
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|addMockTransportService
argument_list|()
condition|)
block|{
name|mocks
operator|.
name|add
argument_list|(
name|MockTcpTransportPlugin
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|addMockZenPings
argument_list|()
condition|)
block|{
name|mocks
operator|.
name|add
argument_list|(
name|MockZenPing
operator|.
name|TestPlugin
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|mocks
operator|.
name|add
argument_list|(
name|TestSeedPlugin
operator|.
name|class
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|mocks
argument_list|)
return|;
block|}
DECL|class|TestSeedPlugin
specifier|public
specifier|static
specifier|final
class|class
name|TestSeedPlugin
extends|extends
name|Plugin
block|{
annotation|@
name|Override
DECL|method|getSettings
specifier|public
name|List
argument_list|<
name|Setting
argument_list|<
name|?
argument_list|>
argument_list|>
name|getSettings
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|INDEX_TEST_SEED_SETTING
argument_list|)
return|;
block|}
block|}
comment|/**      * Returns the client ratio configured via      */
DECL|method|transportClientRatio
specifier|private
specifier|static
name|double
name|transportClientRatio
parameter_list|()
block|{
name|String
name|property
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|TESTS_CLIENT_RATIO
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|==
literal|null
operator|||
name|property
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Double
operator|.
name|NaN
return|;
block|}
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|property
argument_list|)
return|;
block|}
comment|/**      * Returns the transport client ratio from the class level annotation or via      * {@link System#getProperty(String)} if available. If both are not available this will      * return a random ratio in the interval<tt>[0..1]</tt>      */
DECL|method|getPerTestTransportClientRatio
specifier|protected
name|double
name|getPerTestTransportClientRatio
parameter_list|()
block|{
specifier|final
name|ClusterScope
name|annotation
init|=
name|getAnnotation
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|,
name|ClusterScope
operator|.
name|class
argument_list|)
decl_stmt|;
name|double
name|perTestRatio
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|annotation
operator|!=
literal|null
condition|)
block|{
name|perTestRatio
operator|=
name|annotation
operator|.
name|transportClientRatio
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|perTestRatio
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|Double
operator|.
name|isNaN
argument_list|(
name|TRANSPORT_CLIENT_RATIO
argument_list|)
condition|?
name|randomDouble
argument_list|()
else|:
name|TRANSPORT_CLIENT_RATIO
return|;
block|}
assert|assert
name|perTestRatio
operator|>=
literal|0.0
operator|&&
name|perTestRatio
operator|<=
literal|1.0
assert|;
return|return
name|perTestRatio
return|;
block|}
comment|/**      * Returns path to a random directory that can be used to create a temporary file system repo      */
DECL|method|randomRepoPath
specifier|public
name|Path
name|randomRepoPath
parameter_list|()
block|{
if|if
condition|(
name|currentCluster
operator|instanceof
name|InternalTestCluster
condition|)
block|{
return|return
name|randomRepoPath
argument_list|(
operator|(
operator|(
name|InternalTestCluster
operator|)
name|currentCluster
operator|)
operator|.
name|getDefaultSettings
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|currentCluster
operator|instanceof
name|CompositeTestCluster
condition|)
block|{
return|return
name|randomRepoPath
argument_list|(
operator|(
operator|(
name|CompositeTestCluster
operator|)
name|currentCluster
operator|)
operator|.
name|internalCluster
argument_list|()
operator|.
name|getDefaultSettings
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"unsupported cluster type"
argument_list|)
throw|;
block|}
comment|/**      * Returns path to a random directory that can be used to create a temporary file system repo      */
DECL|method|randomRepoPath
specifier|public
specifier|static
name|Path
name|randomRepoPath
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|Environment
name|environment
init|=
operator|new
name|Environment
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|Path
index|[]
name|repoFiles
init|=
name|environment
operator|.
name|repoFiles
argument_list|()
decl_stmt|;
assert|assert
name|repoFiles
operator|.
name|length
operator|>
literal|0
assert|;
name|Path
name|path
decl_stmt|;
do|do
block|{
name|path
operator|=
name|repoFiles
index|[
literal|0
index|]
operator|.
name|resolve
argument_list|(
name|randomAsciiOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
do|;
return|return
name|path
return|;
block|}
DECL|method|getNumShards
specifier|protected
name|NumShards
name|getNumShards
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|MetaData
name|metaData
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|getState
argument_list|()
operator|.
name|metaData
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|metaData
operator|.
name|hasIndex
argument_list|(
name|index
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|numShards
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|getSettings
argument_list|()
operator|.
name|get
argument_list|(
name|SETTING_NUMBER_OF_SHARDS
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|numReplicas
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|metaData
operator|.
name|index
argument_list|(
name|index
argument_list|)
operator|.
name|getSettings
argument_list|()
operator|.
name|get
argument_list|(
name|SETTING_NUMBER_OF_REPLICAS
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|NumShards
argument_list|(
name|numShards
argument_list|,
name|numReplicas
argument_list|)
return|;
block|}
comment|/**      * Asserts that all shards are allocated on nodes matching the given node pattern.      */
DECL|method|assertAllShardsOnNodes
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|assertAllShardsOnNodes
parameter_list|(
name|String
name|index
parameter_list|,
name|String
modifier|...
name|pattern
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareState
argument_list|()
operator|.
name|execute
argument_list|()
operator|.
name|actionGet
argument_list|()
operator|.
name|getState
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexRoutingTable
name|indexRoutingTable
range|:
name|clusterState
operator|.
name|routingTable
argument_list|()
control|)
block|{
for|for
control|(
name|IndexShardRoutingTable
name|indexShardRoutingTable
range|:
name|indexRoutingTable
control|)
block|{
for|for
control|(
name|ShardRouting
name|shardRouting
range|:
name|indexShardRoutingTable
control|)
block|{
if|if
condition|(
name|shardRouting
operator|.
name|currentNodeId
argument_list|()
operator|!=
literal|null
operator|&&
name|index
operator|.
name|equals
argument_list|(
name|shardRouting
operator|.
name|getIndexName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|clusterState
operator|.
name|nodes
argument_list|()
operator|.
name|get
argument_list|(
name|shardRouting
operator|.
name|currentNodeId
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Allocated on new node: "
operator|+
name|name
argument_list|,
name|Regex
operator|.
name|simpleMatch
argument_list|(
name|pattern
argument_list|,
name|name
argument_list|)
argument_list|,
name|is
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|nodes
return|;
block|}
DECL|class|NumShards
specifier|protected
specifier|static
class|class
name|NumShards
block|{
DECL|field|numPrimaries
specifier|public
specifier|final
name|int
name|numPrimaries
decl_stmt|;
DECL|field|numReplicas
specifier|public
specifier|final
name|int
name|numReplicas
decl_stmt|;
DECL|field|totalNumShards
specifier|public
specifier|final
name|int
name|totalNumShards
decl_stmt|;
DECL|field|dataCopies
specifier|public
specifier|final
name|int
name|dataCopies
decl_stmt|;
DECL|method|NumShards
specifier|private
name|NumShards
parameter_list|(
name|int
name|numPrimaries
parameter_list|,
name|int
name|numReplicas
parameter_list|)
block|{
name|this
operator|.
name|numPrimaries
operator|=
name|numPrimaries
expr_stmt|;
name|this
operator|.
name|numReplicas
operator|=
name|numReplicas
expr_stmt|;
name|this
operator|.
name|dataCopies
operator|=
name|numReplicas
operator|+
literal|1
expr_stmt|;
name|this
operator|.
name|totalNumShards
operator|=
name|numPrimaries
operator|*
name|dataCopies
expr_stmt|;
block|}
block|}
DECL|method|runTestScopeLifecycle
specifier|private
specifier|static
name|boolean
name|runTestScopeLifecycle
parameter_list|()
block|{
return|return
name|INSTANCE
operator|==
literal|null
return|;
block|}
annotation|@
name|Before
DECL|method|before
specifier|public
specifier|final
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|runTestScopeLifecycle
argument_list|()
condition|)
block|{
name|printTestMessage
argument_list|(
literal|"setup"
argument_list|)
expr_stmt|;
name|beforeInternal
argument_list|()
expr_stmt|;
block|}
name|printTestMessage
argument_list|(
literal|"starting"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|after
specifier|public
specifier|final
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|printTestMessage
argument_list|(
literal|"finished"
argument_list|)
expr_stmt|;
comment|// Deleting indices is going to clear search contexts implicitly so we
comment|// need to check that there are no more in-flight search contexts before
comment|// we remove indices
name|super
operator|.
name|ensureAllSearchContextsReleased
argument_list|()
expr_stmt|;
if|if
condition|(
name|runTestScopeLifecycle
argument_list|()
condition|)
block|{
name|printTestMessage
argument_list|(
literal|"cleaning up after"
argument_list|)
expr_stmt|;
name|afterInternal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|printTestMessage
argument_list|(
literal|"cleaned up after"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|runTestScopeLifecycle
argument_list|()
condition|)
block|{
try|try
block|{
name|INSTANCE
operator|.
name|printTestMessage
argument_list|(
literal|"cleaning up after"
argument_list|)
expr_stmt|;
name|INSTANCE
operator|.
name|afterInternal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|INSTANCE
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|clearClusters
argument_list|()
expr_stmt|;
block|}
name|SUITE_SEED
operator|=
literal|null
expr_stmt|;
name|currentCluster
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|initializeSuiteScope
specifier|private
specifier|static
name|void
name|initializeSuiteScope
parameter_list|()
throws|throws
name|Exception
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|targetClass
init|=
name|getTestClass
argument_list|()
decl_stmt|;
comment|/**          * Note we create these test class instance via reflection          * since JUnit creates a new instance per test and that is also          * the reason why INSTANCE is static since this entire method          * must be executed in a static context.          */
assert|assert
name|INSTANCE
operator|==
literal|null
assert|;
if|if
condition|(
name|isSuiteScopedTest
argument_list|(
name|targetClass
argument_list|)
condition|)
block|{
comment|// note we need to do this this way to make sure this is reproducible
name|INSTANCE
operator|=
operator|(
name|ESIntegTestCase
operator|)
name|targetClass
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|INSTANCE
operator|.
name|printTestMessage
argument_list|(
literal|"setup"
argument_list|)
expr_stmt|;
name|INSTANCE
operator|.
name|beforeInternal
argument_list|()
expr_stmt|;
name|INSTANCE
operator|.
name|setupSuiteScopeCluster
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|afterClass
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|INSTANCE
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * Compute a routing key that will route documents to the<code>shard</code>-th shard      * of the provided index.      */
DECL|method|routingKeyForShard
specifier|protected
name|String
name|routingKeyForShard
parameter_list|(
name|String
name|index
parameter_list|,
name|int
name|shard
parameter_list|)
block|{
return|return
name|internalCluster
argument_list|()
operator|.
name|routingKeyForShard
argument_list|(
name|resolveIndex
argument_list|(
name|index
argument_list|)
argument_list|,
name|shard
argument_list|,
name|random
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Return settings that could be used to start a node that has the given zipped home directory.      */
DECL|method|prepareBackwardsDataDir
specifier|protected
name|Settings
name|prepareBackwardsDataDir
parameter_list|(
name|Path
name|backwardsIndex
parameter_list|,
name|Object
modifier|...
name|settings
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|indexDir
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Path
name|dataDir
init|=
name|indexDir
operator|.
name|resolve
argument_list|(
literal|"data"
argument_list|)
decl_stmt|;
try|try
init|(
name|InputStream
name|stream
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|backwardsIndex
argument_list|)
init|)
block|{
name|TestUtil
operator|.
name|unzip
argument_list|(
name|stream
argument_list|,
name|indexDir
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|dataDir
argument_list|)
argument_list|)
expr_stmt|;
comment|// list clusters in the datapath, ignoring anything from extrasfs
specifier|final
name|Path
index|[]
name|list
decl_stmt|;
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|dataDir
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|dirs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Path
name|p
range|:
name|stream
control|)
block|{
if|if
condition|(
operator|!
name|p
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"extra"
argument_list|)
condition|)
block|{
name|dirs
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
name|list
operator|=
name|dirs
operator|.
name|toArray
argument_list|(
operator|new
name|Path
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|list
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Backwards index must contain exactly one cluster\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|Path
name|line
range|:
name|list
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|line
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|Path
name|src
init|=
name|list
index|[
literal|0
index|]
operator|.
name|resolve
argument_list|(
name|NodeEnvironment
operator|.
name|NODES_FOLDER
argument_list|)
decl_stmt|;
name|Path
name|dest
init|=
name|dataDir
operator|.
name|resolve
argument_list|(
name|NodeEnvironment
operator|.
name|NODES_FOLDER
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|move
argument_list|(
name|src
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|src
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|dest
argument_list|)
argument_list|)
expr_stmt|;
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_DATA_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|dataDir
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|Path
name|configDir
init|=
name|indexDir
operator|.
name|resolve
argument_list|(
literal|"config"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|configDir
argument_list|)
condition|)
block|{
name|builder
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_CONF_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|configDir
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * Returns an instance of {@link RestClient} pointing to the current test cluster.      * Creates a new client if the method is invoked for the first time in the context of the current test scope.      * The returned client gets automatically closed when needed, it shouldn't be closed as part of tests otherwise      * it cannot be reused by other tests anymore.      */
DECL|method|getRestClient
specifier|protected
specifier|static
specifier|synchronized
name|RestClient
name|getRestClient
parameter_list|()
block|{
if|if
condition|(
name|restClient
operator|==
literal|null
condition|)
block|{
name|restClient
operator|=
name|createRestClient
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|restClient
return|;
block|}
DECL|method|createRestClient
specifier|protected
specifier|static
name|RestClient
name|createRestClient
parameter_list|(
name|RestClientBuilder
operator|.
name|HttpClientConfigCallback
name|httpClientConfigCallback
parameter_list|)
block|{
return|return
name|createRestClient
argument_list|(
name|httpClientConfigCallback
argument_list|,
literal|"http"
argument_list|)
return|;
block|}
DECL|method|createRestClient
specifier|protected
specifier|static
name|RestClient
name|createRestClient
parameter_list|(
name|RestClientBuilder
operator|.
name|HttpClientConfigCallback
name|httpClientConfigCallback
parameter_list|,
name|String
name|protocol
parameter_list|)
block|{
specifier|final
name|NodesInfoResponse
name|nodeInfos
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareNodesInfo
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|NodeInfo
argument_list|>
name|nodes
init|=
name|nodeInfos
operator|.
name|getNodes
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|nodeInfos
operator|.
name|hasFailures
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HttpHost
argument_list|>
name|hosts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeInfo
name|node
range|:
name|nodes
control|)
block|{
if|if
condition|(
name|node
operator|.
name|getHttp
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|TransportAddress
name|publishAddress
init|=
name|node
operator|.
name|getHttp
argument_list|()
operator|.
name|address
argument_list|()
operator|.
name|publishAddress
argument_list|()
decl_stmt|;
name|InetSocketAddress
name|address
init|=
name|publishAddress
operator|.
name|address
argument_list|()
decl_stmt|;
name|hosts
operator|.
name|add
argument_list|(
operator|new
name|HttpHost
argument_list|(
name|NetworkAddress
operator|.
name|format
argument_list|(
name|address
operator|.
name|getAddress
argument_list|()
argument_list|)
argument_list|,
name|address
operator|.
name|getPort
argument_list|()
argument_list|,
name|protocol
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|RestClientBuilder
name|builder
init|=
name|RestClient
operator|.
name|builder
argument_list|(
name|hosts
operator|.
name|toArray
argument_list|(
operator|new
name|HttpHost
index|[
name|hosts
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|httpClientConfigCallback
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setHttpClientConfigCallback
argument_list|(
name|httpClientConfigCallback
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
comment|/**      * This method is executed iff the test is annotated with {@link SuiteScopeTestCase}      * before the first test of this class is executed.      *      * @see SuiteScopeTestCase      */
DECL|method|setupSuiteScopeCluster
specifier|protected
name|void
name|setupSuiteScopeCluster
parameter_list|()
throws|throws
name|Exception
block|{     }
DECL|method|isSuiteScopedTest
specifier|private
specifier|static
name|boolean
name|isSuiteScopedTest
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|clazz
operator|.
name|getAnnotation
argument_list|(
name|SuiteScopeTestCase
operator|.
name|class
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**      * If a test is annotated with {@link SuiteScopeTestCase}      * the checks and modifications that are applied to the used test cluster are only done after all tests      * of this class are executed. This also has the side-effect of a suite level setup method {@link #setupSuiteScopeCluster()}      * that is executed in a separate test instance. Variables that need to be accessible across test instances must be static.      */
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation|@
name|Inherited
annotation|@
name|Target
argument_list|(
name|ElementType
operator|.
name|TYPE
argument_list|)
DECL|interface|SuiteScopeTestCase
specifier|public
annotation_defn|@interface
name|SuiteScopeTestCase
block|{     }
DECL|method|resolveIndex
specifier|public
specifier|static
name|Index
name|resolveIndex
parameter_list|(
name|String
name|index
parameter_list|)
block|{
name|GetIndexResponse
name|getIndexResponse
init|=
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|indices
argument_list|()
operator|.
name|prepareGetIndex
argument_list|()
operator|.
name|setIndices
argument_list|(
name|index
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"index "
operator|+
name|index
operator|+
literal|" not found"
argument_list|,
name|getIndexResponse
operator|.
name|getSettings
argument_list|()
operator|.
name|containsKey
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|uuid
init|=
name|getIndexResponse
operator|.
name|getSettings
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|get
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_INDEX_UUID
argument_list|)
decl_stmt|;
return|return
operator|new
name|Index
argument_list|(
name|index
argument_list|,
name|uuid
argument_list|)
return|;
block|}
block|}
end_class

end_unit

