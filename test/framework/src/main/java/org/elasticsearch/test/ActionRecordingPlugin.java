begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|ActionResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|support
operator|.
name|ActionFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
import|;
end_import

begin_comment
comment|/**  * Plugin that registers a filter that records actions.  */
end_comment

begin_class
DECL|class|ActionRecordingPlugin
specifier|public
class|class
name|ActionRecordingPlugin
extends|extends
name|Plugin
block|{
comment|/**      * Fetch all the requests recorded by the test plugin. The list is an      * immutable, moment in time snapshot.      */
DECL|method|allRequests
specifier|public
specifier|static
name|List
argument_list|<
name|ActionRequest
argument_list|<
name|?
argument_list|>
argument_list|>
name|allRequests
parameter_list|()
block|{
name|List
argument_list|<
name|ActionRequest
argument_list|<
name|?
argument_list|>
argument_list|>
name|requests
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RecordingFilter
name|filter
range|:
name|ESIntegTestCase
operator|.
name|internalCluster
argument_list|()
operator|.
name|getInstances
argument_list|(
name|RecordingFilter
operator|.
name|class
argument_list|)
control|)
block|{
name|requests
operator|.
name|addAll
argument_list|(
name|filter
operator|.
name|requests
argument_list|)
expr_stmt|;
block|}
return|return
name|unmodifiableList
argument_list|(
name|requests
argument_list|)
return|;
block|}
comment|/**      * Fetch all requests recorded by the test plugin of a certain type. The      * list is an immutable, moment in time snapshot.      */
DECL|method|requestsOfType
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|requestsOfType
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|requests
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RecordingFilter
name|filter
range|:
name|ESIntegTestCase
operator|.
name|internalCluster
argument_list|()
operator|.
name|getInstances
argument_list|(
name|RecordingFilter
operator|.
name|class
argument_list|)
control|)
block|{
for|for
control|(
name|ActionRequest
argument_list|<
name|?
argument_list|>
name|request
range|:
name|filter
operator|.
name|requests
control|)
block|{
if|if
condition|(
name|type
operator|.
name|isInstance
argument_list|(
name|request
argument_list|)
condition|)
block|{
name|requests
operator|.
name|add
argument_list|(
name|type
operator|.
name|cast
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|unmodifiableList
argument_list|(
name|requests
argument_list|)
return|;
block|}
comment|/**      * Clear all the recorded requests. Use between test methods that shared a      * suite scoped cluster.      */
DECL|method|clear
specifier|public
specifier|static
name|void
name|clear
parameter_list|()
block|{
for|for
control|(
name|RecordingFilter
name|filter
range|:
name|ESIntegTestCase
operator|.
name|internalCluster
argument_list|()
operator|.
name|getInstances
argument_list|(
name|RecordingFilter
operator|.
name|class
argument_list|)
control|)
block|{
name|filter
operator|.
name|requests
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"test-action-logging"
return|;
block|}
annotation|@
name|Override
DECL|method|description
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
literal|"Test action logging"
return|;
block|}
annotation|@
name|Override
DECL|method|nodeModules
specifier|public
name|Collection
argument_list|<
name|Module
argument_list|>
name|nodeModules
parameter_list|()
block|{
return|return
name|Collections
operator|.
expr|<
name|Module
operator|>
name|singletonList
argument_list|(
operator|new
name|ActionRecordingModule
argument_list|()
argument_list|)
return|;
block|}
DECL|method|onModule
specifier|public
name|void
name|onModule
parameter_list|(
name|ActionModule
name|module
parameter_list|)
block|{
name|module
operator|.
name|registerFilter
argument_list|(
name|RecordingFilter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
DECL|class|ActionRecordingModule
specifier|public
specifier|static
class|class
name|ActionRecordingModule
extends|extends
name|AbstractModule
block|{
annotation|@
name|Override
DECL|method|configure
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|bind
argument_list|(
name|RecordingFilter
operator|.
name|class
argument_list|)
operator|.
name|asEagerSingleton
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|RecordingFilter
specifier|public
specifier|static
class|class
name|RecordingFilter
extends|extends
name|ActionFilter
operator|.
name|Simple
block|{
DECL|field|requests
specifier|private
specifier|final
name|List
argument_list|<
name|ActionRequest
argument_list|<
name|?
argument_list|>
argument_list|>
name|requests
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Inject
DECL|method|RecordingFilter
specifier|public
name|RecordingFilter
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
DECL|method|getRequests
specifier|public
name|List
argument_list|<
name|ActionRequest
argument_list|<
name|?
argument_list|>
argument_list|>
name|getRequests
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|requests
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|order
specifier|public
name|int
name|order
parameter_list|()
block|{
return|return
literal|999
return|;
block|}
annotation|@
name|Override
DECL|method|apply
specifier|protected
name|boolean
name|apply
parameter_list|(
name|String
name|action
parameter_list|,
name|ActionRequest
argument_list|<
name|?
argument_list|>
name|request
parameter_list|,
name|ActionListener
argument_list|<
name|?
argument_list|>
name|listener
parameter_list|)
block|{
name|requests
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|apply
specifier|protected
name|boolean
name|apply
parameter_list|(
name|String
name|action
parameter_list|,
name|ActionResponse
name|response
parameter_list|,
name|ActionListener
argument_list|<
name|?
argument_list|>
name|listener
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

