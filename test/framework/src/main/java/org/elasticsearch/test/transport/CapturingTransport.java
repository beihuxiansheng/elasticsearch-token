begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.transport
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|ElasticsearchException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|node
operator|.
name|DiscoveryNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|CheckedBiConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Randomness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|Lifecycle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|LifecycleListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|BoundTransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ConnectTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ConnectionProfile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|RemoteTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|SendRequestTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|Transport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportRequestOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportServiceAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportStats
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UncheckedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|rarely
import|;
end_import

begin_comment
comment|/** A transport class that doesn't send anything but rather captures all requests for inspection from tests */
end_comment

begin_class
DECL|class|CapturingTransport
specifier|public
class|class
name|CapturingTransport
implements|implements
name|Transport
block|{
DECL|field|adapter
specifier|private
name|TransportServiceAdapter
name|adapter
decl_stmt|;
DECL|class|CapturedRequest
specifier|public
specifier|static
class|class
name|CapturedRequest
block|{
DECL|field|node
specifier|public
specifier|final
name|DiscoveryNode
name|node
decl_stmt|;
DECL|field|requestId
specifier|public
specifier|final
name|long
name|requestId
decl_stmt|;
DECL|field|action
specifier|public
specifier|final
name|String
name|action
decl_stmt|;
DECL|field|request
specifier|public
specifier|final
name|TransportRequest
name|request
decl_stmt|;
DECL|method|CapturedRequest
specifier|public
name|CapturedRequest
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|long
name|requestId
parameter_list|,
name|String
name|action
parameter_list|,
name|TransportRequest
name|request
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
name|this
operator|.
name|requestId
operator|=
name|requestId
expr_stmt|;
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
block|}
block|}
DECL|field|requests
specifier|private
name|ConcurrentMap
argument_list|<
name|Long
argument_list|,
name|Tuple
argument_list|<
name|DiscoveryNode
argument_list|,
name|String
argument_list|>
argument_list|>
name|requests
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|capturedRequests
specifier|private
name|BlockingQueue
argument_list|<
name|CapturedRequest
argument_list|>
name|capturedRequests
init|=
name|ConcurrentCollections
operator|.
name|newBlockingQueue
argument_list|()
decl_stmt|;
DECL|field|requestId
specifier|private
specifier|final
name|AtomicLong
name|requestId
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
comment|/** returns all requests captured so far. Doesn't clear the captured request list. See {@link #clear()} */
DECL|method|capturedRequests
specifier|public
name|CapturedRequest
index|[]
name|capturedRequests
parameter_list|()
block|{
return|return
name|capturedRequests
operator|.
name|toArray
argument_list|(
operator|new
name|CapturedRequest
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/**      * Returns all requests captured so far. This method does clear the      * captured requests list. If you do not want the captured requests      * list cleared, use {@link #capturedRequests()}.      *      * @return the captured requests      */
DECL|method|getCapturedRequestsAndClear
specifier|public
name|CapturedRequest
index|[]
name|getCapturedRequestsAndClear
parameter_list|()
block|{
name|CapturedRequest
index|[]
name|capturedRequests
init|=
name|capturedRequests
argument_list|()
decl_stmt|;
name|clear
argument_list|()
expr_stmt|;
return|return
name|capturedRequests
return|;
block|}
comment|/**      * returns all requests captured so far, grouped by target node.      * Doesn't clear the captured request list. See {@link #clear()}      */
DECL|method|capturedRequestsByTargetNode
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CapturedRequest
argument_list|>
argument_list|>
name|capturedRequestsByTargetNode
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CapturedRequest
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|CapturedRequest
name|request
range|:
name|capturedRequests
control|)
block|{
name|List
argument_list|<
name|CapturedRequest
argument_list|>
name|nodeList
init|=
name|map
operator|.
name|get
argument_list|(
name|request
operator|.
name|node
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeList
operator|==
literal|null
condition|)
block|{
name|nodeList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|request
operator|.
name|node
operator|.
name|getId
argument_list|()
argument_list|,
name|nodeList
argument_list|)
expr_stmt|;
block|}
name|nodeList
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
comment|/**      * Returns all requests captured so far, grouped by target node.      * This method does clear the captured request list. If you do not      * want the captured requests list cleared, use      * {@link #capturedRequestsByTargetNode()}.      *      * @return the captured requests grouped by target node      */
DECL|method|getCapturedRequestsByTargetNodeAndClear
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CapturedRequest
argument_list|>
argument_list|>
name|getCapturedRequestsByTargetNodeAndClear
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|CapturedRequest
argument_list|>
argument_list|>
name|map
init|=
name|capturedRequestsByTargetNode
argument_list|()
decl_stmt|;
name|clear
argument_list|()
expr_stmt|;
return|return
name|map
return|;
block|}
comment|/** clears captured requests */
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|capturedRequests
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/** simulate a response for the given requestId */
DECL|method|handleResponse
specifier|public
name|void
name|handleResponse
parameter_list|(
specifier|final
name|long
name|requestId
parameter_list|,
specifier|final
name|TransportResponse
name|response
parameter_list|)
block|{
name|adapter
operator|.
name|onResponseReceived
argument_list|(
name|requestId
argument_list|)
operator|.
name|handleResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
comment|/**      * simulate a local error for the given requestId, will be wrapped      * by a {@link SendRequestTransportException}      *      * @param requestId the id corresponding to the captured send      *                  request      * @param t the failure to wrap      */
DECL|method|handleLocalError
specifier|public
name|void
name|handleLocalError
parameter_list|(
specifier|final
name|long
name|requestId
parameter_list|,
specifier|final
name|Throwable
name|t
parameter_list|)
block|{
name|Tuple
argument_list|<
name|DiscoveryNode
argument_list|,
name|String
argument_list|>
name|request
init|=
name|requests
operator|.
name|get
argument_list|(
name|requestId
argument_list|)
decl_stmt|;
assert|assert
name|request
operator|!=
literal|null
assert|;
name|this
operator|.
name|handleError
argument_list|(
name|requestId
argument_list|,
operator|new
name|SendRequestTransportException
argument_list|(
name|request
operator|.
name|v1
argument_list|()
argument_list|,
name|request
operator|.
name|v2
argument_list|()
argument_list|,
name|t
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * simulate a remote error for the given requestId, will be wrapped      * by a {@link RemoteTransportException}      *      * @param requestId the id corresponding to the captured send      *                  request      * @param t the failure to wrap      */
DECL|method|handleRemoteError
specifier|public
name|void
name|handleRemoteError
parameter_list|(
specifier|final
name|long
name|requestId
parameter_list|,
specifier|final
name|Throwable
name|t
parameter_list|)
block|{
specifier|final
name|RemoteTransportException
name|remoteException
decl_stmt|;
if|if
condition|(
name|rarely
argument_list|(
name|Randomness
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|remoteException
operator|=
operator|new
name|RemoteTransportException
argument_list|(
literal|"remote failure, coming from local node"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
init|(
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|output
operator|.
name|writeException
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|remoteException
operator|=
operator|new
name|RemoteTransportException
argument_list|(
literal|"remote failure"
argument_list|,
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
operator|.
name|readException
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioException
parameter_list|)
block|{
throw|throw
operator|new
name|ElasticsearchException
argument_list|(
literal|"failed to serialize/deserialize supplied exception "
operator|+
name|t
argument_list|,
name|ioException
argument_list|)
throw|;
block|}
block|}
name|this
operator|.
name|handleError
argument_list|(
name|requestId
argument_list|,
name|remoteException
argument_list|)
expr_stmt|;
block|}
comment|/**      * simulate an error for the given requestId, unlike      * {@link #handleLocalError(long, Throwable)} and      * {@link #handleRemoteError(long, Throwable)}, the provided      * exception will not be wrapped but will be delivered to the      * transport layer as is      *      * @param requestId the id corresponding to the captured send      *                  request      * @param e the failure      */
DECL|method|handleError
specifier|public
name|void
name|handleError
parameter_list|(
specifier|final
name|long
name|requestId
parameter_list|,
specifier|final
name|TransportException
name|e
parameter_list|)
block|{
name|adapter
operator|.
name|onResponseReceived
argument_list|(
name|requestId
argument_list|)
operator|.
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|openConnection
specifier|public
name|Connection
name|openConnection
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|ConnectionProfile
name|profile
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Connection
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DiscoveryNode
name|getNode
parameter_list|()
block|{
return|return
name|node
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|sendRequest
parameter_list|(
name|long
name|requestId
parameter_list|,
name|String
name|action
parameter_list|,
name|TransportRequest
name|request
parameter_list|,
name|TransportRequestOptions
name|options
parameter_list|)
throws|throws
name|IOException
throws|,
name|TransportException
block|{
name|requests
operator|.
name|put
argument_list|(
name|requestId
argument_list|,
name|Tuple
operator|.
name|tuple
argument_list|(
name|node
argument_list|,
name|action
argument_list|)
argument_list|)
expr_stmt|;
name|capturedRequests
operator|.
name|add
argument_list|(
operator|new
name|CapturedRequest
argument_list|(
name|node
argument_list|,
name|requestId
argument_list|,
name|action
argument_list|,
name|request
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{              }
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|getStats
specifier|public
name|TransportStats
name|getStats
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|transportServiceAdapter
specifier|public
name|void
name|transportServiceAdapter
parameter_list|(
name|TransportServiceAdapter
name|adapter
parameter_list|)
block|{
name|this
operator|.
name|adapter
operator|=
name|adapter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|boundAddress
specifier|public
name|BoundTransportAddress
name|boundAddress
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|profileBoundAddresses
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|BoundTransportAddress
argument_list|>
name|profileBoundAddresses
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|addressesFromString
specifier|public
name|TransportAddress
index|[]
name|addressesFromString
parameter_list|(
name|String
name|address
parameter_list|,
name|int
name|perAddressLimit
parameter_list|)
throws|throws
name|UnknownHostException
block|{
return|return
operator|new
name|TransportAddress
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|nodeConnected
specifier|public
name|boolean
name|nodeConnected
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|connectToNode
specifier|public
name|void
name|connectToNode
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|,
name|ConnectionProfile
name|connectionProfile
parameter_list|,
name|CheckedBiConsumer
argument_list|<
name|Connection
argument_list|,
name|ConnectionProfile
argument_list|,
name|IOException
argument_list|>
name|connectionValidator
parameter_list|)
throws|throws
name|ConnectTransportException
block|{      }
annotation|@
name|Override
DECL|method|disconnectFromNode
specifier|public
name|void
name|disconnectFromNode
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{      }
annotation|@
name|Override
DECL|method|lifecycleState
specifier|public
name|Lifecycle
operator|.
name|State
name|lifecycleState
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|addLifecycleListener
specifier|public
name|void
name|addLifecycleListener
parameter_list|(
name|LifecycleListener
name|listener
parameter_list|)
block|{      }
annotation|@
name|Override
DECL|method|removeLifecycleListener
specifier|public
name|void
name|removeLifecycleListener
parameter_list|(
name|LifecycleListener
name|listener
parameter_list|)
block|{      }
annotation|@
name|Override
DECL|method|start
specifier|public
name|void
name|start
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|stop
specifier|public
name|void
name|stop
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|getLocalAddresses
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getLocalAddresses
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|newRequestId
specifier|public
name|long
name|newRequestId
parameter_list|()
block|{
return|return
name|requestId
operator|.
name|incrementAndGet
argument_list|()
return|;
block|}
DECL|method|getConnection
specifier|public
name|Connection
name|getConnection
parameter_list|(
name|DiscoveryNode
name|node
parameter_list|)
block|{
try|try
block|{
return|return
name|openConnection
argument_list|(
name|node
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

