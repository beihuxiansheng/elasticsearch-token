begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.disruption
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalTestCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
operator|.
name|MockTransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
operator|.
name|randomFrom
import|;
end_import

begin_comment
comment|/**  * A partition that breaks the cluster into two groups of nodes. The two groups are fully isolated  * with the exception of a single node that can see and be seen by all nodes in both groups.  */
end_comment

begin_class
DECL|class|BridgePartition
specifier|public
class|class
name|BridgePartition
extends|extends
name|NetworkPartition
block|{
DECL|field|bridgeNode
name|String
name|bridgeNode
decl_stmt|;
DECL|field|unresponsive
specifier|final
name|boolean
name|unresponsive
decl_stmt|;
DECL|method|BridgePartition
specifier|public
name|BridgePartition
parameter_list|(
name|Random
name|random
parameter_list|,
name|boolean
name|unresponsive
parameter_list|)
block|{
name|super
argument_list|(
name|random
argument_list|)
expr_stmt|;
name|this
operator|.
name|unresponsive
operator|=
name|unresponsive
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|applyToCluster
specifier|public
name|void
name|applyToCluster
parameter_list|(
name|InternalTestCluster
name|cluster
parameter_list|)
block|{
name|bridgeNode
operator|=
name|randomFrom
argument_list|(
name|random
argument_list|,
name|cluster
operator|.
name|getNodeNames
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|cluster
operator|=
name|cluster
expr_stmt|;
for|for
control|(
name|String
name|node
range|:
name|cluster
operator|.
name|getNodeNames
argument_list|()
control|)
block|{
if|if
condition|(
name|node
operator|.
name|equals
argument_list|(
name|bridgeNode
argument_list|)
operator|==
literal|false
condition|)
block|{
name|super
operator|.
name|applyToNode
argument_list|(
name|node
argument_list|,
name|cluster
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|expectedTimeToHeal
specifier|public
name|TimeValue
name|expectedTimeToHeal
parameter_list|()
block|{
return|return
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|applyDisruption
name|void
name|applyDisruption
parameter_list|(
name|MockTransportService
name|transportService1
parameter_list|,
name|MockTransportService
name|transportService2
parameter_list|)
block|{
if|if
condition|(
name|unresponsive
condition|)
block|{
name|transportService1
operator|.
name|addUnresponsiveRule
argument_list|(
name|transportService2
argument_list|)
expr_stmt|;
name|transportService2
operator|.
name|addUnresponsiveRule
argument_list|(
name|transportService1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transportService1
operator|.
name|addFailToSendNoConnectRule
argument_list|(
name|transportService2
argument_list|)
expr_stmt|;
name|transportService2
operator|.
name|addFailToSendNoConnectRule
argument_list|(
name|transportService1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getPartitionDescription
specifier|protected
name|String
name|getPartitionDescription
parameter_list|()
block|{
return|return
literal|"bridge (super connected node: ["
operator|+
name|bridgeNode
operator|+
literal|"], unresponsive ["
operator|+
name|unresponsive
operator|+
literal|"])"
return|;
block|}
block|}
end_class

end_unit

