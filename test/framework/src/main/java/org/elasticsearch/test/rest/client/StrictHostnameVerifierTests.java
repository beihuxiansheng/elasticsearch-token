begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.rest.client
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|SSLSocket
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|x500
operator|.
name|X500Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_comment
comment|/**  * Tests for the {@link StrictHostnameVerifier} to validate that it can verify IPv6 addresses with and without bracket notation, in  * addition to other address types.  */
end_comment

begin_class
DECL|class|StrictHostnameVerifierTests
specifier|public
class|class
name|StrictHostnameVerifierTests
extends|extends
name|ESTestCase
block|{
DECL|field|IP_SAN_TYPE
specifier|private
specifier|static
specifier|final
name|int
name|IP_SAN_TYPE
init|=
literal|7
decl_stmt|;
DECL|field|DNS_SAN_TYPE
specifier|private
specifier|static
specifier|final
name|int
name|DNS_SAN_TYPE
init|=
literal|2
decl_stmt|;
DECL|field|CNS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|CNS
init|=
operator|new
name|String
index|[]
block|{
literal|"my node"
block|}
decl_stmt|;
DECL|field|IP_SANS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|IP_SANS
init|=
operator|new
name|String
index|[]
block|{
literal|"127.0.0.1"
block|,
literal|"192.168.1.1"
block|,
literal|"::1"
block|}
decl_stmt|;
DECL|field|DNS_SANS
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|DNS_SANS
init|=
operator|new
name|String
index|[]
block|{
literal|"localhost"
block|,
literal|"computer"
block|,
literal|"localhost6"
block|}
decl_stmt|;
DECL|field|sslSocket
specifier|private
name|SSLSocket
name|sslSocket
decl_stmt|;
DECL|field|sslSession
specifier|private
name|SSLSession
name|sslSession
decl_stmt|;
DECL|field|certificate
specifier|private
name|X509Certificate
name|certificate
decl_stmt|;
annotation|@
name|Before
DECL|method|setupMocks
specifier|public
name|void
name|setupMocks
parameter_list|()
throws|throws
name|Exception
block|{
name|sslSocket
operator|=
name|mock
argument_list|(
name|SSLSocket
operator|.
name|class
argument_list|)
expr_stmt|;
name|sslSession
operator|=
name|mock
argument_list|(
name|SSLSession
operator|.
name|class
argument_list|)
expr_stmt|;
name|certificate
operator|=
name|mock
argument_list|(
name|X509Certificate
operator|.
name|class
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
name|subjectAlternativeNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|san
range|:
name|IP_SANS
control|)
block|{
name|subjectAlternativeNames
operator|.
name|add
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|IP_SAN_TYPE
argument_list|,
name|san
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|san
range|:
name|DNS_SANS
control|)
block|{
name|subjectAlternativeNames
operator|.
name|add
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|DNS_SAN_TYPE
argument_list|,
name|san
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|when
argument_list|(
name|sslSocket
operator|.
name|getSession
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|sslSession
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|sslSession
operator|.
name|getPeerCertificates
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|Certificate
index|[]
block|{
name|certificate
block|}
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|certificate
operator|.
name|getSubjectX500Principal
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|X500Principal
argument_list|(
literal|"CN="
operator|+
name|CNS
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|certificate
operator|.
name|getSubjectAlternativeNames
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|subjectAlternativeNames
argument_list|)
expr_stmt|;
block|}
DECL|method|testThatIPv6WithBracketsWorks
specifier|public
name|void
name|testThatIPv6WithBracketsWorks
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|ipv6Host
init|=
literal|"[::1]"
decl_stmt|;
comment|// an exception will be thrown if verification fails
name|StrictHostnameVerifier
operator|.
name|INSTANCE
operator|.
name|verify
argument_list|(
name|ipv6Host
argument_list|,
name|CNS
argument_list|,
name|IP_SANS
argument_list|)
expr_stmt|;
name|StrictHostnameVerifier
operator|.
name|INSTANCE
operator|.
name|verify
argument_list|(
name|ipv6Host
argument_list|,
name|sslSocket
argument_list|)
expr_stmt|;
name|StrictHostnameVerifier
operator|.
name|INSTANCE
operator|.
name|verify
argument_list|(
name|ipv6Host
argument_list|,
name|certificate
argument_list|)
expr_stmt|;
comment|// this is the only one we can assert on
name|assertTrue
argument_list|(
name|StrictHostnameVerifier
operator|.
name|INSTANCE
operator|.
name|verify
argument_list|(
name|ipv6Host
argument_list|,
name|sslSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testThatIPV6WithoutBracketWorks
specifier|public
name|void
name|testThatIPV6WithoutBracketWorks
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|ipv6Host
init|=
literal|"::1"
decl_stmt|;
comment|// an exception will be thrown if verification fails
name|StrictHostnameVerifier
operator|.
name|INSTANCE
operator|.
name|verify
argument_list|(
name|ipv6Host
argument_list|,
name|CNS
argument_list|,
name|IP_SANS
argument_list|)
expr_stmt|;
name|StrictHostnameVerifier
operator|.
name|INSTANCE
operator|.
name|verify
argument_list|(
name|ipv6Host
argument_list|,
name|sslSocket
argument_list|)
expr_stmt|;
name|StrictHostnameVerifier
operator|.
name|INSTANCE
operator|.
name|verify
argument_list|(
name|ipv6Host
argument_list|,
name|certificate
argument_list|)
expr_stmt|;
comment|// this is the only one we can assert on
name|assertTrue
argument_list|(
name|StrictHostnameVerifier
operator|.
name|INSTANCE
operator|.
name|verify
argument_list|(
name|ipv6Host
argument_list|,
name|sslSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testThatIPV4Works
specifier|public
name|void
name|testThatIPV4Works
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|ipv4Host
init|=
name|randomFrom
argument_list|(
literal|"127.0.0.1"
argument_list|,
literal|"192.168.1.1"
argument_list|)
decl_stmt|;
comment|// an exception will be thrown if verification fails
name|StrictHostnameVerifier
operator|.
name|INSTANCE
operator|.
name|verify
argument_list|(
name|ipv4Host
argument_list|,
name|CNS
argument_list|,
name|IP_SANS
argument_list|)
expr_stmt|;
name|StrictHostnameVerifier
operator|.
name|INSTANCE
operator|.
name|verify
argument_list|(
name|ipv4Host
argument_list|,
name|sslSocket
argument_list|)
expr_stmt|;
name|StrictHostnameVerifier
operator|.
name|INSTANCE
operator|.
name|verify
argument_list|(
name|ipv4Host
argument_list|,
name|certificate
argument_list|)
expr_stmt|;
comment|// this is the only one we can assert on
name|assertTrue
argument_list|(
name|StrictHostnameVerifier
operator|.
name|INSTANCE
operator|.
name|verify
argument_list|(
name|ipv4Host
argument_list|,
name|sslSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testThatHostnameWorks
specifier|public
name|void
name|testThatHostnameWorks
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|host
init|=
name|randomFrom
argument_list|(
name|DNS_SANS
argument_list|)
decl_stmt|;
comment|// an exception will be thrown if verification fails
name|StrictHostnameVerifier
operator|.
name|INSTANCE
operator|.
name|verify
argument_list|(
name|host
argument_list|,
name|CNS
argument_list|,
name|DNS_SANS
argument_list|)
expr_stmt|;
name|StrictHostnameVerifier
operator|.
name|INSTANCE
operator|.
name|verify
argument_list|(
name|host
argument_list|,
name|sslSocket
argument_list|)
expr_stmt|;
name|StrictHostnameVerifier
operator|.
name|INSTANCE
operator|.
name|verify
argument_list|(
name|host
argument_list|,
name|certificate
argument_list|)
expr_stmt|;
comment|// this is the only one we can assert on
name|assertTrue
argument_list|(
name|StrictHostnameVerifier
operator|.
name|INSTANCE
operator|.
name|verify
argument_list|(
name|host
argument_list|,
name|sslSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

