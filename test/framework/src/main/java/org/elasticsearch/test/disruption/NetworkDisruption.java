begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.disruption
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|set
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalTestCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|transport
operator|.
name|MockTransportService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|ConnectTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|TransportService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_comment
comment|/**  * Network disruptions are modeled using two components:  * 1) the {@link DisruptedLinks} represents the links in the network that are to be disrupted  * 2) the {@link NetworkLinkDisruptionType} represents the failure mode that is to be applied to the links  */
end_comment

begin_class
DECL|class|NetworkDisruption
specifier|public
class|class
name|NetworkDisruption
implements|implements
name|ServiceDisruptionScheme
block|{
DECL|field|logger
specifier|private
specifier|final
name|Logger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|NetworkDisruption
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|disruptedLinks
specifier|private
specifier|final
name|DisruptedLinks
name|disruptedLinks
decl_stmt|;
DECL|field|networkLinkDisruptionType
specifier|private
specifier|final
name|NetworkLinkDisruptionType
name|networkLinkDisruptionType
decl_stmt|;
DECL|field|cluster
specifier|protected
specifier|volatile
name|InternalTestCluster
name|cluster
decl_stmt|;
DECL|field|activeDisruption
specifier|protected
specifier|volatile
name|boolean
name|activeDisruption
init|=
literal|false
decl_stmt|;
DECL|method|NetworkDisruption
specifier|public
name|NetworkDisruption
parameter_list|(
name|DisruptedLinks
name|disruptedLinks
parameter_list|,
name|NetworkLinkDisruptionType
name|networkLinkDisruptionType
parameter_list|)
block|{
name|this
operator|.
name|disruptedLinks
operator|=
name|disruptedLinks
expr_stmt|;
name|this
operator|.
name|networkLinkDisruptionType
operator|=
name|networkLinkDisruptionType
expr_stmt|;
block|}
DECL|method|getDisruptedLinks
specifier|public
name|DisruptedLinks
name|getDisruptedLinks
parameter_list|()
block|{
return|return
name|disruptedLinks
return|;
block|}
DECL|method|getNetworkLinkDisruptionType
specifier|public
name|NetworkLinkDisruptionType
name|getNetworkLinkDisruptionType
parameter_list|()
block|{
return|return
name|networkLinkDisruptionType
return|;
block|}
annotation|@
name|Override
DECL|method|applyToCluster
specifier|public
name|void
name|applyToCluster
parameter_list|(
name|InternalTestCluster
name|cluster
parameter_list|)
block|{
name|this
operator|.
name|cluster
operator|=
name|cluster
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeFromCluster
specifier|public
name|void
name|removeFromCluster
parameter_list|(
name|InternalTestCluster
name|cluster
parameter_list|)
block|{
name|stopDisrupting
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|removeAndEnsureHealthy
specifier|public
name|void
name|removeAndEnsureHealthy
parameter_list|(
name|InternalTestCluster
name|cluster
parameter_list|)
block|{
name|removeFromCluster
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|ensureNodeCount
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
DECL|method|ensureNodeCount
specifier|protected
name|void
name|ensureNodeCount
parameter_list|(
name|InternalTestCluster
name|cluster
parameter_list|)
block|{
name|assertFalse
argument_list|(
literal|"cluster failed to form after disruption was healed"
argument_list|,
name|cluster
operator|.
name|client
argument_list|()
operator|.
name|admin
argument_list|()
operator|.
name|cluster
argument_list|()
operator|.
name|prepareHealth
argument_list|()
operator|.
name|setWaitForNodes
argument_list|(
literal|""
operator|+
name|cluster
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|setWaitForNoRelocatingShards
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|isTimedOut
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|applyToNode
specifier|public
specifier|synchronized
name|void
name|applyToNode
parameter_list|(
name|String
name|node
parameter_list|,
name|InternalTestCluster
name|cluster
parameter_list|)
block|{      }
annotation|@
name|Override
DECL|method|removeFromNode
specifier|public
specifier|synchronized
name|void
name|removeFromNode
parameter_list|(
name|String
name|node1
parameter_list|,
name|InternalTestCluster
name|cluster
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"stop disrupting node (disruption type: {}, disrupted links: {})"
argument_list|,
name|networkLinkDisruptionType
argument_list|,
name|disruptedLinks
argument_list|)
expr_stmt|;
name|applyToNodes
argument_list|(
operator|new
name|String
index|[]
block|{
name|node1
block|}
argument_list|,
name|cluster
operator|.
name|getNodeNames
argument_list|()
argument_list|,
name|networkLinkDisruptionType
operator|::
name|removeDisruption
argument_list|)
expr_stmt|;
name|applyToNodes
argument_list|(
name|cluster
operator|.
name|getNodeNames
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
name|node1
block|}
argument_list|,
name|networkLinkDisruptionType
operator|::
name|removeDisruption
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|testClusterClosed
specifier|public
specifier|synchronized
name|void
name|testClusterClosed
parameter_list|()
block|{      }
annotation|@
name|Override
DECL|method|startDisrupting
specifier|public
specifier|synchronized
name|void
name|startDisrupting
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"start disrupting (disruption type: {}, disrupted links: {})"
argument_list|,
name|networkLinkDisruptionType
argument_list|,
name|disruptedLinks
argument_list|)
expr_stmt|;
name|applyToNodes
argument_list|(
name|cluster
operator|.
name|getNodeNames
argument_list|()
argument_list|,
name|cluster
operator|.
name|getNodeNames
argument_list|()
argument_list|,
name|networkLinkDisruptionType
operator|::
name|applyDisruption
argument_list|)
expr_stmt|;
name|activeDisruption
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stopDisrupting
specifier|public
specifier|synchronized
name|void
name|stopDisrupting
parameter_list|()
block|{
if|if
condition|(
operator|!
name|activeDisruption
condition|)
block|{
return|return;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"stop disrupting (disruption scheme: {}, disrupted links: {})"
argument_list|,
name|networkLinkDisruptionType
argument_list|,
name|disruptedLinks
argument_list|)
expr_stmt|;
name|applyToNodes
argument_list|(
name|cluster
operator|.
name|getNodeNames
argument_list|()
argument_list|,
name|cluster
operator|.
name|getNodeNames
argument_list|()
argument_list|,
name|networkLinkDisruptionType
operator|::
name|removeDisruption
argument_list|)
expr_stmt|;
name|activeDisruption
operator|=
literal|false
expr_stmt|;
block|}
comment|/**      * Applies action to all disrupted links between two sets of nodes.      */
DECL|method|applyToNodes
specifier|private
name|void
name|applyToNodes
parameter_list|(
name|String
index|[]
name|nodes1
parameter_list|,
name|String
index|[]
name|nodes2
parameter_list|,
name|BiConsumer
argument_list|<
name|MockTransportService
argument_list|,
name|MockTransportService
argument_list|>
name|consumer
parameter_list|)
block|{
for|for
control|(
name|String
name|node1
range|:
name|nodes1
control|)
block|{
if|if
condition|(
name|disruptedLinks
operator|.
name|nodes
argument_list|()
operator|.
name|contains
argument_list|(
name|node1
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|node2
range|:
name|nodes2
control|)
block|{
if|if
condition|(
name|disruptedLinks
operator|.
name|nodes
argument_list|()
operator|.
name|contains
argument_list|(
name|node2
argument_list|)
condition|)
block|{
if|if
condition|(
name|node1
operator|.
name|equals
argument_list|(
name|node2
argument_list|)
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|disruptedLinks
operator|.
name|disrupt
argument_list|(
name|node1
argument_list|,
name|node2
argument_list|)
condition|)
block|{
name|consumer
operator|.
name|accept
argument_list|(
name|transport
argument_list|(
name|node1
argument_list|)
argument_list|,
name|transport
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|expectedTimeToHeal
specifier|public
name|TimeValue
name|expectedTimeToHeal
parameter_list|()
block|{
return|return
name|networkLinkDisruptionType
operator|.
name|expectedTimeToHeal
argument_list|()
return|;
block|}
DECL|method|transport
specifier|private
name|MockTransportService
name|transport
parameter_list|(
name|String
name|node
parameter_list|)
block|{
return|return
operator|(
name|MockTransportService
operator|)
name|cluster
operator|.
name|getInstance
argument_list|(
name|TransportService
operator|.
name|class
argument_list|,
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"network disruption (disruption type: "
operator|+
name|networkLinkDisruptionType
operator|+
literal|", disrupted links: "
operator|+
name|disruptedLinks
operator|+
literal|")"
return|;
block|}
comment|/**      * Represents a set of nodes with connections between nodes that are to be disrupted      */
DECL|class|DisruptedLinks
specifier|public
specifier|abstract
specifier|static
class|class
name|DisruptedLinks
block|{
DECL|field|nodes
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
decl_stmt|;
DECL|method|DisruptedLinks
specifier|protected
name|DisruptedLinks
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
modifier|...
name|nodeSets
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|allNodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Set
argument_list|<
name|String
argument_list|>
name|nodeSet
range|:
name|nodeSets
control|)
block|{
name|allNodes
operator|.
name|addAll
argument_list|(
name|nodeSet
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|nodes
operator|=
name|allNodes
expr_stmt|;
block|}
comment|/**          * Set of all nodes that can participate in disruptions          */
DECL|method|nodes
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
parameter_list|()
block|{
return|return
name|nodes
return|;
block|}
comment|/**          * Returns true iff network should be disrupted between the two nodes          */
DECL|method|disrupt
specifier|public
specifier|abstract
name|boolean
name|disrupt
parameter_list|(
name|String
name|node1
parameter_list|,
name|String
name|node2
parameter_list|)
function_decl|;
block|}
comment|/**      * Creates two partitions with symmetric failures      */
DECL|class|TwoPartitions
specifier|public
specifier|static
class|class
name|TwoPartitions
extends|extends
name|DisruptedLinks
block|{
DECL|field|nodesSideOne
specifier|protected
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|nodesSideOne
decl_stmt|;
DECL|field|nodesSideTwo
specifier|protected
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|nodesSideTwo
decl_stmt|;
DECL|method|TwoPartitions
specifier|public
name|TwoPartitions
parameter_list|(
name|String
name|node1
parameter_list|,
name|String
name|node2
parameter_list|)
block|{
name|this
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|node1
argument_list|)
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|node2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|TwoPartitions
specifier|public
name|TwoPartitions
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|nodesSideOne
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|nodesSideTwo
parameter_list|)
block|{
name|super
argument_list|(
name|nodesSideOne
argument_list|,
name|nodesSideTwo
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodesSideOne
operator|=
name|nodesSideOne
expr_stmt|;
name|this
operator|.
name|nodesSideTwo
operator|=
name|nodesSideTwo
expr_stmt|;
assert|assert
name|nodesSideOne
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
assert|;
assert|assert
name|nodesSideTwo
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
assert|;
assert|assert
name|Sets
operator|.
name|haveEmptyIntersection
argument_list|(
name|nodesSideOne
argument_list|,
name|nodesSideTwo
argument_list|)
assert|;
block|}
DECL|method|random
specifier|public
specifier|static
name|TwoPartitions
name|random
parameter_list|(
name|Random
name|random
parameter_list|,
name|String
modifier|...
name|nodes
parameter_list|)
block|{
return|return
name|random
argument_list|(
name|random
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|nodes
argument_list|)
argument_list|)
return|;
block|}
DECL|method|random
specifier|public
specifier|static
name|TwoPartitions
name|random
parameter_list|(
name|Random
name|random
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
parameter_list|)
block|{
assert|assert
name|nodes
operator|.
name|size
argument_list|()
operator|>=
literal|2
operator|:
literal|"two partitions topology requires at least 2 nodes"
assert|;
name|Set
argument_list|<
name|String
argument_list|>
name|nodesSideOne
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|nodesSideTwo
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
if|if
condition|(
name|nodesSideOne
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nodesSideOne
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nodesSideTwo
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nodesSideTwo
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|nodesSideOne
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nodesSideTwo
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|TwoPartitions
argument_list|(
name|nodesSideOne
argument_list|,
name|nodesSideTwo
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|disrupt
specifier|public
name|boolean
name|disrupt
parameter_list|(
name|String
name|node1
parameter_list|,
name|String
name|node2
parameter_list|)
block|{
if|if
condition|(
name|nodesSideOne
operator|.
name|contains
argument_list|(
name|node1
argument_list|)
operator|&&
name|nodesSideTwo
operator|.
name|contains
argument_list|(
name|node2
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|nodesSideOne
operator|.
name|contains
argument_list|(
name|node2
argument_list|)
operator|&&
name|nodesSideTwo
operator|.
name|contains
argument_list|(
name|node1
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|getNodesSideOne
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getNodesSideOne
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|nodesSideOne
argument_list|)
return|;
block|}
DECL|method|getNodesSideTwo
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getNodesSideTwo
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|nodesSideTwo
argument_list|)
return|;
block|}
DECL|method|getMajoritySide
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getMajoritySide
parameter_list|()
block|{
if|if
condition|(
name|nodesSideOne
operator|.
name|size
argument_list|()
operator|>=
name|nodesSideTwo
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|getNodesSideOne
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|getNodesSideTwo
argument_list|()
return|;
block|}
block|}
DECL|method|getMinoritySide
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getMinoritySide
parameter_list|()
block|{
if|if
condition|(
name|nodesSideOne
operator|.
name|size
argument_list|()
operator|>=
name|nodesSideTwo
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|getNodesSideTwo
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|getNodesSideOne
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"two partitions (partition 1: "
operator|+
name|nodesSideOne
operator|+
literal|" and partition 2: "
operator|+
name|nodesSideTwo
operator|+
literal|")"
return|;
block|}
block|}
comment|/**      * Creates two partitions with symmetric failures and a bridge node that can connect to both of the partitions      */
DECL|class|Bridge
specifier|public
specifier|static
class|class
name|Bridge
extends|extends
name|DisruptedLinks
block|{
DECL|field|bridgeNode
specifier|private
specifier|final
name|String
name|bridgeNode
decl_stmt|;
DECL|field|nodesSideOne
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|nodesSideOne
decl_stmt|;
DECL|field|nodesSideTwo
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|nodesSideTwo
decl_stmt|;
DECL|method|Bridge
specifier|public
name|Bridge
parameter_list|(
name|String
name|bridgeNode
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|nodesSideOne
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|nodesSideTwo
parameter_list|)
block|{
name|super
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|bridgeNode
argument_list|)
argument_list|,
name|nodesSideOne
argument_list|,
name|nodesSideTwo
argument_list|)
expr_stmt|;
name|this
operator|.
name|bridgeNode
operator|=
name|bridgeNode
expr_stmt|;
name|this
operator|.
name|nodesSideOne
operator|=
name|nodesSideOne
expr_stmt|;
name|this
operator|.
name|nodesSideTwo
operator|=
name|nodesSideTwo
expr_stmt|;
assert|assert
name|nodesSideOne
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
assert|;
assert|assert
name|nodesSideTwo
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
assert|;
assert|assert
name|Sets
operator|.
name|haveEmptyIntersection
argument_list|(
name|nodesSideOne
argument_list|,
name|nodesSideTwo
argument_list|)
assert|;
assert|assert
name|nodesSideOne
operator|.
name|contains
argument_list|(
name|bridgeNode
argument_list|)
operator|==
literal|false
operator|&&
name|nodesSideTwo
operator|.
name|contains
argument_list|(
name|bridgeNode
argument_list|)
operator|==
literal|false
assert|;
block|}
DECL|method|random
specifier|public
specifier|static
name|Bridge
name|random
parameter_list|(
name|Random
name|random
parameter_list|,
name|String
modifier|...
name|nodes
parameter_list|)
block|{
return|return
name|random
argument_list|(
name|random
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|nodes
argument_list|)
argument_list|)
return|;
block|}
DECL|method|random
specifier|public
specifier|static
name|Bridge
name|random
parameter_list|(
name|Random
name|random
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
parameter_list|)
block|{
assert|assert
name|nodes
operator|.
name|size
argument_list|()
operator|>=
literal|3
operator|:
literal|"bridge topology requires at least 3 nodes"
assert|;
name|String
name|bridgeNode
init|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|,
name|nodes
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|nodesSideOne
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|nodesSideTwo
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
if|if
condition|(
name|node
operator|.
name|equals
argument_list|(
name|bridgeNode
argument_list|)
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|nodesSideOne
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nodesSideOne
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nodesSideTwo
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nodesSideTwo
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|random
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|nodesSideOne
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nodesSideTwo
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|Bridge
argument_list|(
name|bridgeNode
argument_list|,
name|nodesSideOne
argument_list|,
name|nodesSideTwo
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|disrupt
specifier|public
name|boolean
name|disrupt
parameter_list|(
name|String
name|node1
parameter_list|,
name|String
name|node2
parameter_list|)
block|{
if|if
condition|(
name|nodesSideOne
operator|.
name|contains
argument_list|(
name|node1
argument_list|)
operator|&&
name|nodesSideTwo
operator|.
name|contains
argument_list|(
name|node2
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|nodesSideOne
operator|.
name|contains
argument_list|(
name|node2
argument_list|)
operator|&&
name|nodesSideTwo
operator|.
name|contains
argument_list|(
name|node1
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|getBridgeNode
specifier|public
name|String
name|getBridgeNode
parameter_list|()
block|{
return|return
name|bridgeNode
return|;
block|}
DECL|method|getNodesSideOne
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getNodesSideOne
parameter_list|()
block|{
return|return
name|nodesSideOne
return|;
block|}
DECL|method|getNodesSideTwo
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getNodesSideTwo
parameter_list|()
block|{
return|return
name|nodesSideTwo
return|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"bridge partition (super connected node: ["
operator|+
name|bridgeNode
operator|+
literal|"], partition 1: "
operator|+
name|nodesSideOne
operator|+
literal|" and partition 2: "
operator|+
name|nodesSideTwo
operator|+
literal|")"
return|;
block|}
block|}
DECL|class|IsolateAllNodes
specifier|public
specifier|static
class|class
name|IsolateAllNodes
extends|extends
name|DisruptedLinks
block|{
DECL|method|IsolateAllNodes
specifier|public
name|IsolateAllNodes
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
parameter_list|)
block|{
name|super
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|disrupt
specifier|public
name|boolean
name|disrupt
parameter_list|(
name|String
name|node1
parameter_list|,
name|String
name|node2
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/**      * Abstract class representing various types of network disruptions. Instances of this class override the {@link #applyDisruption}      * method to apply their specific disruption type to requests that are send from a source to a target node.      */
DECL|class|NetworkLinkDisruptionType
specifier|public
specifier|abstract
specifier|static
class|class
name|NetworkLinkDisruptionType
block|{
comment|/**          * Applies network disruption for requests send from the node represented by the source transport service to the node represented          * by the target transport service.          *          * @param sourceTransportService source transport service from which requests are sent          * @param targetTransportService target transport service to which requests are sent          */
DECL|method|applyDisruption
specifier|public
specifier|abstract
name|void
name|applyDisruption
parameter_list|(
name|MockTransportService
name|sourceTransportService
parameter_list|,
name|MockTransportService
name|targetTransportService
parameter_list|)
function_decl|;
comment|/**          * Removes network disruption that was added by {@link #applyDisruption}.          *          * @param sourceTransportService source transport service from which requests are sent          * @param targetTransportService target transport service to which requests are sent          */
DECL|method|removeDisruption
specifier|public
name|void
name|removeDisruption
parameter_list|(
name|MockTransportService
name|sourceTransportService
parameter_list|,
name|MockTransportService
name|targetTransportService
parameter_list|)
block|{
name|sourceTransportService
operator|.
name|clearRule
argument_list|(
name|targetTransportService
argument_list|)
expr_stmt|;
block|}
comment|/**          * Returns expected time to heal after disruption has been removed. Defaults to instant healing.          */
DECL|method|expectedTimeToHeal
specifier|public
name|TimeValue
name|expectedTimeToHeal
parameter_list|()
block|{
return|return
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
comment|/**      * Simulates a network disconnect. Sending a request from source to target node throws a {@link ConnectTransportException}.      */
DECL|class|NetworkDisconnect
specifier|public
specifier|static
class|class
name|NetworkDisconnect
extends|extends
name|NetworkLinkDisruptionType
block|{
annotation|@
name|Override
DECL|method|applyDisruption
specifier|public
name|void
name|applyDisruption
parameter_list|(
name|MockTransportService
name|sourceTransportService
parameter_list|,
name|MockTransportService
name|targetTransportService
parameter_list|)
block|{
name|sourceTransportService
operator|.
name|addFailToSendNoConnectRule
argument_list|(
name|targetTransportService
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"network disconnects"
return|;
block|}
block|}
comment|/**      * Simulates an unresponsive target node by dropping requests sent from source to target node.      */
DECL|class|NetworkUnresponsive
specifier|public
specifier|static
class|class
name|NetworkUnresponsive
extends|extends
name|NetworkLinkDisruptionType
block|{
annotation|@
name|Override
DECL|method|applyDisruption
specifier|public
name|void
name|applyDisruption
parameter_list|(
name|MockTransportService
name|sourceTransportService
parameter_list|,
name|MockTransportService
name|targetTransportService
parameter_list|)
block|{
name|sourceTransportService
operator|.
name|addUnresponsiveRule
argument_list|(
name|targetTransportService
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"network unresponsive"
return|;
block|}
block|}
comment|/**      * Simulates slow or congested network. Delivery of requests that are sent from source to target node are delayed by a configurable      * time amount.      */
DECL|class|NetworkDelay
specifier|public
specifier|static
class|class
name|NetworkDelay
extends|extends
name|NetworkLinkDisruptionType
block|{
DECL|field|DEFAULT_DELAY_MIN
specifier|public
specifier|static
name|TimeValue
name|DEFAULT_DELAY_MIN
init|=
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|10
argument_list|)
decl_stmt|;
DECL|field|DEFAULT_DELAY_MAX
specifier|public
specifier|static
name|TimeValue
name|DEFAULT_DELAY_MAX
init|=
name|TimeValue
operator|.
name|timeValueSeconds
argument_list|(
literal|90
argument_list|)
decl_stmt|;
DECL|field|delay
specifier|private
specifier|final
name|TimeValue
name|delay
decl_stmt|;
comment|/**          * Delays requests by a fixed time value.          *          * @param delay time to delay requests          */
DECL|method|NetworkDelay
specifier|public
name|NetworkDelay
parameter_list|(
name|TimeValue
name|delay
parameter_list|)
block|{
name|this
operator|.
name|delay
operator|=
name|delay
expr_stmt|;
block|}
comment|/**          * Delays requests by a random but fixed time value between {@link #DEFAULT_DELAY_MIN} and {@link #DEFAULT_DELAY_MAX}.          *          * @param random instance to use for randomization of delay          */
DECL|method|random
specifier|public
specifier|static
name|NetworkDelay
name|random
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
return|return
name|random
argument_list|(
name|random
argument_list|,
name|DEFAULT_DELAY_MIN
argument_list|,
name|DEFAULT_DELAY_MAX
argument_list|)
return|;
block|}
comment|/**          * Delays requests by a random but fixed time value between delayMin and delayMax.          *          * @param random   instance to use for randomization of delay          * @param delayMin minimum delay          * @param delayMax maximum delay          */
DECL|method|random
specifier|public
specifier|static
name|NetworkDelay
name|random
parameter_list|(
name|Random
name|random
parameter_list|,
name|TimeValue
name|delayMin
parameter_list|,
name|TimeValue
name|delayMax
parameter_list|)
block|{
return|return
operator|new
name|NetworkDelay
argument_list|(
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
name|delayMin
operator|.
name|millis
argument_list|()
operator|==
name|delayMax
operator|.
name|millis
argument_list|()
condition|?
name|delayMin
operator|.
name|millis
argument_list|()
else|:
name|delayMin
operator|.
name|millis
argument_list|()
operator|+
name|random
operator|.
name|nextInt
argument_list|(
call|(
name|int
call|)
argument_list|(
name|delayMax
operator|.
name|millis
argument_list|()
operator|-
name|delayMin
operator|.
name|millis
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|applyDisruption
specifier|public
name|void
name|applyDisruption
parameter_list|(
name|MockTransportService
name|sourceTransportService
parameter_list|,
name|MockTransportService
name|targetTransportService
parameter_list|)
block|{
name|sourceTransportService
operator|.
name|addUnresponsiveRule
argument_list|(
name|targetTransportService
argument_list|,
name|delay
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|expectedTimeToHeal
specifier|public
name|TimeValue
name|expectedTimeToHeal
parameter_list|()
block|{
return|return
name|delay
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"network delays for ["
operator|+
name|delay
operator|+
literal|"]"
return|;
block|}
block|}
block|}
end_class

end_unit

