begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/** Utilities for selecting versions in tests */
end_comment

begin_class
DECL|class|VersionUtils
specifier|public
class|class
name|VersionUtils
block|{
DECL|field|RELEASED_VERSIONS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|Version
argument_list|>
name|RELEASED_VERSIONS
decl_stmt|;
DECL|field|UNRELEASED_VERSIONS
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|Version
argument_list|>
name|UNRELEASED_VERSIONS
decl_stmt|;
static|static
block|{
specifier|final
name|Field
index|[]
name|declaredFields
init|=
name|Version
operator|.
name|class
operator|.
name|getFields
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|releasedIdsSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|unreleasedIdsSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Field
name|field
range|:
name|declaredFields
control|)
block|{
specifier|final
name|int
name|mod
init|=
name|field
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|Modifier
operator|.
name|isStatic
argument_list|(
name|mod
argument_list|)
operator|&&
name|Modifier
operator|.
name|isFinal
argument_list|(
name|mod
argument_list|)
operator|&&
name|Modifier
operator|.
name|isPublic
argument_list|(
name|mod
argument_list|)
condition|)
block|{
if|if
condition|(
name|field
operator|.
name|getType
argument_list|()
operator|==
name|Version
operator|.
name|class
condition|)
block|{
specifier|final
name|int
name|id
decl_stmt|;
try|try
block|{
name|id
operator|=
operator|(
operator|(
name|Version
operator|)
name|field
operator|.
name|get
argument_list|(
literal|null
argument_list|)
operator|)
operator|.
name|id
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
assert|assert
name|field
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
literal|"(V(_\\d+)+(_(alpha|beta|rc)\\d+)?(_UNRELEASED)?|CURRENT)"
argument_list|)
operator|:
name|field
operator|.
name|getName
argument_list|()
assert|;
comment|// note that below we remove CURRENT and add it to released; we do it this way because there are two constants that
comment|// correspond to CURRENT, CURRENT itself and the actual version that CURRENT points to
if|if
condition|(
name|field
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"CURRENT"
argument_list|)
operator|||
name|field
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"UNRELEASED"
argument_list|)
condition|)
block|{
name|unreleasedIdsSet
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|releasedIdsSet
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// treat CURRENT as released for BWC testing
name|unreleasedIdsSet
operator|.
name|remove
argument_list|(
name|Version
operator|.
name|CURRENT
operator|.
name|id
argument_list|)
expr_stmt|;
name|releasedIdsSet
operator|.
name|add
argument_list|(
name|Version
operator|.
name|CURRENT
operator|.
name|id
argument_list|)
expr_stmt|;
comment|// unreleasedIdsSet and releasedIdsSet should be disjoint
assert|assert
name|unreleasedIdsSet
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|releasedIdsSet
operator|::
name|contains
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
assert|;
name|RELEASED_VERSIONS
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|releasedIdsSet
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|()
operator|.
name|map
argument_list|(
name|Version
operator|::
name|fromId
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|UNRELEASED_VERSIONS
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|unreleasedIdsSet
operator|.
name|stream
argument_list|()
operator|.
name|sorted
argument_list|()
operator|.
name|map
argument_list|(
name|Version
operator|::
name|fromId
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns an immutable, sorted list containing all released versions.      *      * @return all released versions      */
DECL|method|allReleasedVersions
specifier|public
specifier|static
name|List
argument_list|<
name|Version
argument_list|>
name|allReleasedVersions
parameter_list|()
block|{
return|return
name|RELEASED_VERSIONS
return|;
block|}
comment|/**      * Returns an immutable, sorted list containing all unreleased versions.      *      * @return all unreleased versions      */
DECL|method|allUnreleasedVersions
specifier|public
specifier|static
name|List
argument_list|<
name|Version
argument_list|>
name|allUnreleasedVersions
parameter_list|()
block|{
return|return
name|UNRELEASED_VERSIONS
return|;
block|}
DECL|method|getPreviousVersion
specifier|public
specifier|static
name|Version
name|getPreviousVersion
parameter_list|(
name|Version
name|version
parameter_list|)
block|{
name|int
name|index
init|=
name|RELEASED_VERSIONS
operator|.
name|indexOf
argument_list|(
name|version
argument_list|)
decl_stmt|;
assert|assert
name|index
operator|>
literal|0
assert|;
return|return
name|RELEASED_VERSIONS
operator|.
name|get
argument_list|(
name|index
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/** Returns the {@link Version} before the {@link Version#CURRENT} */
DECL|method|getPreviousVersion
specifier|public
specifier|static
name|Version
name|getPreviousVersion
parameter_list|()
block|{
name|Version
name|version
init|=
name|getPreviousVersion
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
decl_stmt|;
assert|assert
name|version
operator|.
name|before
argument_list|(
name|Version
operator|.
name|CURRENT
argument_list|)
assert|;
return|return
name|version
return|;
block|}
comment|/** Returns the oldest {@link Version} */
DECL|method|getFirstVersion
specifier|public
specifier|static
name|Version
name|getFirstVersion
parameter_list|()
block|{
return|return
name|RELEASED_VERSIONS
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/** Returns a random {@link Version} from all available versions. */
DECL|method|randomVersion
specifier|public
specifier|static
name|Version
name|randomVersion
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
return|return
name|RELEASED_VERSIONS
operator|.
name|get
argument_list|(
name|random
operator|.
name|nextInt
argument_list|(
name|RELEASED_VERSIONS
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
comment|/** Returns a random {@link Version} between<code>minVersion</code> and<code>maxVersion</code> (inclusive). */
DECL|method|randomVersionBetween
specifier|public
specifier|static
name|Version
name|randomVersionBetween
parameter_list|(
name|Random
name|random
parameter_list|,
name|Version
name|minVersion
parameter_list|,
name|Version
name|maxVersion
parameter_list|)
block|{
name|int
name|minVersionIndex
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|minVersion
operator|!=
literal|null
condition|)
block|{
name|minVersionIndex
operator|=
name|RELEASED_VERSIONS
operator|.
name|indexOf
argument_list|(
name|minVersion
argument_list|)
expr_stmt|;
block|}
name|int
name|maxVersionIndex
init|=
name|RELEASED_VERSIONS
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|maxVersion
operator|!=
literal|null
condition|)
block|{
name|maxVersionIndex
operator|=
name|RELEASED_VERSIONS
operator|.
name|indexOf
argument_list|(
name|maxVersion
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minVersionIndex
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"minVersion ["
operator|+
name|minVersion
operator|+
literal|"] does not exist."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|maxVersionIndex
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"maxVersion ["
operator|+
name|maxVersion
operator|+
literal|"] does not exist."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|minVersionIndex
operator|>
name|maxVersionIndex
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"maxVersion ["
operator|+
name|maxVersion
operator|+
literal|"] cannot be less than minVersion ["
operator|+
name|minVersion
operator|+
literal|"]"
argument_list|)
throw|;
block|}
else|else
block|{
comment|// minVersionIndex is inclusive so need to add 1 to this index
name|int
name|range
init|=
name|maxVersionIndex
operator|+
literal|1
operator|-
name|minVersionIndex
decl_stmt|;
return|return
name|RELEASED_VERSIONS
operator|.
name|get
argument_list|(
name|minVersionIndex
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|range
argument_list|)
argument_list|)
return|;
block|}
block|}
DECL|method|isSnapshot
specifier|public
specifier|static
name|boolean
name|isSnapshot
parameter_list|(
name|Version
name|version
parameter_list|)
block|{
if|if
condition|(
name|Version
operator|.
name|CURRENT
operator|.
name|equals
argument_list|(
name|version
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

