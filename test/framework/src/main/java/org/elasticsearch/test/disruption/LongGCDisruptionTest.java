begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.disruption
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_class
DECL|class|LongGCDisruptionTest
specifier|public
class|class
name|LongGCDisruptionTest
extends|extends
name|ESTestCase
block|{
DECL|class|LockedExecutor
specifier|static
class|class
name|LockedExecutor
block|{
DECL|field|lock
name|ReentrantLock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
DECL|method|executeLocked
specifier|public
name|void
name|executeLocked
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|r
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|testBlockingTimeout
specifier|public
name|void
name|testBlockingTimeout
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|nodeName
init|=
literal|"test_node"
decl_stmt|;
name|LongGCDisruption
name|disruption
init|=
operator|new
name|LongGCDisruption
argument_list|(
name|random
argument_list|()
argument_list|,
name|nodeName
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Pattern
index|[]
name|getUnsafeClasses
parameter_list|()
block|{
return|return
operator|new
name|Pattern
index|[]
block|{
name|Pattern
operator|.
name|compile
argument_list|(
name|LockedExecutor
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
block|}
return|;
block|}
annotation|@
name|Override
specifier|protected
name|long
name|getStoppingTimeoutInMillis
parameter_list|()
block|{
return|return
literal|100
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|underLock
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|pauseUnderLock
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|LockedExecutor
name|lockedExecutor
init|=
operator|new
name|LockedExecutor
argument_list|()
decl_stmt|;
specifier|final
name|AtomicLong
name|ops
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
comment|// at least one locked and one none lock thread
specifier|final
name|boolean
name|lockedExec
init|=
operator|(
name|i
operator|<
literal|9
operator|&&
name|randomBoolean
argument_list|()
operator|)
operator|||
name|i
operator|==
literal|0
decl_stmt|;
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
while|while
condition|(
name|stop
operator|.
name|get
argument_list|()
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|lockedExec
condition|)
block|{
name|lockedExecutor
operator|.
name|executeLocked
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|underLock
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|ops
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|pauseUnderLock
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{                                  }
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ops
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|setName
argument_list|(
literal|"["
operator|+
name|nodeName
operator|+
literal|"]["
operator|+
name|i
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// make sure some threads are under lock
name|underLock
operator|.
name|await
argument_list|()
expr_stmt|;
name|RuntimeException
name|e
init|=
name|expectThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
name|disruption
operator|::
name|startDisrupting
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"stopping node threads took too long"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pauseUnderLock
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Checks that a GC disruption never blocks threads while they are doing something "unsafe"      * but does keep retrying until all threads can be safely paused      */
DECL|method|testNotBlockingUnsafeStackTraces
specifier|public
name|void
name|testNotBlockingUnsafeStackTraces
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|nodeName
init|=
literal|"test_node"
decl_stmt|;
name|LongGCDisruption
name|disruption
init|=
operator|new
name|LongGCDisruption
argument_list|(
name|random
argument_list|()
argument_list|,
name|nodeName
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Pattern
index|[]
name|getUnsafeClasses
parameter_list|()
block|{
return|return
operator|new
name|Pattern
index|[]
block|{
name|Pattern
operator|.
name|compile
argument_list|(
name|LockedExecutor
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
block|}
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|AtomicBoolean
name|stop
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|LockedExecutor
name|lockedExecutor
init|=
operator|new
name|LockedExecutor
argument_list|()
decl_stmt|;
specifier|final
name|AtomicLong
name|ops
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
index|[]
name|threads
init|=
operator|new
name|Thread
index|[
literal|10
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|threads
index|[
name|i
index|]
operator|=
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|stop
operator|.
name|get
argument_list|()
operator|==
literal|false
condition|;
name|iter
operator|++
control|)
block|{
if|if
condition|(
name|iter
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|lockedExecutor
operator|.
name|executeLocked
argument_list|(
parameter_list|()
lambda|->
block|{
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
comment|// give some chance to catch this stack trace
name|ops
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
comment|// give some chance to catch this stack trace
name|ops
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|setName
argument_list|(
literal|"["
operator|+
name|nodeName
operator|+
literal|"]["
operator|+
name|i
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|threads
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|// make sure some threads are under lock
name|disruption
operator|.
name|startDisrupting
argument_list|()
expr_stmt|;
name|long
name|first
init|=
name|ops
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|lockedExecutor
operator|.
name|lock
operator|.
name|isLocked
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// no threads should own the lock
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ops
operator|.
name|get
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|first
argument_list|)
argument_list|)
expr_stmt|;
name|disruption
operator|.
name|stopDisrupting
argument_list|()
expr_stmt|;
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
name|assertThat
argument_list|(
name|ops
operator|.
name|get
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
name|first
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stop
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

