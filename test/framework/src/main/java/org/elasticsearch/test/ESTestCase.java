begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
package|;
end_package

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|RandomizedTest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|Listeners
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakLingering
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakScope
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ThreadLeakScope
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|TimeoutSuite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|CodepointSetGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomNumbers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomStrings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|rules
operator|.
name|TestRuleAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LoggerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|Configurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|status
operator|.
name|StatusConsoleListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|status
operator|.
name|StatusData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|status
operator|.
name|StatusLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|uninverting
operator|.
name|UninvertingReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|SuppressCodecs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestRuleMarkFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TimeUnits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|bootstrap
operator|.
name|BootstrapForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|client
operator|.
name|Requests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|PathUtilsForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|BytesStreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableAwareStreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Writeable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|DeprecationLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|transport
operator|.
name|TransportAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|MockBigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|MockPageCacheRecycler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|NamedXContentRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|NodeEnvironment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|AnalysisRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|CharFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|IndexAnalyzers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|TokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|analysis
operator|.
name|TokenizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|Mapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|mapper
operator|.
name|MetadataFieldMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|IndicesService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|indices
operator|.
name|analysis
operator|.
name|AnalysisModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|AnalysisPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|MapperPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|MockScriptEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|MockSearchService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|listeners
operator|.
name|LoggingListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|junit
operator|.
name|listeners
operator|.
name|ReproduceInfoPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|threadpool
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|internal
operator|.
name|AssumptionViolatedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|RuleChain
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UncheckedIOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BooleanSupplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|CollectionUtils
operator|.
name|arrayAsArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|empty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasItem
import|;
end_import

begin_comment
comment|/**  * Base testcase for randomized unit testing with Elasticsearch  */
end_comment

begin_class
annotation|@
name|Listeners
argument_list|(
block|{
name|ReproduceInfoPrinter
operator|.
name|class
block|,
name|LoggingListener
operator|.
name|class
block|}
argument_list|)
annotation|@
name|ThreadLeakScope
argument_list|(
name|Scope
operator|.
name|SUITE
argument_list|)
annotation|@
name|ThreadLeakLingering
argument_list|(
name|linger
operator|=
literal|5000
argument_list|)
comment|// 5 sec lingering
annotation|@
name|TimeoutSuite
argument_list|(
name|millis
operator|=
literal|20
operator|*
name|TimeUnits
operator|.
name|MINUTE
argument_list|)
annotation|@
name|LuceneTestCase
operator|.
name|SuppressSysoutChecks
argument_list|(
name|bugUrl
operator|=
literal|"we log a lot on purpose"
argument_list|)
comment|// we suppress pretty much all the lucene codecs for now, except asserting
comment|// assertingcodec is the winner for a codec here: it finds bugs and gives clear exceptions.
annotation|@
name|SuppressCodecs
argument_list|(
block|{
literal|"SimpleText"
block|,
literal|"Memory"
block|,
literal|"CheapBastard"
block|,
literal|"Direct"
block|,
literal|"Compressing"
block|,
literal|"FST50"
block|,
literal|"FSTOrd50"
block|,
literal|"TestBloomFilteredLucenePostings"
block|,
literal|"MockRandom"
block|,
literal|"BlockTreeOrds"
block|,
literal|"LuceneFixedGap"
block|,
literal|"LuceneVarGapFixedInterval"
block|,
literal|"LuceneVarGapDocFreqInterval"
block|,
literal|"Lucene50"
block|}
argument_list|)
annotation|@
name|LuceneTestCase
operator|.
name|SuppressReproduceLine
DECL|class|ESTestCase
specifier|public
specifier|abstract
class|class
name|ESTestCase
extends|extends
name|LuceneTestCase
block|{
DECL|field|portGenerator
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|portGenerator
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
annotation|@
name|AfterClass
DECL|method|resetPortCounter
specifier|public
specifier|static
name|void
name|resetPortCounter
parameter_list|()
block|{
name|portGenerator
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
static|static
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"log4j.shutdownHookEnabled"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"log4j2.disable.jmx"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"log4j.skipJansi"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// jython has this crazy shaded Jansi version that log4j2 tries to load
comment|// shutdown hook so that when the test JVM exits, logging is shutdown too
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
name|LoggerContext
name|context
init|=
operator|(
name|LoggerContext
operator|)
name|LogManager
operator|.
name|getContext
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Configurator
operator|.
name|shutdown
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|BootstrapForTesting
operator|.
name|ensureInitialized
argument_list|()
expr_stmt|;
block|}
DECL|field|logger
specifier|protected
specifier|final
name|Logger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|threadContext
specifier|private
name|ThreadContext
name|threadContext
decl_stmt|;
comment|// -----------------------------------------------------------------
comment|// Suite and test case setup/cleanup.
comment|// -----------------------------------------------------------------
annotation|@
name|Rule
DECL|field|failureAndSuccessEvents
specifier|public
name|RuleChain
name|failureAndSuccessEvents
init|=
name|RuleChain
operator|.
name|outerRule
argument_list|(
operator|new
name|TestRuleAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|afterIfSuccessful
parameter_list|()
throws|throws
name|Throwable
block|{
name|ESTestCase
operator|.
name|this
operator|.
name|afterIfSuccessful
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|afterAlways
parameter_list|(
name|List
argument_list|<
name|Throwable
argument_list|>
name|errors
parameter_list|)
throws|throws
name|Throwable
block|{
if|if
condition|(
name|errors
operator|!=
literal|null
operator|&&
name|errors
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|boolean
name|allAssumption
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Throwable
name|error
range|:
name|errors
control|)
block|{
if|if
condition|(
literal|false
operator|==
name|error
operator|instanceof
name|AssumptionViolatedException
condition|)
block|{
name|allAssumption
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
literal|false
operator|==
name|allAssumption
condition|)
block|{
name|ESTestCase
operator|.
name|this
operator|.
name|afterIfFailed
argument_list|(
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|afterAlways
argument_list|(
name|errors
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|/**      * Generates a new transport address using {@link TransportAddress#META_ADDRESS} with an incrementing port number.      * The port number starts at 0 and is reset after each test suite run.      */
DECL|method|buildNewFakeTransportAddress
specifier|public
specifier|static
name|TransportAddress
name|buildNewFakeTransportAddress
parameter_list|()
block|{
return|return
operator|new
name|TransportAddress
argument_list|(
name|TransportAddress
operator|.
name|META_ADDRESS
argument_list|,
name|portGenerator
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Called when a test fails, supplying the errors it generated. Not called when the test fails because assumptions are violated.      */
DECL|method|afterIfFailed
specifier|protected
name|void
name|afterIfFailed
parameter_list|(
name|List
argument_list|<
name|Throwable
argument_list|>
name|errors
parameter_list|)
block|{     }
comment|/** called after a test is finished, but only if successful */
DECL|method|afterIfSuccessful
specifier|protected
name|void
name|afterIfSuccessful
parameter_list|()
throws|throws
name|Exception
block|{     }
comment|// setup mock filesystems for this test run. we change PathUtils
comment|// so that all accesses are plumbed thru any mock wrappers
annotation|@
name|BeforeClass
DECL|method|setFileSystem
specifier|public
specifier|static
name|void
name|setFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
name|PathUtilsForTesting
operator|.
name|setup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|restoreFileSystem
specifier|public
specifier|static
name|void
name|restoreFileSystem
parameter_list|()
throws|throws
name|Exception
block|{
name|PathUtilsForTesting
operator|.
name|teardown
argument_list|()
expr_stmt|;
block|}
comment|// randomize content type for request builders
annotation|@
name|BeforeClass
DECL|method|setContentType
specifier|public
specifier|static
name|void
name|setContentType
parameter_list|()
throws|throws
name|Exception
block|{
name|Requests
operator|.
name|CONTENT_TYPE
operator|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|Requests
operator|.
name|INDEX_CONTENT_TYPE
operator|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|restoreContentType
specifier|public
specifier|static
name|void
name|restoreContentType
parameter_list|()
block|{
name|Requests
operator|.
name|CONTENT_TYPE
operator|=
name|XContentType
operator|.
name|SMILE
expr_stmt|;
name|Requests
operator|.
name|INDEX_CONTENT_TYPE
operator|=
name|XContentType
operator|.
name|JSON
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|before
specifier|public
specifier|final
name|void
name|before
parameter_list|()
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"[{}]: before test"
argument_list|,
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|enableWarningsCheck
argument_list|()
condition|)
block|{
name|this
operator|.
name|threadContext
operator|=
operator|new
name|ThreadContext
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|DeprecationLogger
operator|.
name|setThreadContext
argument_list|(
name|threadContext
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Whether or not we check after each test whether it has left warnings behind. That happens if any deprecated feature or syntax      * was used by the test and the test didn't assert on it using {@link #assertWarnings(String...)}.      */
DECL|method|enableWarningsCheck
specifier|protected
name|boolean
name|enableWarningsCheck
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|After
DECL|method|after
specifier|public
specifier|final
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|checkStaticState
argument_list|()
expr_stmt|;
if|if
condition|(
name|enableWarningsCheck
argument_list|()
condition|)
block|{
name|ensureNoWarnings
argument_list|()
expr_stmt|;
block|}
name|ensureAllSearchContextsReleased
argument_list|()
expr_stmt|;
name|ensureCheckIndexPassed
argument_list|()
expr_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"[{}]: after test"
argument_list|,
name|getTestName
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|ensureNoWarnings
specifier|private
name|void
name|ensureNoWarnings
parameter_list|()
throws|throws
name|IOException
block|{
comment|//Check that there are no unaccounted warning headers. These should be checked with {@link #checkWarningHeaders(String...)} in the
comment|//appropriate test
try|try
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|warnings
init|=
name|threadContext
operator|.
name|getResponseHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|DeprecationLogger
operator|.
name|WARNING_HEADER
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|"unexpected warning headers"
argument_list|,
name|warnings
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|DeprecationLogger
operator|.
name|removeThreadContext
argument_list|(
name|this
operator|.
name|threadContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadContext
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|assertWarnings
specifier|protected
specifier|final
name|void
name|assertWarnings
parameter_list|(
name|String
modifier|...
name|expectedWarnings
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|enableWarningsCheck
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unable to check warning headers if the test is not set to do so"
argument_list|)
throw|;
block|}
try|try
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|actualWarnings
init|=
name|threadContext
operator|.
name|getResponseHeaders
argument_list|()
operator|.
name|get
argument_list|(
name|DeprecationLogger
operator|.
name|WARNING_HEADER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Expected "
operator|+
name|expectedWarnings
operator|.
name|length
operator|+
literal|" warnings but found "
operator|+
name|actualWarnings
operator|.
name|size
argument_list|()
operator|+
literal|"\nExpected: "
operator|+
name|Arrays
operator|.
name|asList
argument_list|(
name|expectedWarnings
argument_list|)
operator|+
literal|"\nActual: "
operator|+
name|actualWarnings
argument_list|,
name|expectedWarnings
operator|.
name|length
argument_list|,
name|actualWarnings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|msg
range|:
name|expectedWarnings
control|)
block|{
name|assertThat
argument_list|(
name|actualWarnings
argument_list|,
name|hasItem
argument_list|(
name|equalTo
argument_list|(
name|msg
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// "clear" current warning headers by setting a new ThreadContext
name|DeprecationLogger
operator|.
name|removeThreadContext
argument_list|(
name|this
operator|.
name|threadContext
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadContext
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|threadContext
operator|=
operator|new
name|ThreadContext
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|DeprecationLogger
operator|.
name|setThreadContext
argument_list|(
name|this
operator|.
name|threadContext
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|statusData
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|StatusData
argument_list|>
name|statusData
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
comment|// ensure that the status logger is set to the warn level so we do not miss any warnings with our Log4j usage
name|StatusLogger
operator|.
name|getLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
expr_stmt|;
comment|// Log4j will write out status messages indicating problems with the Log4j usage to the status logger; we hook into this logger and
comment|// assert that no such messages were written out as these would indicate a problem with our logging configuration
name|StatusLogger
operator|.
name|getLogger
argument_list|()
operator|.
name|registerListener
argument_list|(
operator|new
name|StatusConsoleListener
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|log
parameter_list|(
name|StatusData
name|data
parameter_list|)
block|{
synchronized|synchronized
init|(
name|statusData
init|)
block|{
name|statusData
operator|.
name|add
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// separate method so that this can be checked again after suite scoped cluster is shut down
DECL|method|checkStaticState
specifier|protected
specifier|static
name|void
name|checkStaticState
parameter_list|()
throws|throws
name|Exception
block|{
name|MockPageCacheRecycler
operator|.
name|ensureAllPagesAreReleased
argument_list|()
expr_stmt|;
name|MockBigArrays
operator|.
name|ensureAllArraysAreReleased
argument_list|()
expr_stmt|;
comment|// field cache should NEVER get loaded.
name|String
index|[]
name|entries
init|=
name|UninvertingReader
operator|.
name|getUninvertedStats
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"fieldcache must never be used, got="
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|entries
argument_list|)
argument_list|,
literal|0
argument_list|,
name|entries
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// ensure no one changed the status logger level on us
name|assertThat
argument_list|(
name|StatusLogger
operator|.
name|getLogger
argument_list|()
operator|.
name|getLevel
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|statusData
init|)
block|{
try|try
block|{
comment|// ensure that there are no status logger messages which would indicate a problem with our Log4j usage; we map the
comment|// StatusData instances to Strings as otherwise their toString output is useless
name|assertThat
argument_list|(
name|statusData
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|status
lambda|->
name|status
operator|.
name|getMessage
argument_list|()
operator|.
name|getFormattedMessage
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|,
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// we clear the list so that status data from other tests do not interfere with tests within the same JVM
name|statusData
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// this must be a separate method from other ensure checks above so suite scoped integ tests can call...TODO: fix that
DECL|method|ensureAllSearchContextsReleased
specifier|public
specifier|final
name|void
name|ensureAllSearchContextsReleased
parameter_list|()
throws|throws
name|Exception
block|{
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
name|MockSearchService
operator|.
name|assertNoInFlightContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// mockdirectorywrappers currently set this boolean if checkindex fails
comment|// TODO: can we do this cleaner???
comment|/** MockFSDirectoryService sets this: */
DECL|field|checkIndexFailed
specifier|public
specifier|static
name|boolean
name|checkIndexFailed
decl_stmt|;
annotation|@
name|Before
DECL|method|resetCheckIndexStatus
specifier|public
specifier|final
name|void
name|resetCheckIndexStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|checkIndexFailed
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|ensureCheckIndexPassed
specifier|public
specifier|final
name|void
name|ensureCheckIndexPassed
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
literal|"at least one shard failed CheckIndex"
argument_list|,
name|checkIndexFailed
argument_list|)
expr_stmt|;
block|}
comment|// -----------------------------------------------------------------
comment|// Test facilities and facades for subclasses.
comment|// -----------------------------------------------------------------
comment|// TODO: decide on one set of naming for between/scaledBetween and remove others
comment|// TODO: replace frequently() with usually()
comment|/**      * Returns a "scaled" random number between min and max (inclusive).      *      * @see RandomizedTest#scaledRandomIntBetween(int, int)      */
DECL|method|scaledRandomIntBetween
specifier|public
specifier|static
name|int
name|scaledRandomIntBetween
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
return|return
name|RandomizedTest
operator|.
name|scaledRandomIntBetween
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
return|;
block|}
comment|/**      * A random integer from<code>min</code> to<code>max</code> (inclusive).      *      * @see #scaledRandomIntBetween(int, int)      */
DECL|method|randomIntBetween
specifier|public
specifier|static
name|int
name|randomIntBetween
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
return|return
name|RandomNumbers
operator|.
name|randomIntBetween
argument_list|(
name|random
argument_list|()
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
return|;
block|}
comment|/**      * Returns a "scaled" number of iterations for loops which can have a variable      * iteration count. This method is effectively      * an alias to {@link #scaledRandomIntBetween(int, int)}.      */
DECL|method|iterations
specifier|public
specifier|static
name|int
name|iterations
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
return|return
name|scaledRandomIntBetween
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
return|;
block|}
comment|/**      * An alias for {@link #randomIntBetween(int, int)}.      *      * @see #scaledRandomIntBetween(int, int)      */
DECL|method|between
specifier|public
specifier|static
name|int
name|between
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
return|return
name|randomIntBetween
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
return|;
block|}
comment|/**      * The exact opposite of {@link #rarely()}.      */
DECL|method|frequently
specifier|public
specifier|static
name|boolean
name|frequently
parameter_list|()
block|{
return|return
operator|!
name|rarely
argument_list|()
return|;
block|}
DECL|method|randomBoolean
specifier|public
specifier|static
name|boolean
name|randomBoolean
parameter_list|()
block|{
return|return
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
return|;
block|}
DECL|method|randomByte
specifier|public
specifier|static
name|byte
name|randomByte
parameter_list|()
block|{
return|return
operator|(
name|byte
operator|)
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
return|;
block|}
DECL|method|randomShort
specifier|public
specifier|static
name|short
name|randomShort
parameter_list|()
block|{
return|return
operator|(
name|short
operator|)
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
return|;
block|}
DECL|method|randomInt
specifier|public
specifier|static
name|int
name|randomInt
parameter_list|()
block|{
return|return
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
return|;
block|}
DECL|method|randomPositiveLong
specifier|public
specifier|static
name|long
name|randomPositiveLong
parameter_list|()
block|{
name|long
name|randomLong
decl_stmt|;
do|do
block|{
name|randomLong
operator|=
name|randomLong
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|randomLong
operator|==
name|Long
operator|.
name|MIN_VALUE
condition|)
do|;
return|return
name|Math
operator|.
name|abs
argument_list|(
name|randomLong
argument_list|)
return|;
block|}
DECL|method|randomFloat
specifier|public
specifier|static
name|float
name|randomFloat
parameter_list|()
block|{
return|return
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
return|;
block|}
DECL|method|randomDouble
specifier|public
specifier|static
name|double
name|randomDouble
parameter_list|()
block|{
return|return
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
return|;
block|}
comment|/**      * Returns a double value in the interval [start, end) if lowerInclusive is      * set to true, (start, end) otherwise.      *      * @param start          lower bound of interval to draw uniformly distributed random numbers from      * @param end            upper bound      * @param lowerInclusive whether or not to include lower end of the interval      */
DECL|method|randomDoubleBetween
specifier|public
specifier|static
name|double
name|randomDoubleBetween
parameter_list|(
name|double
name|start
parameter_list|,
name|double
name|end
parameter_list|,
name|boolean
name|lowerInclusive
parameter_list|)
block|{
name|double
name|result
init|=
literal|0.0
decl_stmt|;
if|if
condition|(
name|start
operator|==
operator|-
name|Double
operator|.
name|MAX_VALUE
operator|||
name|end
operator|==
name|Double
operator|.
name|MAX_VALUE
condition|)
block|{
comment|// formula below does not work with very large doubles
name|result
operator|=
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|randomLong
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|result
argument_list|<
name|start
operator|||
name|result
argument_list|>
name|end
operator|||
name|Double
operator|.
name|isNaN
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|result
operator|=
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|randomLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|=
name|randomDouble
argument_list|()
expr_stmt|;
if|if
condition|(
name|lowerInclusive
operator|==
literal|false
condition|)
block|{
while|while
condition|(
name|result
operator|<=
literal|0.0
condition|)
block|{
name|result
operator|=
name|randomDouble
argument_list|()
expr_stmt|;
block|}
block|}
name|result
operator|=
name|result
operator|*
name|end
operator|+
operator|(
literal|1.0
operator|-
name|result
operator|)
operator|*
name|start
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|randomLong
specifier|public
specifier|static
name|long
name|randomLong
parameter_list|()
block|{
return|return
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
return|;
block|}
comment|/** A random integer from 0..max (inclusive). */
DECL|method|randomInt
specifier|public
specifier|static
name|int
name|randomInt
parameter_list|(
name|int
name|max
parameter_list|)
block|{
return|return
name|RandomizedTest
operator|.
name|randomInt
argument_list|(
name|max
argument_list|)
return|;
block|}
comment|/** Pick a random object from the given array. The array must not be empty. */
DECL|method|randomFrom
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|randomFrom
parameter_list|(
name|T
modifier|...
name|array
parameter_list|)
block|{
return|return
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|array
argument_list|)
return|;
block|}
comment|/** Pick a random object from the given array. The array must not be empty. */
DECL|method|randomFrom
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|randomFrom
parameter_list|(
name|Random
name|random
parameter_list|,
name|T
modifier|...
name|array
parameter_list|)
block|{
return|return
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|,
name|array
argument_list|)
return|;
block|}
comment|/** Pick a random object from the given list. */
DECL|method|randomFrom
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|randomFrom
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|list
parameter_list|)
block|{
return|return
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|list
argument_list|)
return|;
block|}
comment|/** Pick a random object from the given collection. */
DECL|method|randomFrom
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|randomFrom
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|)
block|{
return|return
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|collection
argument_list|)
return|;
block|}
comment|/** Pick a random object from the given collection. */
DECL|method|randomFrom
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|randomFrom
parameter_list|(
name|Random
name|random
parameter_list|,
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|)
block|{
return|return
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|,
name|collection
argument_list|)
return|;
block|}
DECL|method|randomAsciiOfLengthBetween
specifier|public
specifier|static
name|String
name|randomAsciiOfLengthBetween
parameter_list|(
name|int
name|minCodeUnits
parameter_list|,
name|int
name|maxCodeUnits
parameter_list|)
block|{
return|return
name|RandomizedTest
operator|.
name|randomAsciiOfLengthBetween
argument_list|(
name|minCodeUnits
argument_list|,
name|maxCodeUnits
argument_list|)
return|;
block|}
DECL|method|randomAsciiOfLength
specifier|public
specifier|static
name|String
name|randomAsciiOfLength
parameter_list|(
name|int
name|codeUnits
parameter_list|)
block|{
return|return
name|RandomizedTest
operator|.
name|randomAsciiOfLength
argument_list|(
name|codeUnits
argument_list|)
return|;
block|}
DECL|method|randomUnicodeOfLengthBetween
specifier|public
specifier|static
name|String
name|randomUnicodeOfLengthBetween
parameter_list|(
name|int
name|minCodeUnits
parameter_list|,
name|int
name|maxCodeUnits
parameter_list|)
block|{
return|return
name|RandomizedTest
operator|.
name|randomUnicodeOfLengthBetween
argument_list|(
name|minCodeUnits
argument_list|,
name|maxCodeUnits
argument_list|)
return|;
block|}
DECL|method|randomUnicodeOfLength
specifier|public
specifier|static
name|String
name|randomUnicodeOfLength
parameter_list|(
name|int
name|codeUnits
parameter_list|)
block|{
return|return
name|RandomizedTest
operator|.
name|randomUnicodeOfLength
argument_list|(
name|codeUnits
argument_list|)
return|;
block|}
DECL|method|randomUnicodeOfCodepointLengthBetween
specifier|public
specifier|static
name|String
name|randomUnicodeOfCodepointLengthBetween
parameter_list|(
name|int
name|minCodePoints
parameter_list|,
name|int
name|maxCodePoints
parameter_list|)
block|{
return|return
name|RandomizedTest
operator|.
name|randomUnicodeOfCodepointLengthBetween
argument_list|(
name|minCodePoints
argument_list|,
name|maxCodePoints
argument_list|)
return|;
block|}
DECL|method|randomUnicodeOfCodepointLength
specifier|public
specifier|static
name|String
name|randomUnicodeOfCodepointLength
parameter_list|(
name|int
name|codePoints
parameter_list|)
block|{
return|return
name|RandomizedTest
operator|.
name|randomUnicodeOfCodepointLength
argument_list|(
name|codePoints
argument_list|)
return|;
block|}
DECL|method|randomRealisticUnicodeOfLengthBetween
specifier|public
specifier|static
name|String
name|randomRealisticUnicodeOfLengthBetween
parameter_list|(
name|int
name|minCodeUnits
parameter_list|,
name|int
name|maxCodeUnits
parameter_list|)
block|{
return|return
name|RandomizedTest
operator|.
name|randomRealisticUnicodeOfLengthBetween
argument_list|(
name|minCodeUnits
argument_list|,
name|maxCodeUnits
argument_list|)
return|;
block|}
DECL|method|randomRealisticUnicodeOfLength
specifier|public
specifier|static
name|String
name|randomRealisticUnicodeOfLength
parameter_list|(
name|int
name|codeUnits
parameter_list|)
block|{
return|return
name|RandomizedTest
operator|.
name|randomRealisticUnicodeOfLength
argument_list|(
name|codeUnits
argument_list|)
return|;
block|}
DECL|method|randomRealisticUnicodeOfCodepointLengthBetween
specifier|public
specifier|static
name|String
name|randomRealisticUnicodeOfCodepointLengthBetween
parameter_list|(
name|int
name|minCodePoints
parameter_list|,
name|int
name|maxCodePoints
parameter_list|)
block|{
return|return
name|RandomizedTest
operator|.
name|randomRealisticUnicodeOfCodepointLengthBetween
argument_list|(
name|minCodePoints
argument_list|,
name|maxCodePoints
argument_list|)
return|;
block|}
DECL|method|randomRealisticUnicodeOfCodepointLength
specifier|public
specifier|static
name|String
name|randomRealisticUnicodeOfCodepointLength
parameter_list|(
name|int
name|codePoints
parameter_list|)
block|{
return|return
name|RandomizedTest
operator|.
name|randomRealisticUnicodeOfCodepointLength
argument_list|(
name|codePoints
argument_list|)
return|;
block|}
DECL|method|generateRandomStringArray
specifier|public
specifier|static
name|String
index|[]
name|generateRandomStringArray
parameter_list|(
name|int
name|maxArraySize
parameter_list|,
name|int
name|maxStringSize
parameter_list|,
name|boolean
name|allowNull
parameter_list|,
name|boolean
name|allowEmpty
parameter_list|)
block|{
if|if
condition|(
name|allowNull
operator|&&
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|arraySize
init|=
name|randomIntBetween
argument_list|(
name|allowEmpty
condition|?
literal|0
else|:
literal|1
argument_list|,
name|maxArraySize
argument_list|)
decl_stmt|;
name|String
index|[]
name|array
init|=
operator|new
name|String
index|[
name|arraySize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arraySize
condition|;
name|i
operator|++
control|)
block|{
name|array
index|[
name|i
index|]
operator|=
name|RandomStrings
operator|.
name|randomAsciiOfLength
argument_list|(
name|random
argument_list|()
argument_list|,
name|maxStringSize
argument_list|)
expr_stmt|;
block|}
return|return
name|array
return|;
block|}
DECL|method|generateRandomStringArray
specifier|public
specifier|static
name|String
index|[]
name|generateRandomStringArray
parameter_list|(
name|int
name|maxArraySize
parameter_list|,
name|int
name|maxStringSize
parameter_list|,
name|boolean
name|allowNull
parameter_list|)
block|{
return|return
name|generateRandomStringArray
argument_list|(
name|maxArraySize
argument_list|,
name|maxStringSize
argument_list|,
name|allowNull
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|field|TIME_SUFFIXES
specifier|private
specifier|static
name|String
index|[]
name|TIME_SUFFIXES
init|=
operator|new
name|String
index|[]
block|{
literal|"d"
block|,
literal|"h"
block|,
literal|"ms"
block|,
literal|"s"
block|,
literal|"m"
block|}
decl_stmt|;
DECL|method|randomTimeValue
specifier|private
specifier|static
name|String
name|randomTimeValue
parameter_list|(
name|int
name|lower
parameter_list|,
name|int
name|upper
parameter_list|)
block|{
return|return
name|randomIntBetween
argument_list|(
name|lower
argument_list|,
name|upper
argument_list|)
operator|+
name|randomFrom
argument_list|(
name|TIME_SUFFIXES
argument_list|)
return|;
block|}
DECL|method|randomTimeValue
specifier|public
specifier|static
name|String
name|randomTimeValue
parameter_list|()
block|{
return|return
name|randomTimeValue
argument_list|(
literal|0
argument_list|,
literal|1000
argument_list|)
return|;
block|}
DECL|method|randomPositiveTimeValue
specifier|public
specifier|static
name|String
name|randomPositiveTimeValue
parameter_list|()
block|{
return|return
name|randomTimeValue
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
return|;
block|}
comment|/**      * generate a random DateTimeZone from the ones available in joda library      */
DECL|method|randomDateTimeZone
specifier|public
specifier|static
name|DateTimeZone
name|randomDateTimeZone
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|DateTimeZone
operator|.
name|getAvailableIDs
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|ids
argument_list|)
expr_stmt|;
return|return
name|DateTimeZone
operator|.
name|forID
argument_list|(
name|randomFrom
argument_list|(
name|ids
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * helper to randomly perform on<code>consumer</code> with<code>value</code>      */
DECL|method|maybeSet
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|maybeSet
parameter_list|(
name|Consumer
argument_list|<
name|T
argument_list|>
name|consumer
parameter_list|,
name|T
name|value
parameter_list|)
block|{
if|if
condition|(
name|randomBoolean
argument_list|()
condition|)
block|{
name|consumer
operator|.
name|accept
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * helper to get a random value in a certain range that's different from the input      */
DECL|method|randomValueOtherThan
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|randomValueOtherThan
parameter_list|(
name|T
name|input
parameter_list|,
name|Supplier
argument_list|<
name|T
argument_list|>
name|randomSupplier
parameter_list|)
block|{
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
return|return
name|randomValueOtherThanMany
argument_list|(
name|input
operator|::
name|equals
argument_list|,
name|randomSupplier
argument_list|)
return|;
block|}
return|return
operator|(
name|randomSupplier
operator|.
name|get
argument_list|()
operator|)
return|;
block|}
comment|/**      * helper to get a random value in a certain range that's different from the input      */
DECL|method|randomValueOtherThanMany
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|randomValueOtherThanMany
parameter_list|(
name|Predicate
argument_list|<
name|T
argument_list|>
name|input
parameter_list|,
name|Supplier
argument_list|<
name|T
argument_list|>
name|randomSupplier
parameter_list|)
block|{
name|T
name|randomValue
init|=
literal|null
decl_stmt|;
do|do
block|{
name|randomValue
operator|=
name|randomSupplier
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|input
operator|.
name|test
argument_list|(
name|randomValue
argument_list|)
condition|)
do|;
return|return
name|randomValue
return|;
block|}
comment|/**      * Runs the code block for 10 seconds waiting for no assertion to trip.      */
DECL|method|assertBusy
specifier|public
specifier|static
name|void
name|assertBusy
parameter_list|(
name|Runnable
name|codeBlock
parameter_list|)
throws|throws
name|Exception
block|{
name|assertBusy
argument_list|(
name|codeBlock
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
comment|/**      * Runs the code block for the provided interval, waiting for no assertions to trip.      */
DECL|method|assertBusy
specifier|public
specifier|static
name|void
name|assertBusy
parameter_list|(
name|Runnable
name|codeBlock
parameter_list|,
name|long
name|maxWaitTime
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|maxTimeInMillis
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|maxWaitTime
argument_list|,
name|unit
argument_list|)
decl_stmt|;
name|long
name|iterations
init|=
name|Math
operator|.
name|max
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|Math
operator|.
name|log10
argument_list|(
name|maxTimeInMillis
argument_list|)
operator|/
name|Math
operator|.
name|log10
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|long
name|timeInMillis
init|=
literal|1
decl_stmt|;
name|long
name|sum
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|AssertionError
argument_list|>
name|failures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|codeBlock
operator|.
name|run
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
name|failures
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|sum
operator|+=
name|timeInMillis
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|timeInMillis
argument_list|)
expr_stmt|;
name|timeInMillis
operator|*=
literal|2
expr_stmt|;
block|}
name|timeInMillis
operator|=
name|maxTimeInMillis
operator|-
name|sum
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|timeInMillis
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|codeBlock
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
for|for
control|(
name|AssertionError
name|failure
range|:
name|failures
control|)
block|{
name|e
operator|.
name|addSuppressed
argument_list|(
name|failure
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
DECL|method|awaitBusy
specifier|public
specifier|static
name|boolean
name|awaitBusy
parameter_list|(
name|BooleanSupplier
name|breakSupplier
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|awaitBusy
argument_list|(
name|breakSupplier
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
comment|// After 1s, we stop growing the sleep interval exponentially and just sleep 1s until maxWaitTime
DECL|field|AWAIT_BUSY_THRESHOLD
specifier|private
specifier|static
specifier|final
name|long
name|AWAIT_BUSY_THRESHOLD
init|=
literal|1000L
decl_stmt|;
DECL|method|awaitBusy
specifier|public
specifier|static
name|boolean
name|awaitBusy
parameter_list|(
name|BooleanSupplier
name|breakSupplier
parameter_list|,
name|long
name|maxWaitTime
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|maxTimeInMillis
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|maxWaitTime
argument_list|,
name|unit
argument_list|)
decl_stmt|;
name|long
name|timeInMillis
init|=
literal|1
decl_stmt|;
name|long
name|sum
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|sum
operator|+
name|timeInMillis
operator|<
name|maxTimeInMillis
condition|)
block|{
if|if
condition|(
name|breakSupplier
operator|.
name|getAsBoolean
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|timeInMillis
argument_list|)
expr_stmt|;
name|sum
operator|+=
name|timeInMillis
expr_stmt|;
name|timeInMillis
operator|=
name|Math
operator|.
name|min
argument_list|(
name|AWAIT_BUSY_THRESHOLD
argument_list|,
name|timeInMillis
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
name|timeInMillis
operator|=
name|maxTimeInMillis
operator|-
name|sum
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|timeInMillis
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|breakSupplier
operator|.
name|getAsBoolean
argument_list|()
return|;
block|}
DECL|method|terminate
specifier|public
specifier|static
name|boolean
name|terminate
parameter_list|(
name|ExecutorService
modifier|...
name|services
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|boolean
name|terminated
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ExecutorService
name|service
range|:
name|services
control|)
block|{
if|if
condition|(
name|service
operator|!=
literal|null
condition|)
block|{
name|terminated
operator|&=
name|ThreadPool
operator|.
name|terminate
argument_list|(
name|service
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|terminated
return|;
block|}
DECL|method|terminate
specifier|public
specifier|static
name|boolean
name|terminate
parameter_list|(
name|ThreadPool
name|service
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|ThreadPool
operator|.
name|terminate
argument_list|(
name|service
argument_list|,
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
comment|/**      * Returns a {@link java.nio.file.Path} pointing to the class path relative resource given      * as the first argument. In contrast to      *<code>getClass().getResource(...).getFile()</code> this method will not      * return URL encoded paths if the parent path contains spaces or other      * non-standard characters.      */
annotation|@
name|Override
DECL|method|getDataPath
specifier|public
name|Path
name|getDataPath
parameter_list|(
name|String
name|relativePath
parameter_list|)
block|{
comment|// we override LTC behavior here: wrap even resources with mockfilesystems,
comment|// because some code is buggy when it comes to multiple nio.2 filesystems
comment|// (e.g. FileSystemUtils, and likely some tests)
try|try
block|{
return|return
name|PathUtils
operator|.
name|get
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|relativePath
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"resource not found: "
operator|+
name|relativePath
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getBwcIndicesPath
specifier|public
name|Path
name|getBwcIndicesPath
parameter_list|()
block|{
return|return
name|getDataPath
argument_list|(
literal|"/indices/bwc"
argument_list|)
return|;
block|}
comment|/** Returns a random number of temporary paths. */
DECL|method|tmpPaths
specifier|public
name|String
index|[]
name|tmpPaths
parameter_list|()
block|{
specifier|final
name|int
name|numPaths
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|absPaths
init|=
operator|new
name|String
index|[
name|numPaths
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPaths
condition|;
name|i
operator|++
control|)
block|{
name|absPaths
index|[
name|i
index|]
operator|=
name|createTempDir
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|absPaths
return|;
block|}
DECL|method|newNodeEnvironment
specifier|public
name|NodeEnvironment
name|newNodeEnvironment
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|newNodeEnvironment
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|)
return|;
block|}
DECL|method|newNodeEnvironment
specifier|public
name|NodeEnvironment
name|newNodeEnvironment
parameter_list|(
name|Settings
name|settings
parameter_list|)
throws|throws
name|IOException
block|{
name|Settings
name|build
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
operator|.
name|putArray
argument_list|(
name|Environment
operator|.
name|PATH_DATA_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|tmpPaths
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
operator|new
name|NodeEnvironment
argument_list|(
name|build
argument_list|,
operator|new
name|Environment
argument_list|(
name|build
argument_list|)
argument_list|)
return|;
block|}
comment|/** Return consistent index settings for the provided index version. */
DECL|method|settings
specifier|public
specifier|static
name|Settings
operator|.
name|Builder
name|settings
parameter_list|(
name|Version
name|version
parameter_list|)
block|{
name|Settings
operator|.
name|Builder
name|builder
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|version
argument_list|)
decl_stmt|;
return|return
name|builder
return|;
block|}
DECL|method|threadName
specifier|private
specifier|static
name|String
name|threadName
parameter_list|(
name|Thread
name|t
parameter_list|)
block|{
return|return
literal|"Thread["
operator|+
literal|"id="
operator|+
name|t
operator|.
name|getId
argument_list|()
operator|+
literal|", name="
operator|+
name|t
operator|.
name|getName
argument_list|()
operator|+
literal|", state="
operator|+
name|t
operator|.
name|getState
argument_list|()
operator|+
literal|", group="
operator|+
name|groupName
argument_list|(
name|t
operator|.
name|getThreadGroup
argument_list|()
argument_list|)
operator|+
literal|"]"
return|;
block|}
DECL|method|groupName
specifier|private
specifier|static
name|String
name|groupName
parameter_list|(
name|ThreadGroup
name|threadGroup
parameter_list|)
block|{
if|if
condition|(
name|threadGroup
operator|==
literal|null
condition|)
block|{
return|return
literal|"{null group}"
return|;
block|}
else|else
block|{
return|return
name|threadGroup
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
comment|/**      * Returns size random values      */
DECL|method|randomSubsetOf
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|randomSubsetOf
parameter_list|(
name|int
name|size
parameter_list|,
name|T
modifier|...
name|values
parameter_list|)
block|{
name|List
argument_list|<
name|T
argument_list|>
name|list
init|=
name|arrayAsArrayList
argument_list|(
name|values
argument_list|)
decl_stmt|;
return|return
name|randomSubsetOf
argument_list|(
name|size
argument_list|,
name|list
argument_list|)
return|;
block|}
comment|/**      * Returns a random subset of values (including a potential empty list)      */
DECL|method|randomSubsetOf
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|randomSubsetOf
parameter_list|(
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|)
block|{
return|return
name|randomSubsetOf
argument_list|(
name|randomInt
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|collection
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
name|collection
argument_list|)
return|;
block|}
comment|/**      * Returns size random values      */
DECL|method|randomSubsetOf
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|randomSubsetOf
parameter_list|(
name|int
name|size
parameter_list|,
name|Collection
argument_list|<
name|T
argument_list|>
name|collection
parameter_list|)
block|{
if|if
condition|(
name|size
operator|>
name|collection
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can\'t pick "
operator|+
name|size
operator|+
literal|" random objects from a collection of "
operator|+
name|collection
operator|.
name|size
argument_list|()
operator|+
literal|" objects"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|T
argument_list|>
name|tempList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|tempList
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tempList
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|size
argument_list|)
return|;
block|}
comment|/**      * Builds a set of unique items. Usually you'll get the requested count but you might get less than that number if the supplier returns      * lots of repeats. Make sure that the items properly implement equals and hashcode.      */
DECL|method|randomUnique
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Set
argument_list|<
name|T
argument_list|>
name|randomUnique
parameter_list|(
name|Supplier
argument_list|<
name|T
argument_list|>
name|supplier
parameter_list|,
name|int
name|targetCount
parameter_list|)
block|{
name|Set
argument_list|<
name|T
argument_list|>
name|things
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|maxTries
init|=
name|targetCount
operator|*
literal|10
decl_stmt|;
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|maxTries
condition|;
name|t
operator|++
control|)
block|{
if|if
condition|(
name|things
operator|.
name|size
argument_list|()
operator|==
name|targetCount
condition|)
block|{
return|return
name|things
return|;
block|}
name|things
operator|.
name|add
argument_list|(
name|supplier
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Oh well, we didn't get enough unique things. It'll be ok.
return|return
name|things
return|;
block|}
DECL|method|randomGeohash
specifier|public
specifier|static
name|String
name|randomGeohash
parameter_list|(
name|int
name|minPrecision
parameter_list|,
name|int
name|maxPrecision
parameter_list|)
block|{
return|return
name|geohashGenerator
operator|.
name|ofStringLength
argument_list|(
name|random
argument_list|()
argument_list|,
name|minPrecision
argument_list|,
name|maxPrecision
argument_list|)
return|;
block|}
DECL|field|geohashGenerator
specifier|private
specifier|static
specifier|final
name|GeohashGenerator
name|geohashGenerator
init|=
operator|new
name|GeohashGenerator
argument_list|()
decl_stmt|;
DECL|class|GeohashGenerator
specifier|public
specifier|static
class|class
name|GeohashGenerator
extends|extends
name|CodepointSetGenerator
block|{
DECL|field|ASCII_SET
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|ASCII_SET
init|=
literal|"0123456789bcdefghjkmnpqrstuvwxyz"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
DECL|method|GeohashGenerator
specifier|public
name|GeohashGenerator
parameter_list|()
block|{
name|super
argument_list|(
name|ASCII_SET
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Randomly shuffles the fields inside objects in the {@link XContentBuilder} passed in.      * Recursively goes through inner objects and also shuffles them. Exceptions for this      * recursive shuffling behavior can be made by passing in the names of fields which      * internally should stay untouched.      */
DECL|method|shuffleXContent
specifier|public
name|XContentBuilder
name|shuffleXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|String
modifier|...
name|exceptFieldNames
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|builder
argument_list|)
decl_stmt|;
comment|// use ordered maps for reproducibility
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|shuffledMap
init|=
name|shuffleMap
argument_list|(
name|parser
operator|.
name|mapOrdered
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|exceptFieldNames
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|XContentBuilder
name|xContentBuilder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|builder
operator|.
name|contentType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|builder
operator|.
name|isPrettyPrint
argument_list|()
condition|)
block|{
name|xContentBuilder
operator|.
name|prettyPrint
argument_list|()
expr_stmt|;
block|}
return|return
name|xContentBuilder
operator|.
name|map
argument_list|(
name|shuffledMap
argument_list|)
return|;
block|}
DECL|method|shuffleMap
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|shuffleMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|exceptFields
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
comment|// even though we shuffle later, we need this to make tests reproduce on different jvms
name|Collections
operator|.
name|sort
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|targetMap
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|keys
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|Object
name|value
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|Map
operator|&&
name|exceptFields
operator|.
name|contains
argument_list|(
name|key
argument_list|)
operator|==
literal|false
condition|)
block|{
name|targetMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|shuffleMap
argument_list|(
operator|(
name|Map
operator|)
name|value
argument_list|,
name|exceptFields
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|targetMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|targetMap
return|;
block|}
comment|/**      * Create a copy of an original {@link Writeable} object by running it through a {@link BytesStreamOutput} and      * reading it in again using a provided {@link Writeable.Reader}. The stream that is wrapped around the {@link StreamInput}      * potentially need to use a {@link NamedWriteableRegistry}, so this needs to be provided too (although it can be      * empty if the object that is streamed doesn't contain any {@link NamedWriteable} objects itself.      */
DECL|method|copyWriteable
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|Writeable
parameter_list|>
name|T
name|copyWriteable
parameter_list|(
name|T
name|original
parameter_list|,
name|NamedWriteableRegistry
name|namedWritabelRegistry
parameter_list|,
name|Writeable
operator|.
name|Reader
argument_list|<
name|T
argument_list|>
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|BytesStreamOutput
name|output
init|=
operator|new
name|BytesStreamOutput
argument_list|()
init|)
block|{
name|original
operator|.
name|writeTo
argument_list|(
name|output
argument_list|)
expr_stmt|;
try|try
init|(
name|StreamInput
name|in
init|=
operator|new
name|NamedWriteableAwareStreamInput
argument_list|(
name|output
operator|.
name|bytes
argument_list|()
operator|.
name|streamInput
argument_list|()
argument_list|,
name|namedWritabelRegistry
argument_list|)
init|)
block|{
return|return
name|reader
operator|.
name|read
argument_list|(
name|in
argument_list|)
return|;
block|}
block|}
block|}
comment|/**      * Returns true iff assertions for elasticsearch packages are enabled      */
DECL|method|assertionsEnabled
specifier|public
specifier|static
name|boolean
name|assertionsEnabled
parameter_list|()
block|{
name|boolean
name|enabled
init|=
literal|false
decl_stmt|;
assert|assert
operator|(
name|enabled
operator|=
literal|true
operator|)
assert|;
return|return
name|enabled
return|;
block|}
DECL|method|assertAllIndicesRemovedAndDeletionCompleted
specifier|public
name|void
name|assertAllIndicesRemovedAndDeletionCompleted
parameter_list|(
name|Iterable
argument_list|<
name|IndicesService
argument_list|>
name|indicesServices
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|IndicesService
name|indicesService
range|:
name|indicesServices
control|)
block|{
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
name|assertFalse
argument_list|(
name|indicesService
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
name|assertBusy
argument_list|(
parameter_list|()
lambda|->
name|assertFalse
argument_list|(
name|indicesService
operator|.
name|hasUncompletedPendingDeletes
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Asserts that there are no files in the specified path      */
DECL|method|assertPathHasBeenCleared
specifier|public
name|void
name|assertPathHasBeenCleared
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"--> checking that [{}] has been cleared"
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"["
argument_list|)
expr_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|path
argument_list|)
init|)
block|{
for|for
control|(
name|Path
name|file
range|:
name|stream
control|)
block|{
comment|// Skip files added by Lucene's ExtraFS
if|if
condition|(
name|file
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"extra"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"--> found file: [{}]"
argument_list|,
name|file
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|assertPathHasBeenCleared
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Files
operator|.
name|isRegularFile
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|count
operator|++
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|file
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UncheckedIOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|count
operator|+
literal|" files exist that should have been cleaned:\n"
operator|+
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|count
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new {@link XContentParser}.      */
DECL|method|createParser
specifier|protected
specifier|final
name|XContentParser
name|createParser
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|builder
operator|.
name|generator
argument_list|()
operator|.
name|contentType
argument_list|()
operator|.
name|xContent
argument_list|()
operator|.
name|createParser
argument_list|(
name|xContentRegistry
argument_list|()
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Create a new {@link XContentParser}.      */
DECL|method|createParser
specifier|protected
specifier|final
name|XContentParser
name|createParser
parameter_list|(
name|XContent
name|xContent
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|xContent
operator|.
name|createParser
argument_list|(
name|xContentRegistry
argument_list|()
argument_list|,
name|data
argument_list|)
return|;
block|}
comment|/**      * Create a new {@link XContentParser}.      */
DECL|method|createParser
specifier|protected
specifier|final
name|XContentParser
name|createParser
parameter_list|(
name|XContent
name|xContent
parameter_list|,
name|InputStream
name|data
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|xContent
operator|.
name|createParser
argument_list|(
name|xContentRegistry
argument_list|()
argument_list|,
name|data
argument_list|)
return|;
block|}
comment|/**      * Create a new {@link XContentParser}.      */
DECL|method|createParser
specifier|protected
specifier|final
name|XContentParser
name|createParser
parameter_list|(
name|XContent
name|xContent
parameter_list|,
name|byte
index|[]
name|data
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|xContent
operator|.
name|createParser
argument_list|(
name|xContentRegistry
argument_list|()
argument_list|,
name|data
argument_list|)
return|;
block|}
comment|/**      * Create a new {@link XContentParser}.      */
DECL|method|createParser
specifier|protected
specifier|final
name|XContentParser
name|createParser
parameter_list|(
name|XContent
name|xContent
parameter_list|,
name|BytesReference
name|data
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|xContent
operator|.
name|createParser
argument_list|(
name|xContentRegistry
argument_list|()
argument_list|,
name|data
argument_list|)
return|;
block|}
comment|/**      * The {@link NamedXContentRegistry} to use for this test. Subclasses should override and use liberally.      */
DECL|method|xContentRegistry
specifier|protected
name|NamedXContentRegistry
name|xContentRegistry
parameter_list|()
block|{
return|return
name|NamedXContentRegistry
operator|.
name|EMPTY
return|;
block|}
comment|/** Returns the suite failure marker: internal use only! */
DECL|method|getSuiteFailureMarker
specifier|public
specifier|static
name|TestRuleMarkFailure
name|getSuiteFailureMarker
parameter_list|()
block|{
return|return
name|suiteFailureMarker
return|;
block|}
comment|/** Compares two stack traces, ignoring module (which is not yet serialized) */
DECL|method|assertArrayEquals
specifier|public
specifier|static
name|void
name|assertArrayEquals
parameter_list|(
name|StackTraceElement
name|expected
index|[]
parameter_list|,
name|StackTraceElement
name|actual
index|[]
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|actual
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expected
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
index|[
name|i
index|]
argument_list|,
name|actual
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Compares two stack trace elements, ignoring module (which is not yet serialized) */
DECL|method|assertEquals
specifier|public
specifier|static
name|void
name|assertEquals
parameter_list|(
name|StackTraceElement
name|expected
parameter_list|,
name|StackTraceElement
name|actual
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|getClassName
argument_list|()
argument_list|,
name|actual
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getMethodName
argument_list|()
argument_list|,
name|actual
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getFileName
argument_list|()
argument_list|,
name|actual
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|getLineNumber
argument_list|()
argument_list|,
name|actual
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|isNativeMethod
argument_list|()
argument_list|,
name|actual
operator|.
name|isNativeMethod
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|spinForAtLeastOneMillisecond
specifier|protected
specifier|static
name|long
name|spinForAtLeastOneMillisecond
parameter_list|()
block|{
name|long
name|nanosecondsInMillisecond
init|=
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|convert
argument_list|(
literal|1
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
comment|// force at least one millisecond to elapse, but ensure the
comment|// clock has enough resolution to observe the passage of time
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|long
name|elapsed
decl_stmt|;
while|while
condition|(
operator|(
name|elapsed
operator|=
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
operator|)
operator|)
operator|<
name|nanosecondsInMillisecond
condition|)
block|{
comment|// busy spin
block|}
return|return
name|elapsed
return|;
block|}
comment|/**      * Creates an TestAnalysis with all the default analyzers configured.      */
DECL|method|createTestAnalysis
specifier|public
specifier|static
name|TestAnalysis
name|createTestAnalysis
parameter_list|(
name|Index
name|index
parameter_list|,
name|Settings
name|settings
parameter_list|,
name|AnalysisPlugin
modifier|...
name|analysisPlugins
parameter_list|)
throws|throws
name|IOException
block|{
name|Settings
name|nodeSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|createTestAnalysis
argument_list|(
name|index
argument_list|,
name|nodeSettings
argument_list|,
name|settings
argument_list|,
name|analysisPlugins
argument_list|)
return|;
block|}
comment|/**      * Creates an TestAnalysis with all the default analyzers configured.      */
DECL|method|createTestAnalysis
specifier|public
specifier|static
name|TestAnalysis
name|createTestAnalysis
parameter_list|(
name|Index
name|index
parameter_list|,
name|Settings
name|nodeSettings
parameter_list|,
name|Settings
name|settings
parameter_list|,
name|AnalysisPlugin
modifier|...
name|analysisPlugins
parameter_list|)
throws|throws
name|IOException
block|{
name|Settings
name|indexSettings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|settings
argument_list|)
operator|.
name|put
argument_list|(
name|IndexMetaData
operator|.
name|SETTING_VERSION_CREATED
argument_list|,
name|Version
operator|.
name|CURRENT
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|createTestAnalysis
argument_list|(
name|IndexSettingsModule
operator|.
name|newIndexSettings
argument_list|(
name|index
argument_list|,
name|indexSettings
argument_list|)
argument_list|,
name|nodeSettings
argument_list|,
name|analysisPlugins
argument_list|)
return|;
block|}
comment|/**      * Creates an TestAnalysis with all the default analyzers configured.      */
DECL|method|createTestAnalysis
specifier|public
specifier|static
name|TestAnalysis
name|createTestAnalysis
parameter_list|(
name|IndexSettings
name|indexSettings
parameter_list|,
name|Settings
name|nodeSettings
parameter_list|,
name|AnalysisPlugin
modifier|...
name|analysisPlugins
parameter_list|)
throws|throws
name|IOException
block|{
name|Environment
name|env
init|=
operator|new
name|Environment
argument_list|(
name|nodeSettings
argument_list|)
decl_stmt|;
name|AnalysisModule
name|analysisModule
init|=
operator|new
name|AnalysisModule
argument_list|(
name|env
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|analysisPlugins
argument_list|)
argument_list|)
decl_stmt|;
name|AnalysisRegistry
name|analysisRegistry
init|=
name|analysisModule
operator|.
name|getAnalysisRegistry
argument_list|()
decl_stmt|;
return|return
operator|new
name|TestAnalysis
argument_list|(
name|analysisRegistry
operator|.
name|build
argument_list|(
name|indexSettings
argument_list|)
argument_list|,
name|analysisRegistry
operator|.
name|buildTokenFilterFactories
argument_list|(
name|indexSettings
argument_list|)
argument_list|,
name|analysisRegistry
operator|.
name|buildTokenizerFactories
argument_list|(
name|indexSettings
argument_list|)
argument_list|,
name|analysisRegistry
operator|.
name|buildCharFilterFactories
argument_list|(
name|indexSettings
argument_list|)
argument_list|)
return|;
block|}
DECL|method|newTestScriptModule
specifier|public
specifier|static
name|ScriptModule
name|newTestScriptModule
parameter_list|()
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
argument_list|)
comment|// no file watching, so we don't need a ResourceWatcherService
operator|.
name|put
argument_list|(
name|ScriptService
operator|.
name|SCRIPT_AUTO_RELOAD_ENABLED_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Environment
name|environment
init|=
operator|new
name|Environment
argument_list|(
name|settings
argument_list|)
decl_stmt|;
name|MockScriptEngine
name|scriptEngine
init|=
operator|new
name|MockScriptEngine
argument_list|(
name|MockScriptEngine
operator|.
name|NAME
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"1"
argument_list|,
name|script
lambda|->
literal|"1"
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|ScriptModule
argument_list|(
name|settings
argument_list|,
name|environment
argument_list|,
literal|null
argument_list|,
name|singletonList
argument_list|(
name|scriptEngine
argument_list|)
argument_list|,
name|emptyList
argument_list|()
argument_list|)
return|;
block|}
comment|/** Creates an IndicesModule for testing with the given mappers and metadata mappers. */
DECL|method|newTestIndicesModule
specifier|public
specifier|static
name|IndicesModule
name|newTestIndicesModule
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Mapper
operator|.
name|TypeParser
argument_list|>
name|extraMappers
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|MetadataFieldMapper
operator|.
name|TypeParser
argument_list|>
name|extraMetadataMappers
parameter_list|)
block|{
return|return
operator|new
name|IndicesModule
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
operator|new
name|MapperPlugin
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Mapper
operator|.
name|TypeParser
argument_list|>
name|getMappers
parameter_list|()
block|{
return|return
name|extraMappers
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|MetadataFieldMapper
operator|.
name|TypeParser
argument_list|>
name|getMetadataMappers
parameter_list|()
block|{
return|return
name|extraMetadataMappers
return|;
block|}
block|}
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * This cute helper class just holds all analysis building blocks that are used      * to build IndexAnalyzers. This is only for testing since in production we only need the      * result and we don't even expose it there.      */
DECL|class|TestAnalysis
specifier|public
specifier|static
specifier|final
class|class
name|TestAnalysis
block|{
DECL|field|indexAnalyzers
specifier|public
specifier|final
name|IndexAnalyzers
name|indexAnalyzers
decl_stmt|;
DECL|field|tokenFilter
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TokenFilterFactory
argument_list|>
name|tokenFilter
decl_stmt|;
DECL|field|tokenizer
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|TokenizerFactory
argument_list|>
name|tokenizer
decl_stmt|;
DECL|field|charFilter
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CharFilterFactory
argument_list|>
name|charFilter
decl_stmt|;
DECL|method|TestAnalysis
specifier|public
name|TestAnalysis
parameter_list|(
name|IndexAnalyzers
name|indexAnalyzers
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|TokenFilterFactory
argument_list|>
name|tokenFilter
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|TokenizerFactory
argument_list|>
name|tokenizer
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|CharFilterFactory
argument_list|>
name|charFilter
parameter_list|)
block|{
name|this
operator|.
name|indexAnalyzers
operator|=
name|indexAnalyzers
expr_stmt|;
name|this
operator|.
name|tokenFilter
operator|=
name|tokenFilter
expr_stmt|;
name|this
operator|.
name|tokenizer
operator|=
name|tokenizer
expr_stmt|;
name|this
operator|.
name|charFilter
operator|=
name|charFilter
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

