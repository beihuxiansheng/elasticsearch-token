begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.rest.yaml
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|yaml
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|Loggers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|ToXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Allows to cache the last obtained test response and or part of it within variables  * that can be used as input values in following requests and assertions.  */
end_comment

begin_class
DECL|class|Stash
specifier|public
class|class
name|Stash
implements|implements
name|ToXContent
block|{
DECL|field|EXTENDED_KEY
specifier|private
specifier|static
specifier|final
name|Pattern
name|EXTENDED_KEY
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\$\\{([^}]+)\\}"
argument_list|)
decl_stmt|;
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|Loggers
operator|.
name|getLogger
argument_list|(
name|Stash
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|EMPTY
specifier|public
specifier|static
specifier|final
name|Stash
name|EMPTY
init|=
operator|new
name|Stash
argument_list|()
decl_stmt|;
DECL|field|stash
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|stash
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|stashObjectPath
specifier|private
specifier|final
name|ObjectPath
name|stashObjectPath
init|=
operator|new
name|ObjectPath
argument_list|(
name|stash
argument_list|)
decl_stmt|;
comment|/**      * Allows to saved a specific field in the stash as key-value pair      */
DECL|method|stashValue
specifier|public
name|void
name|stashValue
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"stashing [{}]=[{}]"
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Object
name|old
init|=
name|stash
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
operator|&&
name|old
operator|!=
name|value
condition|)
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"replaced stashed value [{}] with same key [{}]"
argument_list|,
name|old
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Clears the previously stashed values      */
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|stash
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * Tells whether a particular key needs to be looked up in the stash based on its name.      * Returns true if the string representation of the key starts with "$", false otherwise      * The stash contains fields eventually extracted from previous responses that can be reused      * as arguments for following requests (e.g. scroll_id)      */
DECL|method|containsStashedValue
specifier|public
name|boolean
name|containsStashedValue
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
name|key
operator|==
literal|null
operator|||
literal|false
operator|==
name|key
operator|instanceof
name|CharSequence
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|stashKey
init|=
name|key
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
literal|false
operator|==
name|Strings
operator|.
name|hasLength
argument_list|(
name|stashKey
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|stashKey
operator|.
name|startsWith
argument_list|(
literal|"$"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|EXTENDED_KEY
operator|.
name|matcher
argument_list|(
name|stashKey
argument_list|)
operator|.
name|find
argument_list|()
return|;
block|}
comment|/**      * Retrieves a value from the current stash.      * The stash contains fields eventually extracted from previous responses that can be reused      * as arguments for following requests (e.g. scroll_id)      */
DECL|method|getValue
specifier|public
name|Object
name|getValue
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|key
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'$'
operator|&&
name|key
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
operator|!=
literal|'{'
condition|)
block|{
return|return
name|unstash
argument_list|(
name|key
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
name|Matcher
name|matcher
init|=
name|EXTENDED_KEY
operator|.
name|matcher
argument_list|(
name|key
argument_list|)
decl_stmt|;
comment|/*          * String*Buffer* because that is what the Matcher API takes. In modern versions of java the uncontended synchronization is very,          * very cheap so that should not be a problem.          */
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|(
name|key
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|false
operator|==
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Doesn't contain any stash keys ["
operator|+
name|key
operator|+
literal|"]"
argument_list|)
throw|;
block|}
do|do
block|{
name|matcher
operator|.
name|appendReplacement
argument_list|(
name|result
argument_list|,
name|Matcher
operator|.
name|quoteReplacement
argument_list|(
name|unstash
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
do|;
name|matcher
operator|.
name|appendTail
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|unstash
specifier|private
name|Object
name|unstash
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
name|stashedValue
init|=
name|stashObjectPath
operator|.
name|evaluate
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|stashedValue
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"stashed value not found for key ["
operator|+
name|key
operator|+
literal|"]"
argument_list|)
throw|;
block|}
return|return
name|stashedValue
return|;
block|}
comment|/**      * Goes recursively against each map entry and replaces any string value starting with "$" with its      * corresponding value retrieved from the stash      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
comment|// Safe because we check that all the map keys are string in unstashObject
DECL|method|replaceStashedValues
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|replaceStashedValues
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|unstashObject
argument_list|(
name|map
argument_list|)
return|;
block|}
DECL|method|unstashObject
specifier|private
name|Object
name|unstashObject
parameter_list|(
name|Object
name|obj
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|obj
operator|instanceof
name|List
condition|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|list
control|)
block|{
if|if
condition|(
name|containsStashedValue
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|getValue
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
name|unstashObject
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|Map
condition|)
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|obj
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|containsStashedValue
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|key
operator|=
name|getValue
argument_list|(
name|key
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|containsStashedValue
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|value
operator|=
name|getValue
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|unstashObject
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|result
operator|.
name|putIfAbsent
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unstashing has caused a key conflict! The map is ["
operator|+
name|result
operator|+
literal|"] and the key is ["
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"] which unstashes to ["
operator|+
name|key
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
return|return
name|obj
return|;
block|}
annotation|@
name|Override
DECL|method|toXContent
specifier|public
name|XContentBuilder
name|toXContent
parameter_list|(
name|XContentBuilder
name|builder
parameter_list|,
name|Params
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"stash"
argument_list|,
name|stash
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

