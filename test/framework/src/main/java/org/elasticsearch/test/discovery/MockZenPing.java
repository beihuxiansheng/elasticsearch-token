begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.discovery
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|discovery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|component
operator|.
name|AbstractComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentCollections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|PingContextProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|discovery
operator|.
name|zen
operator|.
name|ZenPing
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * A {@link ZenPing} implementation which returns results based on an static in-memory map. This allows pinging  * to be immediate and can be used to speed up tests.  */
end_comment

begin_class
DECL|class|MockZenPing
specifier|public
specifier|final
class|class
name|MockZenPing
extends|extends
name|AbstractComponent
implements|implements
name|ZenPing
block|{
DECL|field|activeNodesPerCluster
specifier|static
specifier|final
name|Map
argument_list|<
name|ClusterName
argument_list|,
name|Set
argument_list|<
name|MockZenPing
argument_list|>
argument_list|>
name|activeNodesPerCluster
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/** a set of the last discovered pings. used to throttle busy spinning where MockZenPing will keep returning the same results */
DECL|field|lastDiscoveredPings
specifier|private
name|Set
argument_list|<
name|MockZenPing
argument_list|>
name|lastDiscoveredPings
init|=
literal|null
decl_stmt|;
DECL|field|contextProvider
specifier|private
specifier|volatile
name|PingContextProvider
name|contextProvider
decl_stmt|;
DECL|method|MockZenPing
specifier|public
name|MockZenPing
parameter_list|(
name|Settings
name|settings
parameter_list|)
block|{
name|super
argument_list|(
name|settings
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start
specifier|public
name|void
name|start
parameter_list|(
name|PingContextProvider
name|contextProvider
parameter_list|)
block|{
name|this
operator|.
name|contextProvider
operator|=
name|contextProvider
expr_stmt|;
assert|assert
name|contextProvider
operator|!=
literal|null
assert|;
synchronized|synchronized
init|(
name|activeNodesPerCluster
init|)
block|{
name|boolean
name|added
init|=
name|getActiveNodesForCurrentCluster
argument_list|()
operator|.
name|add
argument_list|(
name|this
argument_list|)
decl_stmt|;
assert|assert
name|added
assert|;
name|activeNodesPerCluster
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|ping
specifier|public
name|void
name|ping
parameter_list|(
name|PingListener
name|listener
parameter_list|,
name|TimeValue
name|timeout
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"pinging using mock zen ping"
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|activeNodesPerCluster
init|)
block|{
name|Set
argument_list|<
name|MockZenPing
argument_list|>
name|activeNodes
init|=
name|getActiveNodesForCurrentCluster
argument_list|()
decl_stmt|;
if|if
condition|(
name|activeNodes
operator|.
name|equals
argument_list|(
name|lastDiscoveredPings
argument_list|)
condition|)
block|{
try|try
block|{
name|logger
operator|.
name|trace
argument_list|(
literal|"nothing has changed since the last ping. waiting for a change"
argument_list|)
expr_stmt|;
name|activeNodesPerCluster
operator|.
name|wait
argument_list|(
name|timeout
operator|.
name|millis
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{                  }
name|activeNodes
operator|=
name|getActiveNodesForCurrentCluster
argument_list|()
expr_stmt|;
block|}
name|lastDiscoveredPings
operator|=
name|activeNodes
expr_stmt|;
name|List
argument_list|<
name|PingResponse
argument_list|>
name|responseList
init|=
name|activeNodes
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|p
lambda|->
name|p
operator|!=
name|this
argument_list|)
comment|// remove this as pings are not expected to return the local node
operator|.
name|map
argument_list|(
name|MockZenPing
operator|::
name|getPingResponse
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|listener
operator|.
name|onPing
argument_list|(
name|responseList
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getClusterName
specifier|private
name|ClusterName
name|getClusterName
parameter_list|()
block|{
return|return
name|contextProvider
operator|.
name|clusterState
argument_list|()
operator|.
name|getClusterName
argument_list|()
return|;
block|}
DECL|method|getPingResponse
specifier|private
name|PingResponse
name|getPingResponse
parameter_list|()
block|{
specifier|final
name|ClusterState
name|clusterState
init|=
name|contextProvider
operator|.
name|clusterState
argument_list|()
decl_stmt|;
return|return
operator|new
name|PingResponse
argument_list|(
name|clusterState
operator|.
name|nodes
argument_list|()
operator|.
name|getLocalNode
argument_list|()
argument_list|,
name|clusterState
operator|.
name|nodes
argument_list|()
operator|.
name|getMasterNode
argument_list|()
argument_list|,
name|clusterState
argument_list|)
return|;
block|}
DECL|method|getActiveNodesForCurrentCluster
specifier|private
name|Set
argument_list|<
name|MockZenPing
argument_list|>
name|getActiveNodesForCurrentCluster
parameter_list|()
block|{
assert|assert
name|Thread
operator|.
name|holdsLock
argument_list|(
name|activeNodesPerCluster
argument_list|)
assert|;
return|return
name|activeNodesPerCluster
operator|.
name|computeIfAbsent
argument_list|(
name|getClusterName
argument_list|()
argument_list|,
name|clusterName
lambda|->
name|ConcurrentCollections
operator|.
name|newConcurrentSet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
synchronized|synchronized
init|(
name|activeNodesPerCluster
init|)
block|{
name|boolean
name|found
init|=
name|getActiveNodesForCurrentCluster
argument_list|()
operator|.
name|remove
argument_list|(
name|this
argument_list|)
decl_stmt|;
assert|assert
name|found
assert|;
name|activeNodesPerCluster
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

