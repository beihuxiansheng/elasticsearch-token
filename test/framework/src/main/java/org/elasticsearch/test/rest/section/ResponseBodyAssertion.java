begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.rest.section
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|section
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|parser
operator|.
name|RestTestFragmentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|parser
operator|.
name|RestTestParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|parser
operator|.
name|RestTestSuiteParseContext
import|;
end_import

begin_comment
comment|/**  * Checks that the response body matches some text.   */
end_comment

begin_class
DECL|class|ResponseBodyAssertion
specifier|public
class|class
name|ResponseBodyAssertion
extends|extends
name|Assertion
block|{
DECL|field|PARSER
specifier|public
specifier|static
specifier|final
name|RestTestFragmentParser
argument_list|<
name|ResponseBodyAssertion
argument_list|>
name|PARSER
init|=
operator|new
name|RestTestFragmentParser
argument_list|<
name|ResponseBodyAssertion
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ResponseBodyAssertion
name|parse
parameter_list|(
name|RestTestSuiteParseContext
name|parseContext
parameter_list|)
throws|throws
name|IOException
throws|,
name|RestTestParseException
block|{
try|try
init|(
name|XContentParser
name|parser
init|=
name|JsonXContent
operator|.
name|jsonXContent
operator|.
name|createParser
argument_list|(
name|parseContext
operator|.
name|parseField
argument_list|()
argument_list|)
init|)
block|{
return|return
operator|new
name|ResponseBodyAssertion
argument_list|(
literal|"$body"
argument_list|,
name|parser
operator|.
name|map
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
decl_stmt|;
DECL|method|ResponseBodyAssertion
specifier|private
name|ResponseBodyAssertion
parameter_list|(
name|String
name|field
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedValue
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|,
name|expectedValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doAssert
specifier|protected
name|void
name|doAssert
parameter_list|(
name|Object
name|actualValue
parameter_list|,
name|Object
name|expectedValue
parameter_list|)
block|{
if|if
condition|(
literal|false
operator|==
name|expectedValue
operator|.
name|equals
argument_list|(
name|actualValue
argument_list|)
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|actual
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|actualValue
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expected
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|expectedValue
decl_stmt|;
name|FailureMessage
name|message
init|=
operator|new
name|FailureMessage
argument_list|()
decl_stmt|;
name|message
operator|.
name|compareMaps
argument_list|(
name|actual
argument_list|,
name|expected
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|AssertionError
argument_list|(
name|message
operator|.
name|message
argument_list|)
throw|;
block|}
block|}
DECL|class|FailureMessage
specifier|private
class|class
name|FailureMessage
block|{
DECL|field|message
specifier|private
specifier|final
name|StringBuilder
name|message
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"body didn't match the expected value:\n"
argument_list|)
decl_stmt|;
DECL|field|indent
specifier|private
name|int
name|indent
init|=
literal|0
decl_stmt|;
DECL|method|compareMaps
specifier|private
name|void
name|compareMaps
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|actual
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expected
parameter_list|)
block|{
name|actual
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|expected
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedEntry
range|:
name|expected
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|compare
argument_list|(
name|expectedEntry
operator|.
name|getKey
argument_list|()
argument_list|,
name|actual
operator|.
name|remove
argument_list|(
name|expectedEntry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|expectedEntry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|unmatchedEntry
range|:
name|actual
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|field
argument_list|(
name|unmatchedEntry
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"unexpected but found ["
operator|+
name|unmatchedEntry
operator|.
name|getValue
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|compareLists
specifier|private
name|void
name|compareLists
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|actual
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|expected
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|actual
operator|.
name|size
argument_list|()
operator|&&
name|i
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|)
block|{
name|compare
argument_list|(
name|i
argument_list|,
name|actual
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|expected
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|actual
operator|.
name|size
argument_list|()
operator|==
name|expected
operator|.
name|size
argument_list|()
condition|)
block|{
return|return;
block|}
name|indent
argument_list|()
expr_stmt|;
if|if
condition|(
name|actual
operator|.
name|size
argument_list|()
operator|<
name|expected
operator|.
name|size
argument_list|()
condition|)
block|{
name|message
operator|.
name|append
argument_list|(
literal|"expected ["
argument_list|)
operator|.
name|append
argument_list|(
name|expected
operator|.
name|size
argument_list|()
operator|-
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|"] more entries\n"
argument_list|)
expr_stmt|;
return|return;
block|}
name|message
operator|.
name|append
argument_list|(
literal|"received ["
argument_list|)
operator|.
name|append
argument_list|(
name|actual
operator|.
name|size
argument_list|()
operator|-
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|"] more entries than expected\n"
argument_list|)
expr_stmt|;
block|}
DECL|method|compare
specifier|private
name|void
name|compare
parameter_list|(
name|Object
name|field
parameter_list|,
annotation|@
name|Nullable
name|Object
name|actual
parameter_list|,
name|Object
name|expected
parameter_list|)
block|{
if|if
condition|(
name|expected
operator|instanceof
name|Map
condition|)
block|{
if|if
condition|(
name|actual
operator|==
literal|null
condition|)
block|{
name|field
argument_list|(
name|field
argument_list|,
literal|"expected map but not found"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
literal|false
operator|==
name|actual
operator|instanceof
name|Map
condition|)
block|{
name|field
argument_list|(
name|field
argument_list|,
literal|"expected map but found ["
operator|+
name|actual
operator|+
literal|"]"
argument_list|)
expr_stmt|;
return|return;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|expected
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|actualMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|actual
decl_stmt|;
if|if
condition|(
name|expectedMap
operator|.
name|isEmpty
argument_list|()
operator|&&
name|actualMap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|field
argument_list|(
name|field
argument_list|,
literal|"same [empty map]"
argument_list|)
expr_stmt|;
return|return;
block|}
name|field
argument_list|(
name|field
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|indent
operator|+=
literal|1
expr_stmt|;
name|compareMaps
argument_list|(
name|actualMap
argument_list|,
name|expectedMap
argument_list|)
expr_stmt|;
name|indent
operator|-=
literal|1
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|expected
operator|instanceof
name|List
condition|)
block|{
if|if
condition|(
name|actual
operator|==
literal|null
condition|)
block|{
name|field
argument_list|(
name|field
argument_list|,
literal|"expected list but not found"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
literal|false
operator|==
name|actual
operator|instanceof
name|List
condition|)
block|{
name|field
argument_list|(
name|field
argument_list|,
literal|"expected list but found ["
operator|+
name|actual
operator|+
literal|"]"
argument_list|)
expr_stmt|;
return|return;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|expectedList
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|expected
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|actualList
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|actual
decl_stmt|;
if|if
condition|(
name|expectedList
operator|.
name|isEmpty
argument_list|()
operator|&&
name|actualList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|field
argument_list|(
name|field
argument_list|,
literal|"same [empty list]"
argument_list|)
expr_stmt|;
return|return;
block|}
name|field
argument_list|(
name|field
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|indent
operator|+=
literal|1
expr_stmt|;
name|compareLists
argument_list|(
name|actualList
argument_list|,
name|expectedList
argument_list|)
expr_stmt|;
name|indent
operator|-=
literal|1
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|actual
operator|==
literal|null
condition|)
block|{
name|field
argument_list|(
name|field
argument_list|,
literal|"expected ["
operator|+
name|expected
operator|+
literal|"] but not found"
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|expected
argument_list|,
name|actual
argument_list|)
condition|)
block|{
name|field
argument_list|(
name|field
argument_list|,
literal|"same ["
operator|+
name|expected
operator|+
literal|"]"
argument_list|)
expr_stmt|;
return|return;
block|}
name|field
argument_list|(
name|field
argument_list|,
literal|"expected ["
operator|+
name|expected
operator|+
literal|"] but was ["
operator|+
name|actual
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
DECL|method|indent
specifier|private
name|void
name|indent
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indent
condition|;
name|i
operator|++
control|)
block|{
name|message
operator|.
name|append
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|field
specifier|private
name|void
name|field
parameter_list|(
name|Object
name|name
parameter_list|,
name|String
name|info
parameter_list|)
block|{
name|indent
argument_list|()
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%30s: "
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|append
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

