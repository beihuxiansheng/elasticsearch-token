begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.script
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|script
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|lookup
operator|.
name|LeafSearchLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|lookup
operator|.
name|SearchLookup
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_comment
comment|/**  * A mocked script engine that can be used for testing purpose.  *  * This script engine allows to define a set of predefined scripts that basically a combination of a key and a  * function:  *  * The key can be anything as long as it is a {@link String} and is used to resolve the scripts  * at compilation time. For inline scripts, the key can be a description of the script. For stored and file scripts,  * the source must match a key in the predefined set of scripts.  *  * The function is used to provide the result of the script execution and can return anything.  */
end_comment

begin_class
DECL|class|MockScriptEngine
specifier|public
class|class
name|MockScriptEngine
implements|implements
name|ScriptEngine
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"mockscript"
decl_stmt|;
DECL|field|type
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
DECL|field|scripts
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Function
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|>
name|scripts
decl_stmt|;
DECL|method|MockScriptEngine
specifier|public
name|MockScriptEngine
parameter_list|(
name|String
name|type
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Function
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
argument_list|>
name|scripts
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|scripts
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|scripts
argument_list|)
expr_stmt|;
block|}
DECL|method|MockScriptEngine
specifier|public
name|MockScriptEngine
parameter_list|()
block|{
name|this
argument_list|(
name|NAME
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
DECL|method|compile
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|compile
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|source
parameter_list|,
name|ScriptContext
argument_list|<
name|T
argument_list|>
name|context
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
comment|// Scripts are always resolved using the script's source. For inline scripts, it's easy because they don't have names and the
comment|// source is always provided. For stored and file scripts, the source of the script must match the key of a predefined script.
name|Function
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
name|script
init|=
name|scripts
operator|.
name|get
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|script
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No pre defined script matching ["
operator|+
name|source
operator|+
literal|"] for script with name ["
operator|+
name|name
operator|+
literal|"], "
operator|+
literal|"did you declare the mocked script?"
argument_list|)
throw|;
block|}
name|MockCompiledScript
name|mockCompiled
init|=
operator|new
name|MockCompiledScript
argument_list|(
name|name
argument_list|,
name|params
argument_list|,
name|source
argument_list|,
name|script
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|instanceClazz
operator|.
name|equals
argument_list|(
name|SearchScript
operator|.
name|class
argument_list|)
condition|)
block|{
name|SearchScript
operator|.
name|Compiled
name|compiled
init|=
name|mockCompiled
operator|::
name|createSearchScript
decl_stmt|;
return|return
name|context
operator|.
name|compiledClazz
operator|.
name|cast
argument_list|(
name|compiled
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|context
operator|.
name|instanceClazz
operator|.
name|equals
argument_list|(
name|ExecutableScript
operator|.
name|class
argument_list|)
condition|)
block|{
name|ExecutableScript
operator|.
name|Compiled
name|compiled
init|=
name|mockCompiled
operator|::
name|createExecutableScript
decl_stmt|;
return|return
name|context
operator|.
name|compiledClazz
operator|.
name|cast
argument_list|(
name|compiled
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"mock script engine does not know how to handle context ["
operator|+
name|context
operator|.
name|name
operator|+
literal|"]"
argument_list|)
throw|;
block|}
DECL|class|MockCompiledScript
specifier|public
class|class
name|MockCompiledScript
block|{
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|source
specifier|private
specifier|final
name|String
name|source
decl_stmt|;
DECL|field|options
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
decl_stmt|;
DECL|field|script
specifier|private
specifier|final
name|Function
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
name|script
decl_stmt|;
DECL|method|MockCompiledScript
specifier|public
name|MockCompiledScript
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|options
parameter_list|,
name|String
name|source
parameter_list|,
name|Function
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
name|script
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|options
operator|=
name|options
expr_stmt|;
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
block|}
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|createExecutableScript
specifier|public
name|ExecutableScript
name|createExecutableScript
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|options
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|putAll
argument_list|(
name|options
argument_list|)
expr_stmt|;
comment|// TODO: remove this once scripts know to look for options under options key
name|context
operator|.
name|put
argument_list|(
literal|"options"
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|putAll
argument_list|(
name|params
argument_list|)
expr_stmt|;
comment|// TODO: remove this once scripts know to look for params under params key
name|context
operator|.
name|put
argument_list|(
literal|"params"
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MockExecutableScript
argument_list|(
name|context
argument_list|,
name|script
operator|!=
literal|null
condition|?
name|script
else|:
name|ctx
lambda|->
name|source
argument_list|)
return|;
block|}
DECL|method|createSearchScript
specifier|public
name|SearchScript
name|createSearchScript
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|,
name|SearchLookup
name|lookup
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|context
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|options
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|putAll
argument_list|(
name|options
argument_list|)
expr_stmt|;
comment|// TODO: remove this once scripts know to look for options under options key
name|context
operator|.
name|put
argument_list|(
literal|"options"
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|putAll
argument_list|(
name|params
argument_list|)
expr_stmt|;
comment|// TODO: remove this once scripts know to look for params under params key
name|context
operator|.
name|put
argument_list|(
literal|"params"
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MockSearchScript
argument_list|(
name|lookup
argument_list|,
name|context
argument_list|,
name|script
operator|!=
literal|null
condition|?
name|script
else|:
name|ctx
lambda|->
name|source
argument_list|)
return|;
block|}
block|}
DECL|class|MockExecutableScript
specifier|public
class|class
name|MockExecutableScript
implements|implements
name|ExecutableScript
block|{
DECL|field|script
specifier|private
specifier|final
name|Function
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
name|script
decl_stmt|;
DECL|field|vars
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
decl_stmt|;
DECL|method|MockExecutableScript
specifier|public
name|MockExecutableScript
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
parameter_list|,
name|Function
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
name|script
parameter_list|)
block|{
name|this
operator|.
name|vars
operator|=
name|vars
expr_stmt|;
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextVar
specifier|public
name|void
name|setNextVar
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|vars
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|Object
name|run
parameter_list|()
block|{
return|return
name|script
operator|.
name|apply
argument_list|(
name|vars
argument_list|)
return|;
block|}
block|}
DECL|class|MockSearchScript
specifier|public
class|class
name|MockSearchScript
implements|implements
name|SearchScript
block|{
DECL|field|script
specifier|private
specifier|final
name|Function
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
name|script
decl_stmt|;
DECL|field|vars
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
decl_stmt|;
DECL|field|lookup
specifier|private
specifier|final
name|SearchLookup
name|lookup
decl_stmt|;
DECL|method|MockSearchScript
specifier|public
name|MockSearchScript
parameter_list|(
name|SearchLookup
name|lookup
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vars
parameter_list|,
name|Function
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Object
argument_list|>
name|script
parameter_list|)
block|{
name|this
operator|.
name|lookup
operator|=
name|lookup
expr_stmt|;
name|this
operator|.
name|vars
operator|=
name|vars
expr_stmt|;
name|this
operator|.
name|script
operator|=
name|script
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLeafSearchScript
specifier|public
name|LeafSearchScript
name|getLeafSearchScript
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|LeafSearchLookup
name|leafLookup
init|=
name|lookup
operator|.
name|getLeafSearchLookup
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|ctx
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|leafLookup
operator|.
name|asMap
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|vars
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|putAll
argument_list|(
name|vars
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|LeafSearchScript
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|run
parameter_list|()
block|{
return|return
name|script
operator|.
name|apply
argument_list|(
name|ctx
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|runAsLong
parameter_list|()
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|run
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|runAsDouble
parameter_list|()
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|run
argument_list|()
operator|)
operator|.
name|doubleValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNextVar
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|ctx
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
name|ctx
operator|.
name|put
argument_list|(
literal|"_score"
argument_list|,
operator|new
name|ScoreAccessor
argument_list|(
name|scorer
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDocument
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
name|leafLookup
operator|.
name|setDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSource
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|source
parameter_list|)
block|{
name|leafLookup
operator|.
name|source
argument_list|()
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|method|mockInlineScript
specifier|public
specifier|static
name|Script
name|mockInlineScript
parameter_list|(
specifier|final
name|String
name|script
parameter_list|)
block|{
return|return
operator|new
name|Script
argument_list|(
name|ScriptType
operator|.
name|INLINE
argument_list|,
literal|"mock"
argument_list|,
name|script
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

