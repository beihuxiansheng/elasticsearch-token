begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_class
DECL|class|IngestDocumentMatcher
specifier|public
class|class
name|IngestDocumentMatcher
block|{
comment|/**      * Helper method to assert the equivalence between two IngestDocuments.      *      * @param a first object to compare      * @param b second object to compare      */
DECL|method|assertIngestDocument
specifier|public
specifier|static
name|void
name|assertIngestDocument
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|instanceof
name|Map
condition|)
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|mapA
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|a
decl_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|mapB
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|b
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|mapA
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|List
operator|||
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Map
condition|)
block|{
name|assertIngestDocument
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|mapB
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|a
operator|instanceof
name|List
condition|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|listA
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|a
decl_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|listB
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|b
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listA
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|value
init|=
name|listA
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|List
operator|||
name|value
operator|instanceof
name|Map
condition|)
block|{
name|assertIngestDocument
argument_list|(
name|value
argument_list|,
name|listB
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|a
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|assertArrayEquals
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|a
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|b
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|a
operator|instanceof
name|IngestDocument
condition|)
block|{
name|IngestDocument
name|docA
init|=
operator|(
name|IngestDocument
operator|)
name|a
decl_stmt|;
name|IngestDocument
name|docB
init|=
operator|(
name|IngestDocument
operator|)
name|b
decl_stmt|;
name|assertIngestDocument
argument_list|(
name|docA
operator|.
name|getSourceAndMetadata
argument_list|()
argument_list|,
name|docB
operator|.
name|getSourceAndMetadata
argument_list|()
argument_list|)
expr_stmt|;
name|assertIngestDocument
argument_list|(
name|docA
operator|.
name|getIngestMetadata
argument_list|()
argument_list|,
name|docB
operator|.
name|getIngestMetadata
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Expected %s class to be equal to %s"
argument_list|,
name|a
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|b
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|msg
argument_list|,
name|a
argument_list|,
name|equalTo
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

