begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.ingest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|ingest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|MockScriptEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|ScriptService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|TemplateScript
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|script
operator|.
name|Script
operator|.
name|DEFAULT_TEMPLATE_LANG
import|;
end_import

begin_class
DECL|class|TestTemplateService
specifier|public
class|class
name|TestTemplateService
extends|extends
name|ScriptService
block|{
DECL|field|compilationException
specifier|private
name|boolean
name|compilationException
decl_stmt|;
DECL|method|instance
specifier|public
specifier|static
name|ScriptService
name|instance
parameter_list|()
block|{
return|return
operator|new
name|TestTemplateService
argument_list|(
literal|false
argument_list|)
return|;
block|}
DECL|method|instance
specifier|public
specifier|static
name|ScriptService
name|instance
parameter_list|(
name|boolean
name|compilationException
parameter_list|)
block|{
return|return
operator|new
name|TestTemplateService
argument_list|(
name|compilationException
argument_list|)
return|;
block|}
DECL|method|TestTemplateService
specifier|private
name|TestTemplateService
parameter_list|(
name|boolean
name|compilationException
parameter_list|)
block|{
name|super
argument_list|(
name|Settings
operator|.
name|EMPTY
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|DEFAULT_TEMPLATE_LANG
argument_list|,
operator|new
name|MockScriptEngine
argument_list|(
name|MockScriptEngine
operator|.
name|NAME
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|compilationException
operator|=
name|compilationException
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compile
specifier|public
parameter_list|<
name|FactoryType
parameter_list|>
name|FactoryType
name|compile
parameter_list|(
name|Script
name|script
parameter_list|,
name|ScriptContext
argument_list|<
name|FactoryType
argument_list|>
name|context
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|compilationException
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"could not compile script"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
operator|(
name|FactoryType
operator|)
operator|new
name|MockTemplateScript
operator|.
name|Factory
argument_list|(
name|script
operator|.
name|getIdOrCode
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|MockTemplateScript
specifier|public
specifier|static
class|class
name|MockTemplateScript
extends|extends
name|TemplateScript
block|{
DECL|field|expected
specifier|private
specifier|final
name|String
name|expected
decl_stmt|;
DECL|method|MockTemplateScript
name|MockTemplateScript
parameter_list|(
name|String
name|expected
parameter_list|)
block|{
name|super
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|expected
operator|=
name|expected
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|String
name|execute
parameter_list|()
block|{
return|return
name|expected
return|;
block|}
DECL|class|Factory
specifier|public
specifier|static
class|class
name|Factory
implements|implements
name|TemplateScript
operator|.
name|Factory
block|{
DECL|field|expected
specifier|private
specifier|final
name|String
name|expected
decl_stmt|;
DECL|method|Factory
specifier|public
name|Factory
parameter_list|(
name|String
name|expected
parameter_list|)
block|{
name|this
operator|.
name|expected
operator|=
name|expected
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newInstance
specifier|public
name|TemplateScript
name|newInstance
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
return|return
operator|new
name|MockTemplateScript
argument_list|(
name|expected
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

