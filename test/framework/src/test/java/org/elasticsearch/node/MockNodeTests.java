begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.node
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|node
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|BigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|MockBigArrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|env
operator|.
name|Environment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|plugins
operator|.
name|Plugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|MockSearchService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|SearchService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|transport
operator|.
name|MockTcpTransportPlugin
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|MockNodeTests
specifier|public
class|class
name|MockNodeTests
extends|extends
name|ESTestCase
block|{
comment|/**      * Test that we add the appropriate mock services when their plugins are added. This is a very heavy test for a testing component but      * we've broken it in the past so it is important.      */
DECL|method|testComponentsMockedByMarkerPlugins
specifier|public
name|void
name|testComponentsMockedByMarkerPlugins
parameter_list|()
throws|throws
name|IOException
block|{
name|Settings
name|settings
init|=
name|Settings
operator|.
name|builder
argument_list|()
comment|// All these are required or MockNode will fail to build.
operator|.
name|put
argument_list|(
name|Environment
operator|.
name|PATH_HOME_SETTING
operator|.
name|getKey
argument_list|()
argument_list|,
name|createTempDir
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
literal|"transport.type"
argument_list|,
name|MockTcpTransportPlugin
operator|.
name|MOCK_TCP_TRANSPORT_NAME
argument_list|)
operator|.
name|put
argument_list|(
literal|"http.enabled"
argument_list|,
literal|false
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Plugin
argument_list|>
argument_list|>
name|plugins
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|plugins
operator|.
name|add
argument_list|(
name|MockTcpTransportPlugin
operator|.
name|class
argument_list|)
expr_stmt|;
name|boolean
name|useMockBigArrays
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
name|boolean
name|useMockSearchService
init|=
name|randomBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|useMockBigArrays
condition|)
block|{
name|plugins
operator|.
name|add
argument_list|(
name|NodeMocksPlugin
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useMockSearchService
condition|)
block|{
name|plugins
operator|.
name|add
argument_list|(
name|MockSearchService
operator|.
name|TestPlugin
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|MockNode
name|node
init|=
operator|new
name|MockNode
argument_list|(
name|settings
argument_list|,
name|plugins
argument_list|)
init|)
block|{
name|BigArrays
name|bigArrays
init|=
name|node
operator|.
name|injector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|BigArrays
operator|.
name|class
argument_list|)
decl_stmt|;
name|SearchService
name|searchService
init|=
name|node
operator|.
name|injector
argument_list|()
operator|.
name|getInstance
argument_list|(
name|SearchService
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|useMockBigArrays
condition|)
block|{
name|assertSame
argument_list|(
name|bigArrays
operator|.
name|getClass
argument_list|()
argument_list|,
name|MockBigArrays
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertSame
argument_list|(
name|bigArrays
operator|.
name|getClass
argument_list|()
argument_list|,
name|BigArrays
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useMockSearchService
condition|)
block|{
name|assertSame
argument_list|(
name|searchService
operator|.
name|getClass
argument_list|()
argument_list|,
name|MockSearchService
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertSame
argument_list|(
name|searchService
operator|.
name|getClass
argument_list|()
argument_list|,
name|SearchService
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

