begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.rest.yaml
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|yaml
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_class
DECL|class|ClientYamlTestExecutionContextTests
specifier|public
class|class
name|ClientYamlTestExecutionContextTests
extends|extends
name|ESTestCase
block|{
DECL|method|testHeadersSupportStashedValueReplacement
specifier|public
name|void
name|testHeadersSupportStashedValueReplacement
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|AtomicReference
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|headersRef
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ClientYamlTestExecutionContext
name|context
init|=
operator|new
name|ClientYamlTestExecutionContext
argument_list|(
literal|null
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
name|ClientYamlTestResponse
name|callApiInternal
parameter_list|(
name|String
name|apiName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|HttpEntity
name|entity
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
parameter_list|)
block|{
name|headersRef
operator|.
name|set
argument_list|(
name|headers
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"foo"
argument_list|,
literal|"$bar"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|put
argument_list|(
literal|"foo1"
argument_list|,
literal|"baz ${c}"
argument_list|)
expr_stmt|;
name|context
operator|.
name|stash
argument_list|()
operator|.
name|stashValue
argument_list|(
literal|"bar"
argument_list|,
literal|"foo2"
argument_list|)
expr_stmt|;
name|context
operator|.
name|stash
argument_list|()
operator|.
name|stashValue
argument_list|(
literal|"c"
argument_list|,
literal|"bar1"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|headersRef
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|callApi
argument_list|(
literal|"test"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|headersRef
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|headers
argument_list|,
name|headersRef
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo2"
argument_list|,
name|headersRef
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"baz bar1"
argument_list|,
name|headersRef
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|(
literal|"foo1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

