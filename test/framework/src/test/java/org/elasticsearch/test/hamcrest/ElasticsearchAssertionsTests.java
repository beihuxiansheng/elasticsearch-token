begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.hamcrest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|NamedWriteableRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|io
operator|.
name|stream
operator|.
name|Streamable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|json
operator|.
name|JsonXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|RandomObjects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|VersionUtils
operator|.
name|randomVersion
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertToXContentEquivalent
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|hamcrest
operator|.
name|ElasticsearchAssertions
operator|.
name|assertVersionSerializable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsString
import|;
end_import

begin_class
DECL|class|ElasticsearchAssertionsTests
specifier|public
class|class
name|ElasticsearchAssertionsTests
extends|extends
name|ESTestCase
block|{
DECL|method|testAssertVersionSerializableIsOkWithIllegalArgumentException
specifier|public
name|void
name|testAssertVersionSerializableIsOkWithIllegalArgumentException
parameter_list|()
block|{
name|Version
name|version
init|=
name|randomVersion
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|NamedWriteableRegistry
name|registry
init|=
operator|new
name|NamedWriteableRegistry
argument_list|(
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
name|Streamable
name|testStreamable
init|=
operator|new
name|TestStreamable
argument_list|()
decl_stmt|;
comment|// Should catch the exception and do nothing.
name|assertVersionSerializable
argument_list|(
name|version
argument_list|,
name|testStreamable
argument_list|,
name|registry
argument_list|)
expr_stmt|;
block|}
DECL|class|TestStreamable
specifier|public
specifier|static
class|class
name|TestStreamable
implements|implements
name|Streamable
block|{
annotation|@
name|Override
DECL|method|readFrom
specifier|public
name|void
name|readFrom
parameter_list|(
name|StreamInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{         }
annotation|@
name|Override
DECL|method|writeTo
specifier|public
name|void
name|writeTo
parameter_list|(
name|StreamOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not supported."
argument_list|)
throw|;
block|}
block|}
DECL|method|testAssertXContentEquivalent
specifier|public
name|void
name|testAssertXContentEquivalent
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|XContentBuilder
name|original
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
init|)
block|{
name|original
operator|.
name|startObject
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|RandomObjects
operator|.
name|randomStoredFieldValues
argument_list|(
name|random
argument_list|()
argument_list|,
name|original
operator|.
name|contentType
argument_list|()
argument_list|)
operator|.
name|v1
argument_list|()
control|)
block|{
name|original
operator|.
name|field
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|{
name|original
operator|.
name|startObject
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|RandomObjects
operator|.
name|randomStoredFieldValues
argument_list|(
name|random
argument_list|()
argument_list|,
name|original
operator|.
name|contentType
argument_list|()
argument_list|)
operator|.
name|v1
argument_list|()
control|)
block|{
name|original
operator|.
name|field
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|10
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|original
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|{
name|original
operator|.
name|startArray
argument_list|(
name|randomAlphaOfLength
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
name|value
range|:
name|RandomObjects
operator|.
name|randomStoredFieldValues
argument_list|(
name|random
argument_list|()
argument_list|,
name|original
operator|.
name|contentType
argument_list|()
argument_list|)
operator|.
name|v1
argument_list|()
control|)
block|{
name|original
operator|.
name|value
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|original
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|original
operator|.
name|endObject
argument_list|()
expr_stmt|;
try|try
init|(
name|XContentBuilder
name|copy
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
init|;
name|XContentParser
name|parser
operator|=
name|createParser
argument_list|(
name|original
operator|.
name|contentType
argument_list|()
operator|.
name|xContent
argument_list|()
argument_list|,
name|original
operator|.
name|bytes
argument_list|()
argument_list|)
init|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|XContentHelper
operator|.
name|copyCurrentStructure
argument_list|(
name|copy
operator|.
name|generator
argument_list|()
argument_list|,
name|parser
argument_list|)
expr_stmt|;
try|try
init|(
name|XContentBuilder
name|copyShuffled
init|=
name|shuffleXContent
argument_list|(
name|copy
argument_list|)
init|)
block|{
name|assertToXContentEquivalent
argument_list|(
name|original
operator|.
name|bytes
argument_list|()
argument_list|,
name|copyShuffled
operator|.
name|bytes
argument_list|()
argument_list|,
name|original
operator|.
name|contentType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testAssertXContentEquivalentErrors
specifier|public
name|void
name|testAssertXContentEquivalentErrors
parameter_list|()
throws|throws
name|IOException
block|{
block|{
name|XContentBuilder
name|builder
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"f1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"f2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|XContentBuilder
name|otherBuilder
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
decl_stmt|;
name|otherBuilder
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|{
name|otherBuilder
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|{
name|otherBuilder
operator|.
name|field
argument_list|(
literal|"f1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
block|}
name|otherBuilder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|otherBuilder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|AssertionError
name|error
init|=
name|expectThrows
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|assertToXContentEquivalent
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|,
name|otherBuilder
operator|.
name|bytes
argument_list|()
argument_list|,
name|builder
operator|.
name|contentType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|error
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"f2: expected [value2] but not found"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|XContentBuilder
name|builder
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"f1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"f2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|XContentBuilder
name|otherBuilder
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
decl_stmt|;
name|otherBuilder
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|{
name|otherBuilder
operator|.
name|startObject
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|{
name|otherBuilder
operator|.
name|field
argument_list|(
literal|"f1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|otherBuilder
operator|.
name|field
argument_list|(
literal|"f2"
argument_list|,
literal|"differentValue2"
argument_list|)
expr_stmt|;
block|}
name|otherBuilder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
name|otherBuilder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|AssertionError
name|error
init|=
name|expectThrows
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|assertToXContentEquivalent
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|,
name|otherBuilder
operator|.
name|bytes
argument_list|()
argument_list|,
name|builder
operator|.
name|contentType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|error
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"f2: expected [value2] but was [differentValue2]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|XContentBuilder
name|builder
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|{
name|builder
operator|.
name|value
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|value
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|value
argument_list|(
literal|"three"
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|field
argument_list|(
literal|"f1"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|XContentBuilder
name|otherBuilder
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
decl_stmt|;
name|otherBuilder
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|{
name|otherBuilder
operator|.
name|startArray
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|{
name|otherBuilder
operator|.
name|value
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|otherBuilder
operator|.
name|value
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
name|otherBuilder
operator|.
name|value
argument_list|(
literal|"four"
argument_list|)
expr_stmt|;
block|}
name|otherBuilder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|otherBuilder
operator|.
name|field
argument_list|(
literal|"f1"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|otherBuilder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|AssertionError
name|error
init|=
name|expectThrows
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|assertToXContentEquivalent
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|,
name|otherBuilder
operator|.
name|bytes
argument_list|()
argument_list|,
name|builder
operator|.
name|contentType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|error
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"2: expected [three] but was [four]"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|XContentBuilder
name|builder
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|{
name|builder
operator|.
name|startArray
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|{
name|builder
operator|.
name|value
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|value
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|value
argument_list|(
literal|"three"
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|XContentBuilder
name|otherBuilder
init|=
name|JsonXContent
operator|.
name|contentBuilder
argument_list|()
decl_stmt|;
name|otherBuilder
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|{
name|otherBuilder
operator|.
name|startArray
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|{
name|otherBuilder
operator|.
name|value
argument_list|(
literal|"one"
argument_list|)
expr_stmt|;
name|otherBuilder
operator|.
name|value
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
block|}
name|otherBuilder
operator|.
name|endArray
argument_list|()
expr_stmt|;
block|}
name|otherBuilder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|AssertionError
name|error
init|=
name|expectThrows
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|assertToXContentEquivalent
argument_list|(
name|builder
operator|.
name|bytes
argument_list|()
argument_list|,
name|otherBuilder
operator|.
name|bytes
argument_list|()
argument_list|,
name|builder
operator|.
name|contentType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|error
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"expected [1] more entries"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

