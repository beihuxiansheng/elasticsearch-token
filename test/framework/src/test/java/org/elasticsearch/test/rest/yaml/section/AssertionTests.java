begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.rest.yaml.section
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|yaml
operator|.
name|section
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|yaml
operator|.
name|YamlXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|yaml
operator|.
name|section
operator|.
name|GreaterThanAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|yaml
operator|.
name|section
operator|.
name|IsFalseAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|yaml
operator|.
name|section
operator|.
name|IsTrueAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|yaml
operator|.
name|section
operator|.
name|LengthAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|yaml
operator|.
name|section
operator|.
name|LessThanAssertion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|yaml
operator|.
name|section
operator|.
name|MatchAssertion
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_class
DECL|class|AssertionTests
specifier|public
class|class
name|AssertionTests
extends|extends
name|AbstractClientYamlTestFragmentParserTestCase
block|{
DECL|method|testParseIsTrue
specifier|public
name|void
name|testParseIsTrue
parameter_list|()
throws|throws
name|Exception
block|{
name|parser
operator|=
name|createParser
argument_list|(
name|YamlXContent
operator|.
name|yamlXContent
argument_list|,
literal|"get.fields._timestamp"
argument_list|)
expr_stmt|;
name|IsTrueAssertion
name|trueAssertion
init|=
name|IsTrueAssertion
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|trueAssertion
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|trueAssertion
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"get.fields._timestamp"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseIsFalse
specifier|public
name|void
name|testParseIsFalse
parameter_list|()
throws|throws
name|Exception
block|{
name|parser
operator|=
name|createParser
argument_list|(
name|YamlXContent
operator|.
name|yamlXContent
argument_list|,
literal|"docs.1._source"
argument_list|)
expr_stmt|;
name|IsFalseAssertion
name|falseAssertion
init|=
name|IsFalseAssertion
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|falseAssertion
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|falseAssertion
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"docs.1._source"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseGreaterThan
specifier|public
name|void
name|testParseGreaterThan
parameter_list|()
throws|throws
name|Exception
block|{
name|parser
operator|=
name|createParser
argument_list|(
name|YamlXContent
operator|.
name|yamlXContent
argument_list|,
literal|"{ field: 3}"
argument_list|)
expr_stmt|;
name|GreaterThanAssertion
name|greaterThanAssertion
init|=
name|GreaterThanAssertion
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|greaterThanAssertion
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|greaterThanAssertion
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|greaterThanAssertion
operator|.
name|getExpectedValue
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|Integer
operator|)
name|greaterThanAssertion
operator|.
name|getExpectedValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseLessThan
specifier|public
name|void
name|testParseLessThan
parameter_list|()
throws|throws
name|Exception
block|{
name|parser
operator|=
name|createParser
argument_list|(
name|YamlXContent
operator|.
name|yamlXContent
argument_list|,
literal|"{ field: 3}"
argument_list|)
expr_stmt|;
name|LessThanAssertion
name|lessThanAssertion
init|=
name|LessThanAssertion
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|lessThanAssertion
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lessThanAssertion
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lessThanAssertion
operator|.
name|getExpectedValue
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|Integer
operator|)
name|lessThanAssertion
operator|.
name|getExpectedValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseLength
specifier|public
name|void
name|testParseLength
parameter_list|()
throws|throws
name|Exception
block|{
name|parser
operator|=
name|createParser
argument_list|(
name|YamlXContent
operator|.
name|yamlXContent
argument_list|,
literal|"{ _id: 22}"
argument_list|)
expr_stmt|;
name|LengthAssertion
name|lengthAssertion
init|=
name|LengthAssertion
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|lengthAssertion
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lengthAssertion
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|lengthAssertion
operator|.
name|getExpectedValue
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|Integer
operator|)
name|lengthAssertion
operator|.
name|getExpectedValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|22
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseMatchSimpleIntegerValue
specifier|public
name|void
name|testParseMatchSimpleIntegerValue
parameter_list|()
throws|throws
name|Exception
block|{
name|parser
operator|=
name|createParser
argument_list|(
name|YamlXContent
operator|.
name|yamlXContent
argument_list|,
literal|"{ field: 10 }"
argument_list|)
expr_stmt|;
name|MatchAssertion
name|matchAssertion
init|=
name|MatchAssertion
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|matchAssertion
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matchAssertion
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matchAssertion
operator|.
name|getExpectedValue
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|Integer
operator|)
name|matchAssertion
operator|.
name|getExpectedValue
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseMatchSimpleStringValue
specifier|public
name|void
name|testParseMatchSimpleStringValue
parameter_list|()
throws|throws
name|Exception
block|{
name|parser
operator|=
name|createParser
argument_list|(
name|YamlXContent
operator|.
name|yamlXContent
argument_list|,
literal|"{ foo: bar }"
argument_list|)
expr_stmt|;
name|MatchAssertion
name|matchAssertion
init|=
name|MatchAssertion
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|matchAssertion
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matchAssertion
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matchAssertion
operator|.
name|getExpectedValue
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matchAssertion
operator|.
name|getExpectedValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseMatchArray
specifier|public
name|void
name|testParseMatchArray
parameter_list|()
throws|throws
name|Exception
block|{
name|parser
operator|=
name|createParser
argument_list|(
name|YamlXContent
operator|.
name|yamlXContent
argument_list|,
literal|"{'matches': ['test_percolator_1', 'test_percolator_2']}"
argument_list|)
expr_stmt|;
name|MatchAssertion
name|matchAssertion
init|=
name|MatchAssertion
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|matchAssertion
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matchAssertion
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"matches"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matchAssertion
operator|.
name|getExpectedValue
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|List
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|strings
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|matchAssertion
operator|.
name|getExpectedValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|strings
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|strings
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test_percolator_1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|strings
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"test_percolator_2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testParseMatchSourceValues
specifier|public
name|void
name|testParseMatchSourceValues
parameter_list|()
throws|throws
name|Exception
block|{
name|parser
operator|=
name|createParser
argument_list|(
name|YamlXContent
operator|.
name|yamlXContent
argument_list|,
literal|"{ _source: { responses.0.hits.total: 3, foo: bar  }}"
argument_list|)
expr_stmt|;
name|MatchAssertion
name|matchAssertion
init|=
name|MatchAssertion
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|matchAssertion
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matchAssertion
operator|.
name|getField
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"_source"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|matchAssertion
operator|.
name|getExpectedValue
argument_list|()
argument_list|,
name|instanceOf
argument_list|(
name|Map
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedValue
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|matchAssertion
operator|.
name|getExpectedValue
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|expectedValue
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|o
init|=
name|expectedValue
operator|.
name|get
argument_list|(
literal|"responses.0.hits.total"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|o
argument_list|,
name|instanceOf
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
operator|(
name|Integer
operator|)
name|o
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|o
operator|=
name|expectedValue
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|o
argument_list|,
name|instanceOf
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

