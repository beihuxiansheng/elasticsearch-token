begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.rest
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_class
DECL|class|BlacklistedPathPatternMatcherTests
specifier|public
class|class
name|BlacklistedPathPatternMatcherTests
extends|extends
name|ESTestCase
block|{
DECL|method|testMatchesExact
specifier|public
name|void
name|testMatchesExact
parameter_list|()
block|{
comment|// suffix match
name|assertMatch
argument_list|(
literal|"cat.aliases/10_basic/Empty cluster"
argument_list|,
literal|"/some/suite_path/cat.aliases/10_basic/Empty cluster"
argument_list|)
expr_stmt|;
comment|// exact match
name|assertMatch
argument_list|(
literal|"cat.aliases/10_basic/Empty cluster"
argument_list|,
literal|"cat.aliases/10_basic/Empty cluster"
argument_list|)
expr_stmt|;
comment|// additional text at the end should not match
name|assertNoMatch
argument_list|(
literal|"cat.aliases/10_basic/Empty cluster"
argument_list|,
literal|"cat.aliases/10_basic/Empty clusters in here"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMatchesSimpleWildcardPatterns
specifier|public
name|void
name|testMatchesSimpleWildcardPatterns
parameter_list|()
block|{
name|assertMatch
argument_list|(
literal|"termvector/20_issue7121/*"
argument_list|,
literal|"/suite/termvector/20_issue7121/test_first"
argument_list|)
expr_stmt|;
name|assertMatch
argument_list|(
literal|"termvector/20_issue7121/*"
argument_list|,
literal|"/suite/termvector/20_issue7121/"
argument_list|)
expr_stmt|;
comment|// do not cross segment boundaries
name|assertNoMatch
argument_list|(
literal|"termvector/20_issue7121/*"
argument_list|,
literal|"/suite/termvector/20_issue7121/test/first"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMatchesMultiWildcardPatterns
specifier|public
name|void
name|testMatchesMultiWildcardPatterns
parameter_list|()
block|{
name|assertMatch
argument_list|(
literal|"indices.get/10_basic/*allow_no_indices*"
argument_list|,
literal|"/suite/indices.get/10_basic/we_allow_no_indices"
argument_list|)
expr_stmt|;
name|assertMatch
argument_list|(
literal|"indices.get/10_basic/*allow_no_indices*"
argument_list|,
literal|"/suite/indices.get/10_basic/we_allow_no_indices_at_all"
argument_list|)
expr_stmt|;
name|assertNoMatch
argument_list|(
literal|"indices.get/10_basic/*allow_no_indices*"
argument_list|,
literal|"/suite/indices.get/10_basic/we_allow_no_indices_at_all/here"
argument_list|)
expr_stmt|;
name|assertMatch
argument_list|(
literal|"indices.get/*/*allow_no_indices*"
argument_list|,
literal|"/suite/indices.get/10_basic/we_allow_no_indices_at_all"
argument_list|)
expr_stmt|;
name|assertMatch
argument_list|(
literal|"indices.get/*/*allow_no_indices*"
argument_list|,
literal|"/suite/indices.get/20_basic/we_allow_no_indices_at_all"
argument_list|)
expr_stmt|;
name|assertMatch
argument_list|(
literal|"*/*/*allow_no_indices*"
argument_list|,
literal|"/suite/path/to/test/indices.get/20_basic/we_allow_no_indices_at_all"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMatchesPatternsWithEscapedCommas
specifier|public
name|void
name|testMatchesPatternsWithEscapedCommas
parameter_list|()
block|{
name|assertMatch
argument_list|(
literal|"indices.get/10_basic\\,20_advanced/foo"
argument_list|,
literal|"/suite/indices.get/10_basic,20_advanced/foo"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMatchesMixedPatterns
specifier|public
name|void
name|testMatchesMixedPatterns
parameter_list|()
block|{
name|assertMatch
argument_list|(
literal|"indices.get/*/10_basic\\,20_advanced/*foo*"
argument_list|,
literal|"/suite/indices.get/all/10_basic,20_advanced/foo"
argument_list|)
expr_stmt|;
name|assertMatch
argument_list|(
literal|"indices.get/*/10_basic\\,20_advanced/*foo*"
argument_list|,
literal|"/suite/indices.get/all/10_basic,20_advanced/my_foo"
argument_list|)
expr_stmt|;
name|assertMatch
argument_list|(
literal|"indices.get/*/10_basic\\,20_advanced/*foo*"
argument_list|,
literal|"/suite/indices.get/all/10_basic,20_advanced/foo_bar"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertMatch
specifier|private
name|void
name|assertMatch
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|BlacklistedPathPatternMatcher
name|matcher
init|=
operator|new
name|BlacklistedPathPatternMatcher
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Pattern ["
operator|+
name|pattern
operator|+
literal|"] should have matched path ["
operator|+
name|path
operator|+
literal|"]"
argument_list|,
name|matcher
operator|.
name|isSuffixMatch
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNoMatch
specifier|private
name|void
name|assertNoMatch
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|BlacklistedPathPatternMatcher
name|matcher
init|=
operator|new
name|BlacklistedPathPatternMatcher
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Pattern ["
operator|+
name|pattern
operator|+
literal|"] should not have matched path ["
operator|+
name|path
operator|+
literal|"]"
argument_list|,
name|matcher
operator|.
name|isSuffixMatch
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

