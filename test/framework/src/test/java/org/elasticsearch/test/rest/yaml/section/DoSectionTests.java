begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.rest.yaml.section
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|yaml
operator|.
name|section
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_class
DECL|class|DoSectionTests
specifier|public
class|class
name|DoSectionTests
extends|extends
name|ESTestCase
block|{
DECL|method|testWarningHeaders
specifier|public
name|void
name|testWarningHeaders
parameter_list|()
throws|throws
name|IOException
block|{
name|DoSection
name|section
init|=
operator|new
name|DoSection
argument_list|(
operator|new
name|XContentLocation
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// No warning headers doesn't throw an exception
name|section
operator|.
name|checkWarningHeaders
argument_list|(
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
comment|// Any warning headers fail
name|AssertionError
name|e
init|=
name|expectThrows
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|section
operator|.
name|checkWarningHeaders
argument_list|(
name|singletonList
argument_list|(
literal|"test"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"got unexpected warning headers [\ntest\n]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|section
operator|.
name|checkWarningHeaders
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"test"
argument_list|,
literal|"another"
argument_list|,
literal|"some more"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"got unexpected warning headers [\ntest\nanother\nsome more\n]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// But not when we expect them
name|section
operator|.
name|setExpectedWarningHeaders
argument_list|(
name|singletonList
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|section
operator|.
name|checkWarningHeaders
argument_list|(
name|singletonList
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|section
operator|.
name|setExpectedWarningHeaders
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"test"
argument_list|,
literal|"another"
argument_list|,
literal|"some more"
argument_list|)
argument_list|)
expr_stmt|;
name|section
operator|.
name|checkWarningHeaders
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"test"
argument_list|,
literal|"another"
argument_list|,
literal|"some more"
argument_list|)
argument_list|)
expr_stmt|;
comment|// But if you don't get some that you did expect, that is an error
name|section
operator|.
name|setExpectedWarningHeaders
argument_list|(
name|singletonList
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|section
operator|.
name|checkWarningHeaders
argument_list|(
name|emptyList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"didn't get expected warning headers [\ntest\n]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|section
operator|.
name|setExpectedWarningHeaders
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"test"
argument_list|,
literal|"another"
argument_list|,
literal|"some more"
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|section
operator|.
name|checkWarningHeaders
argument_list|(
name|emptyList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"didn't get expected warning headers [\ntest\nanother\nsome more\n]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|section
operator|.
name|checkWarningHeaders
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"test"
argument_list|,
literal|"some more"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"didn't get expected warning headers [\nanother\n]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// It is also an error if you get some warning you want and some you don't want
name|section
operator|.
name|setExpectedWarningHeaders
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"test"
argument_list|,
literal|"another"
argument_list|,
literal|"some more"
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|=
name|expectThrows
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|section
operator|.
name|checkWarningHeaders
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"test"
argument_list|,
literal|"cat"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"got unexpected warning headers [\ncat\n] didn't get expected warning headers [\nanother\nsome more\n]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

