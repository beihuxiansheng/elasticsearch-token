begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.rest.yaml.section
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|rest
operator|.
name|yaml
operator|.
name|section
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|logging
operator|.
name|DeprecationLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|yaml
operator|.
name|YamlXContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|MatcherAssert
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|nullValue
import|;
end_import

begin_class
DECL|class|DoSectionTests
specifier|public
class|class
name|DoSectionTests
extends|extends
name|AbstractClientYamlTestFragmentParserTestCase
block|{
DECL|method|testWarningHeaders
specifier|public
name|void
name|testWarningHeaders
parameter_list|()
throws|throws
name|IOException
block|{
block|{
specifier|final
name|DoSection
name|section
init|=
operator|new
name|DoSection
argument_list|(
operator|new
name|XContentLocation
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// No warning headers doesn't throw an exception
name|section
operator|.
name|checkWarningHeaders
argument_list|(
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|testHeader
init|=
name|DeprecationLogger
operator|.
name|formatWarning
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|anotherHeader
init|=
name|DeprecationLogger
operator|.
name|formatWarning
argument_list|(
literal|"another"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|someMoreHeader
init|=
name|DeprecationLogger
operator|.
name|formatWarning
argument_list|(
literal|"some more"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|catHeader
init|=
name|DeprecationLogger
operator|.
name|formatWarning
argument_list|(
literal|"cat"
argument_list|)
decl_stmt|;
comment|// Any warning headers fail
block|{
specifier|final
name|DoSection
name|section
init|=
operator|new
name|DoSection
argument_list|(
operator|new
name|XContentLocation
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|AssertionError
name|one
init|=
name|expectThrows
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|section
operator|.
name|checkWarningHeaders
argument_list|(
name|singletonList
argument_list|(
name|testHeader
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"got unexpected warning header [\n\t"
operator|+
name|testHeader
operator|+
literal|"\n]\n"
argument_list|,
name|one
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|AssertionError
name|multiple
init|=
name|expectThrows
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|section
operator|.
name|checkWarningHeaders
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|testHeader
argument_list|,
name|anotherHeader
argument_list|,
name|someMoreHeader
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"got unexpected warning headers [\n\t"
operator|+
name|testHeader
operator|+
literal|"\n\t"
operator|+
name|anotherHeader
operator|+
literal|"\n\t"
operator|+
name|someMoreHeader
operator|+
literal|"\n]\n"
argument_list|,
name|multiple
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// But not when we expect them
block|{
specifier|final
name|DoSection
name|section
init|=
operator|new
name|DoSection
argument_list|(
operator|new
name|XContentLocation
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|section
operator|.
name|setExpectedWarningHeaders
argument_list|(
name|singletonList
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|section
operator|.
name|checkWarningHeaders
argument_list|(
name|singletonList
argument_list|(
name|testHeader
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|DoSection
name|section
init|=
operator|new
name|DoSection
argument_list|(
operator|new
name|XContentLocation
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|section
operator|.
name|setExpectedWarningHeaders
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"test"
argument_list|,
literal|"another"
argument_list|,
literal|"some more"
argument_list|)
argument_list|)
expr_stmt|;
name|section
operator|.
name|checkWarningHeaders
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|testHeader
argument_list|,
name|anotherHeader
argument_list|,
name|someMoreHeader
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// But if you don't get some that you did expect, that is an error
block|{
specifier|final
name|DoSection
name|section
init|=
operator|new
name|DoSection
argument_list|(
operator|new
name|XContentLocation
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|section
operator|.
name|setExpectedWarningHeaders
argument_list|(
name|singletonList
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|AssertionError
name|e
init|=
name|expectThrows
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|section
operator|.
name|checkWarningHeaders
argument_list|(
name|emptyList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"did not get expected warning header [\n\ttest\n]\n"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
specifier|final
name|DoSection
name|section
init|=
operator|new
name|DoSection
argument_list|(
operator|new
name|XContentLocation
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|section
operator|.
name|setExpectedWarningHeaders
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"test"
argument_list|,
literal|"another"
argument_list|,
literal|"some more"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|AssertionError
name|multiple
init|=
name|expectThrows
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|section
operator|.
name|checkWarningHeaders
argument_list|(
name|emptyList
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"did not get expected warning headers [\n\ttest\n\tanother\n\tsome more\n]\n"
argument_list|,
name|multiple
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|AssertionError
name|one
init|=
name|expectThrows
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|section
operator|.
name|checkWarningHeaders
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|testHeader
argument_list|,
name|someMoreHeader
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"did not get expected warning header [\n\tanother\n]\n"
argument_list|,
name|one
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// It is also an error if you get some warning you want and some you don't want
block|{
specifier|final
name|DoSection
name|section
init|=
operator|new
name|DoSection
argument_list|(
operator|new
name|XContentLocation
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|section
operator|.
name|setExpectedWarningHeaders
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"test"
argument_list|,
literal|"another"
argument_list|,
literal|"some more"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|AssertionError
name|e
init|=
name|expectThrows
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|section
operator|.
name|checkWarningHeaders
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|testHeader
argument_list|,
name|catHeader
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"got unexpected warning header [\n\t"
operator|+
name|catHeader
operator|+
literal|"\n]\n"
operator|+
literal|"did not get expected warning headers [\n\tanother\n\tsome more\n]\n"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseDoSectionNoBody
specifier|public
name|void
name|testParseDoSectionNoBody
parameter_list|()
throws|throws
name|Exception
block|{
name|parser
operator|=
name|createParser
argument_list|(
name|YamlXContent
operator|.
name|yamlXContent
argument_list|,
literal|"get:\n"
operator|+
literal|"    index:    test_index\n"
operator|+
literal|"    type:    test_type\n"
operator|+
literal|"    id:        1"
argument_list|)
expr_stmt|;
name|DoSection
name|doSection
init|=
name|DoSection
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|ApiCallSection
name|apiCallSection
init|=
name|doSection
operator|.
name|getApiCallSection
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getApi
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"get"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getParams
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test_index"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test_type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|hasBody
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseDoSectionNoParamsNoBody
specifier|public
name|void
name|testParseDoSectionNoParamsNoBody
parameter_list|()
throws|throws
name|Exception
block|{
name|parser
operator|=
name|createParser
argument_list|(
name|YamlXContent
operator|.
name|yamlXContent
argument_list|,
literal|"cluster.node_info: {}"
argument_list|)
expr_stmt|;
name|DoSection
name|doSection
init|=
name|DoSection
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|ApiCallSection
name|apiCallSection
init|=
name|doSection
operator|.
name|getApiCallSection
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getApi
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"cluster.node_info"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getParams
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|hasBody
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseDoSectionWithJsonBody
specifier|public
name|void
name|testParseDoSectionWithJsonBody
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|body
init|=
literal|"{ \"include\": { \"field1\": \"v1\", \"field2\": \"v2\" }, \"count\": 1 }"
decl_stmt|;
name|parser
operator|=
name|createParser
argument_list|(
name|YamlXContent
operator|.
name|yamlXContent
argument_list|,
literal|"index:\n"
operator|+
literal|"    index:  test_1\n"
operator|+
literal|"    type:   test\n"
operator|+
literal|"    id:     1\n"
operator|+
literal|"    body:   "
operator|+
name|body
argument_list|)
expr_stmt|;
name|DoSection
name|doSection
init|=
name|DoSection
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|ApiCallSection
name|apiCallSection
init|=
name|doSection
operator|.
name|getApiCallSection
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getApi
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"index"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getParams
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test_1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|hasBody
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertJsonEquals
argument_list|(
name|apiCallSection
operator|.
name|getBodies
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseDoSectionWithJsonMultipleBodiesAsLongString
specifier|public
name|void
name|testParseDoSectionWithJsonMultipleBodiesAsLongString
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|bodies
index|[]
init|=
operator|new
name|String
index|[]
block|{
literal|"{ \"index\": { \"_index\":\"test_index\", \"_type\":\"test_type\", \"_id\":\"test_id\" } }\n"
block|,
literal|"{ \"f1\":\"v1\", \"f2\":42 }\n"
block|,
literal|"{ \"index\": { \"_index\":\"test_index2\", \"_type\":\"test_type2\", \"_id\":\"test_id2\" } }\n"
block|,
literal|"{ \"f1\":\"v2\", \"f2\":47 }\n"
block|}
decl_stmt|;
name|parser
operator|=
name|createParser
argument_list|(
name|YamlXContent
operator|.
name|yamlXContent
argument_list|,
literal|"bulk:\n"
operator|+
literal|"    refresh: true\n"
operator|+
literal|"    body: |\n"
operator|+
literal|"        "
operator|+
name|bodies
index|[
literal|0
index|]
operator|+
literal|"        "
operator|+
name|bodies
index|[
literal|1
index|]
operator|+
literal|"        "
operator|+
name|bodies
index|[
literal|2
index|]
operator|+
literal|"        "
operator|+
name|bodies
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|DoSection
name|doSection
init|=
name|DoSection
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|ApiCallSection
name|apiCallSection
init|=
name|doSection
operator|.
name|getApiCallSection
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getApi
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bulk"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getParams
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"refresh"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|hasBody
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getBodies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseDoSectionWithJsonMultipleBodiesRepeatedProperty
specifier|public
name|void
name|testParseDoSectionWithJsonMultipleBodiesRepeatedProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeFalse
argument_list|(
literal|"Test only makes sense if XContent parser doesn't have strict duplicate checks enabled"
argument_list|,
name|XContent
operator|.
name|isStrictDuplicateDetectionEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|bodies
init|=
operator|new
name|String
index|[]
block|{
literal|"{ \"index\": { \"_index\":\"test_index\", \"_type\":\"test_type\", \"_id\":\"test_id\" } }"
block|,
literal|"{ \"f1\":\"v1\", \"f2\":42 }"
block|,         }
decl_stmt|;
name|parser
operator|=
name|createParser
argument_list|(
name|YamlXContent
operator|.
name|yamlXContent
argument_list|,
literal|"bulk:\n"
operator|+
literal|"    refresh: true\n"
operator|+
literal|"    body: \n"
operator|+
literal|"        "
operator|+
name|bodies
index|[
literal|0
index|]
operator|+
literal|"\n"
operator|+
literal|"    body: \n"
operator|+
literal|"        "
operator|+
name|bodies
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|DoSection
name|doSection
init|=
name|DoSection
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|ApiCallSection
name|apiCallSection
init|=
name|doSection
operator|.
name|getApiCallSection
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getApi
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bulk"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getParams
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"refresh"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|hasBody
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getBodies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|bodies
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bodies
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertJsonEquals
argument_list|(
name|apiCallSection
operator|.
name|getBodies
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|bodies
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseDoSectionWithYamlBody
specifier|public
name|void
name|testParseDoSectionWithYamlBody
parameter_list|()
throws|throws
name|Exception
block|{
name|parser
operator|=
name|createParser
argument_list|(
name|YamlXContent
operator|.
name|yamlXContent
argument_list|,
literal|"search:\n"
operator|+
literal|"    body:\n"
operator|+
literal|"        \"_source\": [ include.field1, include.field2 ]\n"
operator|+
literal|"        \"query\": { \"match_all\": {} }"
argument_list|)
expr_stmt|;
name|String
name|body
init|=
literal|"{ \"_source\": [ \"include.field1\", \"include.field2\" ], \"query\": { \"match_all\": {} }}"
decl_stmt|;
name|DoSection
name|doSection
init|=
name|DoSection
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|ApiCallSection
name|apiCallSection
init|=
name|doSection
operator|.
name|getApiCallSection
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getApi
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"search"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getParams
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|hasBody
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getBodies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertJsonEquals
argument_list|(
name|apiCallSection
operator|.
name|getBodies
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseDoSectionWithYamlMultipleBodies
specifier|public
name|void
name|testParseDoSectionWithYamlMultipleBodies
parameter_list|()
throws|throws
name|Exception
block|{
name|parser
operator|=
name|createParser
argument_list|(
name|YamlXContent
operator|.
name|yamlXContent
argument_list|,
literal|"bulk:\n"
operator|+
literal|"    refresh: true\n"
operator|+
literal|"    body:\n"
operator|+
literal|"        - index:\n"
operator|+
literal|"            _index: test_index\n"
operator|+
literal|"            _type:  test_type\n"
operator|+
literal|"            _id:    test_id\n"
operator|+
literal|"        - f1: v1\n"
operator|+
literal|"          f2: 42\n"
operator|+
literal|"        - index:\n"
operator|+
literal|"            _index: test_index2\n"
operator|+
literal|"            _type:  test_type2\n"
operator|+
literal|"            _id:    test_id2\n"
operator|+
literal|"        - f1: v2\n"
operator|+
literal|"          f2: 47"
argument_list|)
expr_stmt|;
name|String
index|[]
name|bodies
init|=
operator|new
name|String
index|[
literal|4
index|]
decl_stmt|;
name|bodies
index|[
literal|0
index|]
operator|=
literal|"{\"index\": {\"_index\": \"test_index\", \"_type\":  \"test_type\", \"_id\": \"test_id\"}}"
expr_stmt|;
name|bodies
index|[
literal|1
index|]
operator|=
literal|"{ \"f1\":\"v1\", \"f2\": 42 }"
expr_stmt|;
name|bodies
index|[
literal|2
index|]
operator|=
literal|"{\"index\": {\"_index\": \"test_index2\", \"_type\":  \"test_type2\", \"_id\": \"test_id2\"}}"
expr_stmt|;
name|bodies
index|[
literal|3
index|]
operator|=
literal|"{ \"f1\":\"v2\", \"f2\": 47 }"
expr_stmt|;
name|DoSection
name|doSection
init|=
name|DoSection
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|ApiCallSection
name|apiCallSection
init|=
name|doSection
operator|.
name|getApiCallSection
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getApi
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bulk"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getParams
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"refresh"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|hasBody
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getBodies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|bodies
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bodies
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertJsonEquals
argument_list|(
name|apiCallSection
operator|.
name|getBodies
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|bodies
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseDoSectionWithYamlMultipleBodiesRepeatedProperty
specifier|public
name|void
name|testParseDoSectionWithYamlMultipleBodiesRepeatedProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeFalse
argument_list|(
literal|"Test only makes sense if XContent parser doesn't have strict duplicate checks enabled"
argument_list|,
name|XContent
operator|.
name|isStrictDuplicateDetectionEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|=
name|createParser
argument_list|(
name|YamlXContent
operator|.
name|yamlXContent
argument_list|,
literal|"bulk:\n"
operator|+
literal|"    refresh: true\n"
operator|+
literal|"    body:\n"
operator|+
literal|"        index:\n"
operator|+
literal|"            _index: test_index\n"
operator|+
literal|"            _type:  test_type\n"
operator|+
literal|"            _id:    test_id\n"
operator|+
literal|"    body:\n"
operator|+
literal|"        f1: v1\n"
operator|+
literal|"        f2: 42\n"
argument_list|)
expr_stmt|;
name|String
index|[]
name|bodies
init|=
operator|new
name|String
index|[
literal|2
index|]
decl_stmt|;
name|bodies
index|[
literal|0
index|]
operator|=
literal|"{\"index\": {\"_index\": \"test_index\", \"_type\":  \"test_type\", \"_id\": \"test_id\"}}"
expr_stmt|;
name|bodies
index|[
literal|1
index|]
operator|=
literal|"{ \"f1\":\"v1\", \"f2\": 42 }"
expr_stmt|;
name|DoSection
name|doSection
init|=
name|DoSection
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|ApiCallSection
name|apiCallSection
init|=
name|doSection
operator|.
name|getApiCallSection
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getApi
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"bulk"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getParams
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"refresh"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|hasBody
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getBodies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|bodies
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bodies
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertJsonEquals
argument_list|(
name|apiCallSection
operator|.
name|getBodies
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|bodies
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testParseDoSectionWithYamlBodyMultiGet
specifier|public
name|void
name|testParseDoSectionWithYamlBodyMultiGet
parameter_list|()
throws|throws
name|Exception
block|{
name|parser
operator|=
name|createParser
argument_list|(
name|YamlXContent
operator|.
name|yamlXContent
argument_list|,
literal|"mget:\n"
operator|+
literal|"    body:\n"
operator|+
literal|"        docs:\n"
operator|+
literal|"            - { _index: test_2, _type: test, _id: 1}\n"
operator|+
literal|"            - { _index: test_1, _type: none, _id: 1}"
argument_list|)
expr_stmt|;
name|String
name|body
init|=
literal|"{ \"docs\": [ "
operator|+
literal|"{\"_index\": \"test_2\", \"_type\":\"test\", \"_id\":1}, "
operator|+
literal|"{\"_index\": \"test_1\", \"_type\":\"none\", \"_id\":1} "
operator|+
literal|"]}"
decl_stmt|;
name|DoSection
name|doSection
init|=
name|DoSection
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|ApiCallSection
name|apiCallSection
init|=
name|doSection
operator|.
name|getApiCallSection
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getApi
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"mget"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getParams
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|hasBody
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getBodies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertJsonEquals
argument_list|(
name|apiCallSection
operator|.
name|getBodies
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseDoSectionWithBodyStringified
specifier|public
name|void
name|testParseDoSectionWithBodyStringified
parameter_list|()
throws|throws
name|Exception
block|{
name|parser
operator|=
name|createParser
argument_list|(
name|YamlXContent
operator|.
name|yamlXContent
argument_list|,
literal|"index:\n"
operator|+
literal|"    index:  test_1\n"
operator|+
literal|"    type:   test\n"
operator|+
literal|"    id:     1\n"
operator|+
literal|"    body:   \"{ \\\"_source\\\": true, \\\"query\\\": { \\\"match_all\\\": {} } }\""
argument_list|)
expr_stmt|;
name|DoSection
name|doSection
init|=
name|DoSection
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|ApiCallSection
name|apiCallSection
init|=
name|doSection
operator|.
name|getApiCallSection
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getApi
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"index"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getParams
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test_1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|hasBody
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getBodies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|//stringified body is taken as is
name|assertJsonEquals
argument_list|(
name|apiCallSection
operator|.
name|getBodies
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"{ \"_source\": true, \"query\": { \"match_all\": {} } }"
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseDoSectionWithBodiesStringifiedAndNot
specifier|public
name|void
name|testParseDoSectionWithBodiesStringifiedAndNot
parameter_list|()
throws|throws
name|Exception
block|{
name|parser
operator|=
name|createParser
argument_list|(
name|YamlXContent
operator|.
name|yamlXContent
argument_list|,
literal|"index:\n"
operator|+
literal|"    body:\n"
operator|+
literal|"        - \"{ \\\"_source\\\": true, \\\"query\\\": { \\\"match_all\\\": {} } }\"\n"
operator|+
literal|"        - { size: 100, query: { match_all: {} } }"
argument_list|)
expr_stmt|;
name|String
name|body
init|=
literal|"{ \"size\": 100, \"query\": { \"match_all\": {} } }"
decl_stmt|;
name|DoSection
name|doSection
init|=
name|DoSection
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|ApiCallSection
name|apiCallSection
init|=
name|doSection
operator|.
name|getApiCallSection
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getApi
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"index"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getParams
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|hasBody
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|apiCallSection
operator|.
name|getBodies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|//stringified body is taken as is
name|assertJsonEquals
argument_list|(
name|apiCallSection
operator|.
name|getBodies
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"{ \"_source\": true, \"query\": { \"match_all\": {} } }"
argument_list|)
expr_stmt|;
name|assertJsonEquals
argument_list|(
name|apiCallSection
operator|.
name|getBodies
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseDoSectionWithCatch
specifier|public
name|void
name|testParseDoSectionWithCatch
parameter_list|()
throws|throws
name|Exception
block|{
name|parser
operator|=
name|createParser
argument_list|(
name|YamlXContent
operator|.
name|yamlXContent
argument_list|,
literal|"catch: missing\n"
operator|+
literal|"indices.get_warmer:\n"
operator|+
literal|"    index: test_index\n"
operator|+
literal|"    name: test_warmer"
argument_list|)
expr_stmt|;
name|DoSection
name|doSection
init|=
name|DoSection
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getCatch
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"missing"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getApiCallSection
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getApiCallSection
argument_list|()
operator|.
name|getApi
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"indices.get_warmer"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getApiCallSection
argument_list|()
operator|.
name|getParams
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getApiCallSection
argument_list|()
operator|.
name|hasBody
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseDoSectionWithHeaders
specifier|public
name|void
name|testParseDoSectionWithHeaders
parameter_list|()
throws|throws
name|Exception
block|{
name|parser
operator|=
name|createParser
argument_list|(
name|YamlXContent
operator|.
name|yamlXContent
argument_list|,
literal|"headers:\n"
operator|+
literal|"    Authorization: \"thing one\"\n"
operator|+
literal|"    Content-Type: \"application/json\"\n"
operator|+
literal|"indices.get_warmer:\n"
operator|+
literal|"    index: test_index\n"
operator|+
literal|"    name: test_warmer"
argument_list|)
expr_stmt|;
name|DoSection
name|doSection
init|=
name|DoSection
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getApiCallSection
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getApiCallSection
argument_list|()
operator|.
name|getApi
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"indices.get_warmer"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getApiCallSection
argument_list|()
operator|.
name|getParams
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getApiCallSection
argument_list|()
operator|.
name|hasBody
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getApiCallSection
argument_list|()
operator|.
name|getHeaders
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getApiCallSection
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getApiCallSection
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"Authorization"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"thing one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getApiCallSection
argument_list|()
operator|.
name|getHeaders
argument_list|()
operator|.
name|get
argument_list|(
literal|"Content-Type"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"application/json"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseDoSectionWithoutClientCallSection
specifier|public
name|void
name|testParseDoSectionWithoutClientCallSection
parameter_list|()
throws|throws
name|Exception
block|{
name|parser
operator|=
name|createParser
argument_list|(
name|YamlXContent
operator|.
name|yamlXContent
argument_list|,
literal|"catch: missing\n"
argument_list|)
expr_stmt|;
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|DoSection
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"client call section is mandatory within a do section"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseDoSectionMultivaluedField
specifier|public
name|void
name|testParseDoSectionMultivaluedField
parameter_list|()
throws|throws
name|Exception
block|{
name|parser
operator|=
name|createParser
argument_list|(
name|YamlXContent
operator|.
name|yamlXContent
argument_list|,
literal|"indices.get_field_mapping:\n"
operator|+
literal|"        index: test_index\n"
operator|+
literal|"        type: test_type\n"
operator|+
literal|"        field: [ text , text1 ]"
argument_list|)
expr_stmt|;
name|DoSection
name|doSection
init|=
name|DoSection
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getCatch
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getApiCallSection
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getApiCallSection
argument_list|()
operator|.
name|getApi
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"indices.get_field_mapping"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getApiCallSection
argument_list|()
operator|.
name|getParams
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getApiCallSection
argument_list|()
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test_index"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getApiCallSection
argument_list|()
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test_type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getApiCallSection
argument_list|()
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"text,text1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getApiCallSection
argument_list|()
operator|.
name|hasBody
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getApiCallSection
argument_list|()
operator|.
name|getBodies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testParseDoSectionExpectedWarnings
specifier|public
name|void
name|testParseDoSectionExpectedWarnings
parameter_list|()
throws|throws
name|Exception
block|{
name|parser
operator|=
name|createParser
argument_list|(
name|YamlXContent
operator|.
name|yamlXContent
argument_list|,
literal|"indices.get_field_mapping:\n"
operator|+
literal|"        index: test_index\n"
operator|+
literal|"        type: test_type\n"
operator|+
literal|"warnings:\n"
operator|+
literal|"    - some test warning they are typically pretty long\n"
operator|+
literal|"    - some other test warning somtimes they have [in] them"
argument_list|)
expr_stmt|;
name|DoSection
name|doSection
init|=
name|DoSection
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getCatch
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getApiCallSection
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getApiCallSection
argument_list|()
operator|.
name|getApi
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|"indices.get_field_mapping"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getApiCallSection
argument_list|()
operator|.
name|getParams
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getApiCallSection
argument_list|()
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"index"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test_index"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getApiCallSection
argument_list|()
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"type"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"test_type"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getApiCallSection
argument_list|()
operator|.
name|hasBody
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getApiCallSection
argument_list|()
operator|.
name|getBodies
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getExpectedWarningHeaders
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"some test warning they are typically pretty long"
argument_list|,
literal|"some other test warning somtimes they have [in] them"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|=
name|createParser
argument_list|(
name|YamlXContent
operator|.
name|yamlXContent
argument_list|,
literal|"indices.get_field_mapping:\n"
operator|+
literal|"        index: test_index\n"
operator|+
literal|"warnings:\n"
operator|+
literal|"    - just one entry this time"
argument_list|)
expr_stmt|;
name|doSection
operator|=
name|DoSection
operator|.
name|parse
argument_list|(
name|parser
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getCatch
argument_list|()
argument_list|,
name|nullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getApiCallSection
argument_list|()
argument_list|,
name|notNullValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|doSection
operator|.
name|getExpectedWarningHeaders
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|singletonList
argument_list|(
literal|"just one entry this time"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertJsonEquals
specifier|private
name|void
name|assertJsonEquals
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|actual
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|expectedMap
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|YamlXContent
operator|.
name|yamlXContent
argument_list|,
name|expected
argument_list|)
init|)
block|{
name|expectedMap
operator|=
name|parser
operator|.
name|mapOrdered
argument_list|()
expr_stmt|;
block|}
name|MatcherAssert
operator|.
name|assertThat
argument_list|(
name|actual
argument_list|,
name|equalTo
argument_list|(
name|expectedMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

