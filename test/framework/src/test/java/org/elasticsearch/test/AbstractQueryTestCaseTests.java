begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|collect
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|util
operator|.
name|set
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|AbstractQueryTestCase
operator|.
name|alterateQueries
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|allOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasEntry
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|notNullValue
import|;
end_import

begin_comment
comment|/**  * Various test for {@link org.elasticsearch.test.AbstractQueryTestCase}  */
end_comment

begin_class
DECL|class|AbstractQueryTestCaseTests
specifier|public
class|class
name|AbstractQueryTestCaseTests
extends|extends
name|ESTestCase
block|{
DECL|method|testAlterateQueries
specifier|public
name|void
name|testAlterateQueries
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|>
name|alterations
init|=
name|alterateQueries
argument_list|(
name|singleton
argument_list|(
literal|"{\"field\": \"value\"}"
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertAlterations
argument_list|(
name|alterations
argument_list|,
name|allOf
argument_list|(
name|notNullValue
argument_list|()
argument_list|,
name|hasEntry
argument_list|(
literal|"{\"newField\":{\"field\":\"value\"}}"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|alterations
operator|=
name|alterateQueries
argument_list|(
name|singleton
argument_list|(
literal|"{\"term\":{\"field\": \"value\"}}"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertAlterations
argument_list|(
name|alterations
argument_list|,
name|allOf
argument_list|(
name|hasEntry
argument_list|(
literal|"{\"newField\":{\"term\":{\"field\":\"value\"}}}"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|hasEntry
argument_list|(
literal|"{\"term\":{\"newField\":{\"field\":\"value\"}}}"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|alterations
operator|=
name|alterateQueries
argument_list|(
name|singleton
argument_list|(
literal|"{\"bool\":{\"must\": [{\"match\":{\"field\":\"value\"}}]}}"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertAlterations
argument_list|(
name|alterations
argument_list|,
name|allOf
argument_list|(
name|hasEntry
argument_list|(
literal|"{\"newField\":{\"bool\":{\"must\":[{\"match\":{\"field\":\"value\"}}]}}}"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|hasEntry
argument_list|(
literal|"{\"bool\":{\"newField\":{\"must\":[{\"match\":{\"field\":\"value\"}}]}}}"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|hasEntry
argument_list|(
literal|"{\"bool\":{\"must\":[{\"newField\":{\"match\":{\"field\":\"value\"}}}]}}"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|hasEntry
argument_list|(
literal|"{\"bool\":{\"must\":[{\"match\":{\"newField\":{\"field\":\"value\"}}}]}}"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|alterations
operator|=
name|alterateQueries
argument_list|(
name|singleton
argument_list|(
literal|"{\"function_score\":"
operator|+
literal|"{\"query\": {\"term\":{\"foo\": \"bar\"}}, \"script_score\": {\"script\":\"a + 1\", \"params\": {\"a\":0}}}}"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertAlterations
argument_list|(
name|alterations
argument_list|,
name|allOf
argument_list|(
name|hasEntry
argument_list|(
literal|"{\"newField\":{\"function_score\":{\"query\":{\"term\":{\"foo\":\"bar\"}},\"script_score\":{\"script\":\"a + "
operator|+
literal|"1\",\"params\":{\"a\":0}}}}}"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|hasEntry
argument_list|(
literal|"{\"function_score\":{\"newField\":{\"query\":{\"term\":{\"foo\":\"bar\"}},\"script_score\":{\"script\":\"a + "
operator|+
literal|"1\",\"params\":{\"a\":0}}}}}"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|hasEntry
argument_list|(
literal|"{\"function_score\":{\"query\":{\"newField\":{\"term\":{\"foo\":\"bar\"}}},\"script_score\":{\"script\":\"a + "
operator|+
literal|"1\",\"params\":{\"a\":0}}}}"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|hasEntry
argument_list|(
literal|"{\"function_score\":{\"query\":{\"term\":{\"newField\":{\"foo\":\"bar\"}}},\"script_score\":{\"script\":\"a + "
operator|+
literal|"1\",\"params\":{\"a\":0}}}}"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|hasEntry
argument_list|(
literal|"{\"function_score\":{\"query\":{\"term\":{\"foo\":\"bar\"}},\"script_score\":{\"newField\":{\"script\":\"a + "
operator|+
literal|"1\",\"params\":{\"a\":0}}}}}"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|hasEntry
argument_list|(
literal|"{\"function_score\":{\"query\":{\"term\":{\"foo\":\"bar\"}},\"script_score\":{\"script\":\"a + 1\","
operator|+
literal|"\"params\":{\"newField\":{\"a\":0}}}}}"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAlterateQueriesWithArbitraryContent
specifier|public
name|void
name|testAlterateQueriesWithArbitraryContent
parameter_list|()
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|arbitraryContentHolders
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"params"
argument_list|,
literal|"doc"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|queries
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
literal|"{\"query\":{\"script\":\"test\",\"params\":{\"foo\":\"bar\"}}}"
argument_list|,
literal|"{\"query\":{\"more_like_this\":{\"fields\":[\"a\",\"b\"],\"like\":{\"doc\":{\"c\":\"d\"}}}}}"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|>
name|alterations
init|=
name|alterateQueries
argument_list|(
name|queries
argument_list|,
name|arbitraryContentHolders
argument_list|)
decl_stmt|;
name|assertAlterations
argument_list|(
name|alterations
argument_list|,
name|allOf
argument_list|(
name|hasEntry
argument_list|(
literal|"{\"newField\":{\"query\":{\"script\":\"test\",\"params\":{\"foo\":\"bar\"}}}}"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|hasEntry
argument_list|(
literal|"{\"query\":{\"newField\":{\"script\":\"test\",\"params\":{\"foo\":\"bar\"}}}}"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|hasEntry
argument_list|(
literal|"{\"query\":{\"script\":\"test\",\"params\":{\"newField\":{\"foo\":\"bar\"}}}}"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertAlterations
argument_list|(
name|alterations
argument_list|,
name|allOf
argument_list|(
name|hasEntry
argument_list|(
literal|"{\"newField\":{\"query\":{\"more_like_this\":{\"fields\":[\"a\",\"b\"],\"like\":{\"doc\":{\"c\":\"d\"}}}}}}"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|hasEntry
argument_list|(
literal|"{\"query\":{\"newField\":{\"more_like_this\":{\"fields\":[\"a\",\"b\"],\"like\":{\"doc\":{\"c\":\"d\"}}}}}}"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|hasEntry
argument_list|(
literal|"{\"query\":{\"more_like_this\":{\"newField\":{\"fields\":[\"a\",\"b\"],\"like\":{\"doc\":{\"c\":\"d\"}}}}}}"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|hasEntry
argument_list|(
literal|"{\"query\":{\"more_like_this\":{\"fields\":[\"a\",\"b\"],\"like\":{\"newField\":{\"doc\":{\"c\":\"d\"}}}}}}"
argument_list|,
literal|true
argument_list|)
argument_list|,
name|hasEntry
argument_list|(
literal|"{\"query\":{\"more_like_this\":{\"fields\":[\"a\",\"b\"],\"like\":{\"doc\":{\"newField\":{\"c\":\"d\"}}}}}}"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAlterations
specifier|private
specifier|static
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
name|void
name|assertAlterations
parameter_list|(
name|List
argument_list|<
name|Tuple
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|alterations
parameter_list|,
name|Matcher
argument_list|<
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|matcher
parameter_list|)
block|{
name|assertThat
argument_list|(
name|alterations
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|Tuple
operator|::
name|v1
argument_list|,
name|Tuple
operator|::
name|v2
argument_list|)
argument_list|)
argument_list|,
name|matcher
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

