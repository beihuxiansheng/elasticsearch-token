begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|test
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|bytes
operator|.
name|BytesReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|RandomObjects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|greaterThan
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasSize
import|;
end_import

begin_class
DECL|class|ESTestCaseTests
specifier|public
class|class
name|ESTestCaseTests
extends|extends
name|ESTestCase
block|{
DECL|method|testExpectThrows
specifier|public
name|void
name|testExpectThrows
parameter_list|()
block|{
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bad arg"
argument_list|)
throw|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bad arg"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"bad state"
argument_list|)
throw|;
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected assertion error"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|assertFailed
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Unexpected exception type, expected IllegalArgumentException"
argument_list|,
name|assertFailed
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|assertFailed
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bad state"
argument_list|,
name|assertFailed
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected assertion error"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|assertFailed
parameter_list|)
block|{
name|assertNull
argument_list|(
name|assertFailed
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected exception IllegalArgumentException"
argument_list|,
name|assertFailed
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testShuffleMap
specifier|public
name|void
name|testShuffleMap
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|BytesReference
name|source
init|=
name|RandomObjects
operator|.
name|randomSource
argument_list|(
name|random
argument_list|()
argument_list|,
name|xContentType
argument_list|,
literal|5
argument_list|)
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|source
argument_list|)
init|)
block|{
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|initialMap
init|=
operator|(
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|parser
operator|.
name|mapOrdered
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|distinctKeys
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|shuffledMap
init|=
name|shuffleMap
argument_list|(
name|initialMap
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"both maps should contain the same mappings"
argument_list|,
name|initialMap
argument_list|,
name|shuffledMap
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|shuffledKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|shuffledMap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|distinctKeys
operator|.
name|add
argument_list|(
name|shuffledKeys
argument_list|)
expr_stmt|;
block|}
comment|//out of 10 shuffling runs we expect to have at least more than 1 distinct output.
comment|//This is to make sure that we actually do the shuffling
name|assertThat
argument_list|(
name|distinctKeys
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testShuffleXContentExcludeFields
specifier|public
name|void
name|testShuffleXContentExcludeFields
parameter_list|()
throws|throws
name|IOException
block|{
name|XContentType
name|xContentType
init|=
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|XContentBuilder
name|builder
init|=
name|XContentBuilder
operator|.
name|builder
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|)
init|)
block|{
name|builder
operator|.
name|startObject
argument_list|()
expr_stmt|;
block|{
name|builder
operator|.
name|field
argument_list|(
literal|"field1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"field2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"object1"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"inner1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"inner2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"inner3"
argument_list|,
literal|"value3"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|{
name|builder
operator|.
name|startObject
argument_list|(
literal|"object2"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"inner4"
argument_list|,
literal|"value4"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"inner5"
argument_list|,
literal|"value5"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|field
argument_list|(
literal|"inner6"
argument_list|,
literal|"value6"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|BytesReference
name|bytes
init|=
name|builder
operator|.
name|bytes
argument_list|()
decl_stmt|;
specifier|final
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|initialMap
decl_stmt|;
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|bytes
argument_list|)
init|)
block|{
name|initialMap
operator|=
operator|(
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|parser
operator|.
name|mapOrdered
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|expectedInnerKeys1
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"inner1"
argument_list|,
literal|"inner2"
argument_list|,
literal|"inner3"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|distinctTopLevelKeys
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|distinctInnerKeys2
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
try|try
init|(
name|XContentParser
name|parser
init|=
name|createParser
argument_list|(
name|xContentType
operator|.
name|xContent
argument_list|()
argument_list|,
name|bytes
argument_list|)
init|)
block|{
try|try
init|(
name|XContentBuilder
name|shuffledBuilder
init|=
name|shuffleXContent
argument_list|(
name|parser
argument_list|,
name|randomBoolean
argument_list|()
argument_list|,
literal|"object1"
argument_list|)
init|)
block|{
try|try
init|(
name|XContentParser
name|shuffledParser
init|=
name|createParser
argument_list|(
name|shuffledBuilder
argument_list|)
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|shuffledMap
init|=
name|shuffledParser
operator|.
name|mapOrdered
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"both maps should contain the same mappings"
argument_list|,
name|initialMap
argument_list|,
name|shuffledMap
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|shuffledKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|shuffledMap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|distinctTopLevelKeys
operator|.
name|add
argument_list|(
name|shuffledKeys
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|innerMap1
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|shuffledMap
operator|.
name|get
argument_list|(
literal|"object1"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|actualInnerKeys1
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|innerMap1
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"object1 should have been left untouched"
argument_list|,
name|expectedInnerKeys1
argument_list|,
name|actualInnerKeys1
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|innerMap2
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|shuffledMap
operator|.
name|get
argument_list|(
literal|"object2"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|actualInnerKeys2
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|innerMap2
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|distinctInnerKeys2
operator|.
name|add
argument_list|(
name|actualInnerKeys2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//out of 10 shuffling runs we expect to have at least more than 1 distinct output for both top level keys and inner object2
name|assertThat
argument_list|(
name|distinctTopLevelKeys
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|distinctInnerKeys2
operator|.
name|size
argument_list|()
argument_list|,
name|greaterThan
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testRandomUniqueNotUnique
specifier|public
name|void
name|testRandomUniqueNotUnique
parameter_list|()
block|{
name|assertThat
argument_list|(
name|randomUnique
argument_list|(
parameter_list|()
lambda|->
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|,
name|hasSize
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomUniqueTotallyUnique
specifier|public
name|void
name|testRandomUniqueTotallyUnique
parameter_list|()
block|{
name|AtomicInteger
name|i
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|randomUnique
argument_list|(
name|i
operator|::
name|incrementAndGet
argument_list|,
literal|100
argument_list|)
argument_list|,
name|hasSize
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandomUniqueNormalUsageAlwayMoreThanOne
specifier|public
name|void
name|testRandomUniqueNormalUsageAlwayMoreThanOne
parameter_list|()
block|{
name|assertThat
argument_list|(
name|randomUnique
argument_list|(
parameter_list|()
lambda|->
name|randomAlphaOfLengthBetween
argument_list|(
literal|1
argument_list|,
literal|20
argument_list|)
argument_list|,
literal|10
argument_list|)
argument_list|,
name|hasSize
argument_list|(
name|greaterThan
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

