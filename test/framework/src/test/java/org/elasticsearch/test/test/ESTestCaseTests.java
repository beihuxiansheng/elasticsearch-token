begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.test
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|test
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|AssertionFailedError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|ESTestCaseTests
specifier|public
class|class
name|ESTestCaseTests
extends|extends
name|ESTestCase
block|{
DECL|method|testExpectThrows
specifier|public
name|void
name|testExpectThrows
parameter_list|()
block|{
name|IllegalArgumentException
name|e
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"bad arg"
argument_list|)
throw|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bad arg"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"bad state"
argument_list|)
throw|;
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected assertion error"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|assertFailed
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Unexpected exception type, expected IllegalArgumentException"
argument_list|,
name|assertFailed
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|assertFailed
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bad state"
argument_list|,
name|assertFailed
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"expected assertion error"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionFailedError
name|assertFailed
parameter_list|)
block|{
name|assertNull
argument_list|(
name|assertFailed
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected exception IllegalArgumentException"
argument_list|,
name|assertFailed
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testShuffleXContent
specifier|public
name|void
name|testShuffleXContent
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|randomStringObjectMap
init|=
name|randomStringObjectMap
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|XContentBuilder
name|builder
init|=
name|XContentFactory
operator|.
name|contentBuilder
argument_list|(
name|randomFrom
argument_list|(
name|XContentType
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|builder
operator|.
name|map
argument_list|(
name|randomStringObjectMap
argument_list|)
expr_stmt|;
name|XContentBuilder
name|shuffleXContent
init|=
name|shuffleXContent
argument_list|(
name|builder
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
decl_stmt|;
name|XContentParser
name|parser
init|=
name|XContentFactory
operator|.
name|xContent
argument_list|(
name|shuffleXContent
operator|.
name|bytes
argument_list|()
argument_list|)
operator|.
name|createParser
argument_list|(
name|shuffleXContent
operator|.
name|bytes
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|resultMap
init|=
name|parser
operator|.
name|map
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"both maps should contain the same mappings"
argument_list|,
name|randomStringObjectMap
argument_list|,
name|resultMap
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
literal|"Both builders string representations should be different"
argument_list|,
name|builder
operator|.
name|bytes
argument_list|()
argument_list|,
name|shuffleXContent
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|randomStringObjectMap
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|randomStringObjectMap
parameter_list|(
name|int
name|depth
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|entries
init|=
name|randomInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|randomAsciiOfLengthBetween
argument_list|(
literal|5
argument_list|,
literal|15
argument_list|)
decl_stmt|;
name|int
name|suprise
init|=
name|randomIntBetween
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|suprise
condition|)
block|{
case|case
literal|0
case|:
name|result
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|randomUnicodeOfCodepointLength
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|result
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|randomInt
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|result
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|randomDoubleBetween
argument_list|(
operator|-
literal|100.0
argument_list|,
literal|100.0
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|result
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|randomBoolean
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|List
argument_list|<
name|String
argument_list|>
name|stringList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|randomInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
name|size
condition|;
name|s
operator|++
control|)
block|{
name|stringList
operator|.
name|add
argument_list|(
name|randomUnicodeOfCodepointLength
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|stringList
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unexpected random option: "
operator|+
name|suprise
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|depth
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|randomAsciiOfLengthBetween
argument_list|(
literal|5
argument_list|,
literal|15
argument_list|)
argument_list|,
name|randomStringObjectMap
argument_list|(
name|depth
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

