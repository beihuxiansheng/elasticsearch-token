begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.search
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|action
operator|.
name|search
operator|.
name|SearchType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|metadata
operator|.
name|IndexMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|lucene
operator|.
name|search
operator|.
name|Queries
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|settings
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|IndexSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryShardContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|search
operator|.
name|internal
operator|.
name|SearchContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|ESTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|TestSearchContext
import|;
end_import

begin_class
DECL|class|MockSearchServiceTests
specifier|public
class|class
name|MockSearchServiceTests
extends|extends
name|ESTestCase
block|{
DECL|method|testAssertNoInFlightContext
specifier|public
name|void
name|testAssertNoInFlightContext
parameter_list|()
block|{
name|SearchContext
name|s
init|=
operator|new
name|TestSearchContext
argument_list|(
operator|new
name|QueryShardContext
argument_list|(
operator|new
name|IndexSettings
argument_list|(
name|IndexMetaData
operator|.
name|PROTO
argument_list|,
name|Settings
operator|.
name|EMPTY
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|SearchShardTarget
name|shardTarget
parameter_list|()
block|{
return|return
operator|new
name|SearchShardTarget
argument_list|(
literal|"node"
argument_list|,
operator|new
name|Index
argument_list|(
literal|"idx"
argument_list|,
literal|"ignored"
argument_list|)
argument_list|,
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SearchType
name|searchType
parameter_list|()
block|{
return|return
name|SearchType
operator|.
name|DEFAULT
return|;
block|}
annotation|@
name|Override
specifier|public
name|Query
name|query
parameter_list|()
block|{
return|return
name|Queries
operator|.
name|newMatchAllQuery
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|MockSearchService
operator|.
name|addActiveContext
argument_list|(
name|s
argument_list|)
expr_stmt|;
try|try
block|{
name|Throwable
name|e
init|=
name|expectThrows
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|MockSearchService
operator|.
name|assertNoInFlightContext
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"There are still 1 in-flight contexts. The first one's creation site is listed as the cause of this exception."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|e
operator|.
name|getCause
argument_list|()
expr_stmt|;
comment|// The next line with throw an exception if the date looks wrong
name|assertEquals
argument_list|(
literal|"[node][idx][0] query=[*:*]"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MockSearchService
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|e
operator|.
name|getStackTrace
argument_list|()
index|[
literal|0
index|]
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MockSearchServiceTests
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|e
operator|.
name|getStackTrace
argument_list|()
index|[
literal|1
index|]
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|MockSearchService
operator|.
name|removeActiveContext
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

