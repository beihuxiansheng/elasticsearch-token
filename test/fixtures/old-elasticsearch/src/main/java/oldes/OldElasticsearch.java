begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|oldes
package|package
name|oldes
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Starts a version of Elasticsearch that has been unzipped into an empty directory,  * instructing it to ask the OS for an unused port, grepping the logs for the port  * it actually got, and writing a {@code ports} file with the port. This is only  * required for versions of Elasticsearch before 5.0 because they do not support  * writing a "ports" file.  */
end_comment

begin_class
DECL|class|OldElasticsearch
specifier|public
class|class
name|OldElasticsearch
block|{
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|Path
name|baseDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Path
name|unzipDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
comment|// 0.90 must be explicitly foregrounded
name|boolean
name|explicitlyForeground
decl_stmt|;
switch|switch
condition|(
name|args
index|[
literal|2
index|]
condition|)
block|{
case|case
literal|"true"
case|:
name|explicitlyForeground
operator|=
literal|true
expr_stmt|;
break|break;
case|case
literal|"false"
case|:
name|explicitlyForeground
operator|=
literal|false
expr_stmt|;
break|break;
default|default:
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"the third argument must be true or false"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
name|Iterator
argument_list|<
name|Path
argument_list|>
name|children
init|=
name|Files
operator|.
name|list
argument_list|(
name|unzipDir
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
literal|false
operator|==
name|children
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"expected the es directory to contain a single child directory but contained none."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|Path
name|esDir
init|=
name|children
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"expected the es directory to contains a single child directory but contained ["
operator|+
name|esDir
operator|+
literal|"] and ["
operator|+
name|children
operator|.
name|next
argument_list|()
operator|+
literal|"]."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|false
operator|==
name|Files
operator|.
name|isDirectory
argument_list|(
name|esDir
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"expected the es directory to contains a single child directory but contained a single child file."
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|Path
name|bin
init|=
name|esDir
operator|.
name|resolve
argument_list|(
literal|"bin"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"elasticsearch"
operator|+
operator|(
name|Constants
operator|.
name|WINDOWS
condition|?
literal|".bat"
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
name|Path
name|config
init|=
name|esDir
operator|.
name|resolve
argument_list|(
literal|"config"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"elasticsearch.yml"
argument_list|)
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|config
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"http.port: 0"
argument_list|,
literal|"transport.tcp.port: 0"
argument_list|,
literal|"network.host: 127.0.0.1"
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|command
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|command
operator|.
name|add
argument_list|(
name|bin
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|explicitlyForeground
condition|)
block|{
name|command
operator|.
name|add
argument_list|(
literal|"-f"
argument_list|)
expr_stmt|;
block|}
name|command
operator|.
name|add
argument_list|(
literal|"-p"
argument_list|)
expr_stmt|;
name|command
operator|.
name|add
argument_list|(
literal|"../pid"
argument_list|)
expr_stmt|;
name|ProcessBuilder
name|subprocess
init|=
operator|new
name|ProcessBuilder
argument_list|(
name|command
argument_list|)
decl_stmt|;
name|Process
name|process
init|=
name|subprocess
operator|.
name|start
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Running "
operator|+
name|command
argument_list|)
expr_stmt|;
name|int
name|pid
init|=
literal|0
decl_stmt|;
name|int
name|port
init|=
literal|0
decl_stmt|;
name|Pattern
name|pidPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"pid\\[(\\d+)\\]"
argument_list|)
decl_stmt|;
name|Pattern
name|httpPortPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\[http\\s+\\].+bound_address.+127\\.0\\.0\\.1:(\\d+)"
argument_list|)
decl_stmt|;
try|try
init|(
name|BufferedReader
name|stdout
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|process
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
init|)
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|stdout
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
operator|&&
operator|(
name|pid
operator|==
literal|0
operator|||
name|port
operator|==
literal|0
operator|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|Matcher
name|m
init|=
name|pidPattern
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|pid
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Found pid:  "
operator|+
name|pid
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|m
operator|=
name|httpPortPattern
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Found port:  "
operator|+
name|port
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
if|if
condition|(
name|port
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"port not found"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|Path
name|tmp
init|=
name|Files
operator|.
name|createTempFile
argument_list|(
name|baseDir
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|tmp
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|port
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|move
argument_list|(
name|tmp
argument_list|,
name|baseDir
operator|.
name|resolve
argument_list|(
literal|"ports"
argument_list|)
argument_list|,
name|StandardCopyOption
operator|.
name|ATOMIC_MOVE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

