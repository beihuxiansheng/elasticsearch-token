begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|example
package|package
name|example
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Inet6Address
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|AsynchronousServerSocketChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|AsynchronousSocketChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|CompletionHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardCopyOption
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_comment
comment|/** Crappy example test fixture that responds with TEST and closes the connection */
end_comment

begin_class
DECL|class|ExampleTestFixture
specifier|public
class|class
name|ExampleTestFixture
block|{
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ExampleTestFixture<logDirectory>"
argument_list|)
throw|;
block|}
name|Path
name|dir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|AsynchronousServerSocketChannel
name|server
init|=
name|AsynchronousServerSocketChannel
operator|.
name|open
argument_list|()
operator|.
name|bind
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|InetAddress
operator|.
name|getLoopbackAddress
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
comment|// write pid file
name|Path
name|tmp
init|=
name|Files
operator|.
name|createTempFile
argument_list|(
name|dir
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|pid
init|=
name|ManagementFactory
operator|.
name|getRuntimeMXBean
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|split
argument_list|(
literal|"@"
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|tmp
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|pid
argument_list|)
argument_list|)
expr_stmt|;
name|Files
operator|.
name|move
argument_list|(
name|tmp
argument_list|,
name|dir
operator|.
name|resolve
argument_list|(
literal|"pid"
argument_list|)
argument_list|,
name|StandardCopyOption
operator|.
name|ATOMIC_MOVE
argument_list|)
expr_stmt|;
comment|// write port file
name|tmp
operator|=
name|Files
operator|.
name|createTempFile
argument_list|(
name|dir
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|InetSocketAddress
name|bound
init|=
operator|(
name|InetSocketAddress
operator|)
name|server
operator|.
name|getLocalAddress
argument_list|()
decl_stmt|;
if|if
condition|(
name|bound
operator|.
name|getAddress
argument_list|()
operator|instanceof
name|Inet6Address
condition|)
block|{
name|Files
operator|.
name|write
argument_list|(
name|tmp
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"["
operator|+
name|bound
operator|.
name|getHostString
argument_list|()
operator|+
literal|"]:"
operator|+
name|bound
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Files
operator|.
name|write
argument_list|(
name|tmp
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|bound
operator|.
name|getHostString
argument_list|()
operator|+
literal|":"
operator|+
name|bound
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Files
operator|.
name|move
argument_list|(
name|tmp
argument_list|,
name|dir
operator|.
name|resolve
argument_list|(
literal|"ports"
argument_list|)
argument_list|,
name|StandardCopyOption
operator|.
name|ATOMIC_MOVE
argument_list|)
expr_stmt|;
comment|// go time
name|server
operator|.
name|accept
argument_list|(
literal|null
argument_list|,
operator|new
name|CompletionHandler
argument_list|<
name|AsynchronousSocketChannel
argument_list|,
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|completed
parameter_list|(
name|AsynchronousSocketChannel
name|socket
parameter_list|,
name|Void
name|attachment
parameter_list|)
block|{
name|server
operator|.
name|accept
argument_list|(
literal|null
argument_list|,
name|this
argument_list|)
expr_stmt|;
try|try
init|(
name|AsynchronousSocketChannel
name|ch
init|=
name|socket
init|)
block|{
name|ch
operator|.
name|write
argument_list|(
name|ByteBuffer
operator|.
name|wrap
argument_list|(
literal|"TEST\n"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|failed
parameter_list|(
name|Throwable
name|exc
parameter_list|,
name|Void
name|attachment
parameter_list|)
block|{}
block|}
argument_list|)
expr_stmt|;
comment|// wait forever, until you kill me
name|Thread
operator|.
name|sleep
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

