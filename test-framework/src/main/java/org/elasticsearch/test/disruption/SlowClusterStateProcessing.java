begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to Elasticsearch under one or more contributor  * license agreements. See the NOTICE file distributed with  * this work for additional information regarding copyright  * ownership. Elasticsearch licenses this file to you under  * the Apache License, Version 2.0 (the "License"); you may  * not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
DECL|package|org.elasticsearch.test.disruption
package|package
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|disruption
package|;
end_package

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|cluster
operator|.
name|ClusterStateUpdateTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|Priority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|unit
operator|.
name|TimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|test
operator|.
name|InternalTestCluster
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_class
DECL|class|SlowClusterStateProcessing
specifier|public
class|class
name|SlowClusterStateProcessing
extends|extends
name|SingleNodeDisruption
block|{
DECL|field|disrupting
specifier|volatile
name|boolean
name|disrupting
decl_stmt|;
DECL|field|worker
specifier|volatile
name|Thread
name|worker
decl_stmt|;
DECL|field|intervalBetweenDelaysMin
specifier|final
name|long
name|intervalBetweenDelaysMin
decl_stmt|;
DECL|field|intervalBetweenDelaysMax
specifier|final
name|long
name|intervalBetweenDelaysMax
decl_stmt|;
DECL|field|delayDurationMin
specifier|final
name|long
name|delayDurationMin
decl_stmt|;
DECL|field|delayDurationMax
specifier|final
name|long
name|delayDurationMax
decl_stmt|;
DECL|method|SlowClusterStateProcessing
specifier|public
name|SlowClusterStateProcessing
parameter_list|(
name|Random
name|random
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
DECL|method|SlowClusterStateProcessing
specifier|public
name|SlowClusterStateProcessing
parameter_list|(
name|String
name|disruptedNode
parameter_list|,
name|Random
name|random
parameter_list|)
block|{
name|this
argument_list|(
name|disruptedNode
argument_list|,
name|random
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|300
argument_list|,
literal|20000
argument_list|)
expr_stmt|;
block|}
DECL|method|SlowClusterStateProcessing
specifier|public
name|SlowClusterStateProcessing
parameter_list|(
name|String
name|disruptedNode
parameter_list|,
name|Random
name|random
parameter_list|,
name|long
name|intervalBetweenDelaysMin
parameter_list|,
name|long
name|intervalBetweenDelaysMax
parameter_list|,
name|long
name|delayDurationMin
parameter_list|,
name|long
name|delayDurationMax
parameter_list|)
block|{
name|this
argument_list|(
name|random
argument_list|,
name|intervalBetweenDelaysMin
argument_list|,
name|intervalBetweenDelaysMax
argument_list|,
name|delayDurationMin
argument_list|,
name|delayDurationMax
argument_list|)
expr_stmt|;
name|this
operator|.
name|disruptedNode
operator|=
name|disruptedNode
expr_stmt|;
block|}
DECL|method|SlowClusterStateProcessing
specifier|public
name|SlowClusterStateProcessing
parameter_list|(
name|Random
name|random
parameter_list|,
name|long
name|intervalBetweenDelaysMin
parameter_list|,
name|long
name|intervalBetweenDelaysMax
parameter_list|,
name|long
name|delayDurationMin
parameter_list|,
name|long
name|delayDurationMax
parameter_list|)
block|{
name|super
argument_list|(
name|random
argument_list|)
expr_stmt|;
name|this
operator|.
name|intervalBetweenDelaysMin
operator|=
name|intervalBetweenDelaysMin
expr_stmt|;
name|this
operator|.
name|intervalBetweenDelaysMax
operator|=
name|intervalBetweenDelaysMax
expr_stmt|;
name|this
operator|.
name|delayDurationMin
operator|=
name|delayDurationMin
expr_stmt|;
name|this
operator|.
name|delayDurationMax
operator|=
name|delayDurationMax
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|startDisrupting
specifier|public
name|void
name|startDisrupting
parameter_list|()
block|{
name|disrupting
operator|=
literal|true
expr_stmt|;
name|worker
operator|=
operator|new
name|Thread
argument_list|(
operator|new
name|BackgroundWorker
argument_list|()
argument_list|)
expr_stmt|;
name|worker
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|worker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stopDisrupting
specifier|public
name|void
name|stopDisrupting
parameter_list|()
block|{
if|if
condition|(
name|worker
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"stopping to slow down cluster state processing on [{}]"
argument_list|,
name|disruptedNode
argument_list|)
expr_stmt|;
name|disrupting
operator|=
literal|false
expr_stmt|;
name|worker
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|worker
operator|.
name|join
argument_list|(
literal|2
operator|*
operator|(
name|intervalBetweenDelaysMax
operator|+
name|delayDurationMax
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"background thread failed to stop"
argument_list|)
expr_stmt|;
block|}
name|worker
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|interruptClusterStateProcessing
specifier|private
name|boolean
name|interruptClusterStateProcessing
parameter_list|(
specifier|final
name|TimeValue
name|duration
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|String
name|disruptionNodeCopy
init|=
name|disruptedNode
decl_stmt|;
if|if
condition|(
name|disruptionNodeCopy
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"delaying cluster state updates on node [{}] for [{}]"
argument_list|,
name|disruptionNodeCopy
argument_list|,
name|duration
argument_list|)
expr_stmt|;
specifier|final
name|CountDownLatch
name|countDownLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ClusterService
name|clusterService
init|=
name|cluster
operator|.
name|getInstance
argument_list|(
name|ClusterService
operator|.
name|class
argument_list|,
name|disruptionNodeCopy
argument_list|)
decl_stmt|;
if|if
condition|(
name|clusterService
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|AtomicBoolean
name|stopped
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|clusterService
operator|.
name|submitStateUpdateTask
argument_list|(
literal|"service_disruption_delay"
argument_list|,
name|Priority
operator|.
name|IMMEDIATE
argument_list|,
operator|new
name|ClusterStateUpdateTask
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|runOnlyOnMaster
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClusterState
name|execute
parameter_list|(
name|ClusterState
name|currentState
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|count
init|=
name|duration
operator|.
name|millis
argument_list|()
operator|/
literal|200
decl_stmt|;
comment|// wait while checking for a stopped
for|for
control|(
init|;
name|count
operator|>
literal|0
operator|&&
operator|!
name|stopped
operator|.
name|get
argument_list|()
condition|;
name|count
operator|--
control|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|stopped
operator|.
name|get
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|duration
operator|.
name|millis
argument_list|()
operator|%
literal|200
argument_list|)
expr_stmt|;
block|}
name|countDownLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
return|return
name|currentState
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|String
name|source
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|countDownLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|countDownLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|stopped
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// try to wait again, we really want the cluster state thread to be freed up when stopping disruption
name|countDownLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|removeAndEnsureHealthy
specifier|public
name|void
name|removeAndEnsureHealthy
parameter_list|(
name|InternalTestCluster
name|cluster
parameter_list|)
block|{
name|removeFromCluster
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
name|ensureNodeCount
argument_list|(
name|cluster
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|expectedTimeToHeal
specifier|public
name|TimeValue
name|expectedTimeToHeal
parameter_list|()
block|{
return|return
name|TimeValue
operator|.
name|timeValueMillis
argument_list|(
literal|0
argument_list|)
return|;
block|}
DECL|class|BackgroundWorker
class|class
name|BackgroundWorker
implements|implements
name|Runnable
block|{
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|disrupting
operator|&&
name|disruptedNode
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|TimeValue
name|duration
init|=
operator|new
name|TimeValue
argument_list|(
name|delayDurationMin
operator|+
name|random
operator|.
name|nextInt
argument_list|(
call|(
name|int
call|)
argument_list|(
name|delayDurationMax
operator|-
name|delayDurationMin
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|interruptClusterStateProcessing
argument_list|(
name|duration
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|intervalBetweenDelaysMax
operator|>
literal|0
condition|)
block|{
name|duration
operator|=
operator|new
name|TimeValue
argument_list|(
name|intervalBetweenDelaysMin
operator|+
name|random
operator|.
name|nextInt
argument_list|(
call|(
name|int
call|)
argument_list|(
name|intervalBetweenDelaysMax
operator|-
name|intervalBetweenDelaysMin
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|disrupting
operator|&&
name|disruptedNode
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|duration
operator|.
name|millis
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{                 }
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"error in background worker"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

